// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__MethodCallExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.IDataType getExprType();

    java.lang.String getName();

    boolean getBuiltin();

    java.util.List<schemarise.alfa.runtime.model.IExpression> getArgs();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__MethodCallExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                ._Expression__MethodCallExprBuilderImpl();
    }

    public static Expression__MethodCallExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                    .Expression__MethodCallExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                    ._Expression__MethodCallExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__MethodCallExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__MethodCallExprBuilder setExprType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getExprType();

        Expression__MethodCallExprBuilder setName(java.lang.String v);

        java.lang.String getName();

        Expression__MethodCallExprBuilder setBuiltin(boolean v);

        boolean getBuiltin();

        Expression__MethodCallExprBuilder addArgs(schemarise.alfa.runtime.model.IExpression e);

        Expression__MethodCallExprBuilder addAllArgs(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all);

        java.util.List<schemarise.alfa.runtime.model.IExpression> getArgs();

        Expression__MethodCallExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__MethodCallExprBuilderImpl extends _Expression__MethodCallExpr__Base__
            implements Expression__MethodCallExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__MethodCallExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__MethodCallExprBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(4);
            __missingFields.set(0, 4);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__MethodCallExpr
                    .Expression__MethodCallExprDescriptor.INSTANCE;
        }

        public Expression__MethodCallExprBuilder setExprType(
                schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExprType", v);
            this._exprType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_EXPRTYPE);
            return this;
        }

        public Expression__MethodCallExprBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_NAME);
            return this;
        }

        public Expression__MethodCallExprBuilder setBuiltin(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Builtin", v);
            this._builtin = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_BUILTIN);
            return this;
        }

        private void createArgs() {
            this._args = new java.util.ArrayList<>();
        }

        public Expression__MethodCallExprBuilder addArgs(
                schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args", e);
            if (this._args == null) createArgs();
            this._args.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_ARGS);
            return this;
        }

        public Expression__MethodCallExprBuilder setArgs(
                int index, schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args", e);
            if (this._args == null) createArgs();
            this._args.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_ARGS);
            return this;
        }

        public Expression__MethodCallExprBuilder addAllArgs(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args", all);
            if (this._args == null) createArgs();
            this._args.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_ARGS);
            return this;
        }

        private Expression__MethodCallExprBuilder setArgs(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args", all);
            this._args = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.FIELD_ID_ARGS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExprType":
                    setExprType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "name":
                    setName((java.lang.String) val);
                    break;
                case "builtin":
                    setBuiltin((boolean) val);
                    break;
                case "args":
                    setArgs((java.util.List<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__MethodCallExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    4,
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            .Expression__MethodCallExprDescriptor.INSTANCE);

            Expression__MethodCallExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__MethodCallExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _exprType,
                                                _name,
                                                _builtin,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Expression__MethodCallExpr
                                                                        .Expression__MethodCallExprDescriptor
                                                                        .INSTANCE
                                                                        ._argsSupplierInner1,
                                                                _args));
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                ._Expression__MethodCallExprConcrete(
                                _exprType,
                                _name,
                                _builtin,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                                .Expression__MethodCallExprDescriptor.INSTANCE
                                                ._argsSupplierInner1,
                                        _args));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__MethodCallExpr",
                    new java.lang.String[] {"ExprType", "name", "builtin", "args"},
                    new java.lang.Object[] {_exprType, _name, _builtin, _args});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__MethodCallExprConcrete extends _Expression__MethodCallExpr__Base__
            implements Expression__MethodCallExpr {

        private _Expression__MethodCallExprConcrete() {
            super();
        }

        private _Expression__MethodCallExprConcrete(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.lang.String _name,
                boolean _builtin,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _args) {
            super(_exprType, _name, _builtin, _args);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__MethodCallExpr__Base__ {
        public schemarise.alfa.runtime.model.IDataType _exprType;
        public java.lang.String _name;
        public boolean _builtin;
        public java.util.List<schemarise.alfa.runtime.model.IExpression> _args;

        public _Expression__MethodCallExpr__Base__() {}

        public _Expression__MethodCallExpr__Base__(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.lang.String _name,
                boolean _builtin,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _args) {
            this._exprType = _exprType;
            this._name = _name;
            this._builtin = _builtin;
            this._args = _args;
        }

        public schemarise.alfa.runtime.model.IDataType getExprType() {
            return _exprType;
        }

        public java.lang.String getName() {
            return _name;
        }

        public boolean getBuiltin() {
            return _builtin;
        }

        public java.util.List<schemarise.alfa.runtime.model.IExpression> getArgs() {
            return _args;
        }

        public int hashCode() {
            return java.util.Objects.hash(_exprType, _name, _builtin, _args);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__MethodCallExpr",
                    new java.lang.String[] {"ExprType", "name", "builtin", "args"},
                    new java.lang.Object[] {_exprType, _name, _builtin, _args});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            ._Expression__MethodCallExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__MethodCallExpr
                            ._Expression__MethodCallExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                            ._Expression__MethodCallExprConcrete)
                                    o;
            return java.util.Objects.equals(_exprType, rhs._exprType)
                    && java.util.Objects.equals(_name, rhs._name)
                    && _builtin == rhs._builtin
                    && java.util.Objects.equals(_args, rhs._args);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__MethodCallExpr
                    .Expression__MethodCallExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExprType":
                    return _exprType;
                case "name":
                    return _name;
                case "builtin":
                    return _builtin;
                case "args":
                    return _args;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getExprType().validate(__builderConfig);

            java.util.stream.IntStream.range(0, getArgs().size())
                    .forEach(
                            e0 -> {
                                getArgs().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__MethodCallExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__MethodCallExpr";
        public static schemarise.alfa.runtime.model.Expression__MethodCallExpr
                        .Expression__MethodCallExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                .Expression__MethodCallExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXPRTYPE = 0;
        public static final String FIELD_EXPRTYPE = "ExprType";

        public static final short FIELD_ID_NAME = 1;
        public static final String FIELD_NAME = "name";

        public static final short FIELD_ID_BUILTIN = 2;
        public static final String FIELD_BUILTIN = "builtin";

        public static final short FIELD_ID_ARGS = 3;
        public static final String FIELD_ARGS = "args";

        private schemarise.alfa.runtime.model.UdtDataType _exprTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _builtinType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _argsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _exprTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                ._Expression__MethodCallExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exprTypeConsumer =
                        (builder, supplier) -> {
                            builder.setExprType(_exprTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                ._Expression__MethodCallExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _builtinConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _builtinType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                ._Expression__MethodCallExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _builtinConsumer =
                        (builder, supplier) -> {
                            builder.setBuiltin(_builtinConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.IExpression>>
                _argsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _argsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _argsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _argsType),
                                    _argsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                ._Expression__MethodCallExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _argsConsumer =
                        (builder, supplier) -> {
                            builder.addAllArgs(_argsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplier =
                        (p, consumer) -> {
                            _exprTypeSupplierInner1.accept(p.getExprType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _builtinSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _builtinType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _builtinSupplier =
                        (p, consumer) -> {
                            _builtinSupplierInner1.accept(p.getBuiltin(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _argsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _argsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _argsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _argsType),
                                    pInner1,
                                    _argsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _argsSupplier =
                        (p, consumer) -> {
                            _argsSupplierInner1.accept(p.getArgs(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__MethodCallExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta exprTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exprTypeSupplier),
                        java.util.Optional.of(_exprTypeConsumer),
                        java.util.Optional.of(_exprTypeSupplierInner1),
                        java.util.Optional.of(_exprTypeConsumerInner1),
                        _exprTypeType,
                        FIELD_EXPRTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta builtinMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_builtinSupplier),
                        java.util.Optional.of(_builtinConsumer),
                        java.util.Optional.of(_builtinSupplierInner1),
                        java.util.Optional.of(_builtinConsumerInner1),
                        _builtinType,
                        FIELD_BUILTIN,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta argsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_argsSupplier),
                        java.util.Optional.of(_argsConsumer),
                        java.util.Optional.of(_argsSupplierInner1),
                        java.util.Optional.of(_argsConsumerInner1),
                        _argsType,
                        FIELD_ARGS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__MethodCallExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                    ._Expression__MethodCallExprBuilderImpl();
        }

        @Override
        public Expression__MethodCallExprBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__MethodCallExpr
                    ._Expression__MethodCallExprBuilderImpl(cc);
        }

        public Expression__MethodCallExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__MethodCallExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXPRTYPE, exprTypeMeta);
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_BUILTIN, builtinMeta);
                                        put(FIELD_ARGS, argsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__MethodCallExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXPRTYPE:
                    return FIELD_EXPRTYPE;
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_BUILTIN:
                    return FIELD_BUILTIN;
                case FIELD_ID_ARGS:
                    return FIELD_ARGS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__MethodCallExpr{ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];args:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;builtin:boolean;name:string;}
            schemarise.alfa.runtime.model.Expression__MethodCallExpr{ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];args:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;builtin:boolean;name:string;}
            */
            return "6907aa3b:792657ff";
        }
    }
    // </editor-fold>

}
