// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Try<T> extends com.schemarise.alfa.runtime.Union {

    public default T getResult() {
        throw new IllegalStateException(
                "Accessing field Result is not supported in " + getClass().getSimpleName());
    }

    public default boolean isResult() {
        return false;
    }

    public default schemarise.alfa.runtime.model.TryFailure getFailure() {
        throw new IllegalStateException(
                "Accessing field Failure is not supported in " + getClass().getSimpleName());
    }

    public default boolean isFailure() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseResult">
    static final class CaseResult<T> implements Try {
        private T _result;

        private CaseResult(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, T v) {
            this._result = v;
        }

        public T getResult() {
            return this._result;
        }

        public boolean isResult() {
            return true;
        }

        public java.lang.String caseName() {
            return "Result";
        }

        public java.lang.Object caseValue() {
            return _result;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("Result")) return _result;
            else throw new IllegalStateException("Cannot access Result");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Try.TryDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseFailure">
    static final class CaseFailure<T> implements Try {
        private schemarise.alfa.runtime.model.TryFailure _failure;

        private CaseFailure(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.TryFailure v) {
            this._failure = v;
            getFailure().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.TryFailure getFailure() {
            return this._failure;
        }

        public boolean isFailure() {
            return true;
        }

        public java.lang.String caseName() {
            return "Failure";
        }

        public java.lang.Object caseValue() {
            return _failure;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("Failure")) return _failure;
            else throw new IllegalStateException("Cannot access Failure");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Try.TryDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static <T> TryBuilder<T> builder() {
        return new schemarise.alfa.runtime.model.Try._TryBuilderImpl();
    }

    public static <T> TryBuilder<T> builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Try.TryDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Try._TryBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TryBuilder<T>
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TryBuilder setResult(T v);

        TryBuilder setFailure(schemarise.alfa.runtime.model.TryFailure v);

        Try<T> build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TryBuilderImpl<T> implements TryBuilder<T> {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private T _result;
        private schemarise.alfa.runtime.model.TryFailure _failure;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Result":
                    return _result;
                case "Failure":
                    return _failure;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _TryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Try.TryDescriptor.INSTANCE;
        }

        public TryBuilder setResult(T v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Result", v);
            this._result = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Try.TryDescriptor.FIELD_ID_RESULT);
            return this;
        }

        public TryBuilder setFailure(schemarise.alfa.runtime.model.TryFailure v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Failure", v);
            this._failure = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Try.TryDescriptor.FIELD_ID_FAILURE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Result":
                    setResult((T) val);
                    break;
                case "Failure":
                    setFailure((schemarise.alfa.runtime.model.TryFailure) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Try<T> build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Try.TryDescriptor.FIELD_ID_RESULT))
                return new CaseResult(__builderConfig, _result);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Try.TryDescriptor.FIELD_ID_FAILURE))
                return new CaseFailure(__builderConfig, _failure);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.Try.TryDescriptor.INSTANCE,
                    2,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Try",
                    new java.lang.String[] {"Result", "Failure"},
                    new java.lang.Object[] {_result, _failure});
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TryDescriptor<T>
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Try";
        public static schemarise.alfa.runtime.model.Try.TryDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Try.TryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_RESULT = 0;
        public static final String FIELD_RESULT = "Result";

        public static final short FIELD_ID_FAILURE = 1;
        public static final String FIELD_FAILURE = "Failure";

        private schemarise.alfa.runtime.model.TypeParameterDataType _resultType =
                schemarise.alfa.runtime.model.TypeParameterDataType.builder().setParamName("T").build();

        private schemarise.alfa.runtime.model.UdtDataType _failureType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.TryFailure")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        /* -- Consumer T -- */

        /* -- Consumer schemarise.alfa.runtime.model.TryFailure -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.TryFailure>
                _failureConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _failureType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Try._TryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _failureConsumer =
                        (builder, supplier) -> {
                            builder.setFailure(_failureConsumerInner1.apply(supplier));
                        };

        /* -- Supplier T -- */

        /* -- Supplier schemarise.alfa.runtime.model.TryFailure -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure,
                        com.schemarise.alfa.runtime.DataConsumer>
                _failureSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _failureType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Try, com.schemarise.alfa.runtime.DataConsumer>
                _failureSupplier =
                        (p, consumer) -> {
                            _failureSupplierInner1.accept(p.getFailure(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Try, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta resultMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _resultType,
                        FIELD_RESULT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta failureMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_failureSupplier),
                        java.util.Optional.of(_failureConsumer),
                        java.util.Optional.of(_failureSupplierInner1),
                        java.util.Optional.of(_failureConsumerInner1),
                        _failureType,
                        FIELD_FAILURE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TryBuilder builder() {
            return new schemarise.alfa.runtime.model.Try._TryBuilderImpl();
        }

        @Override
        public TryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Try._TryBuilderImpl(cc);
        }

        public TryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Try>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_RESULT, resultMeta);
                                        put(FIELD_FAILURE, failureMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Try>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_RESULT:
                    return FIELD_RESULT;
                case FIELD_ID_FAILURE:
                    return FIELD_FAILURE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Try{Failure:schemarise.alfa.runtime.model.TryFailure[6f7643a8];Result:;}
            schemarise.alfa.runtime.model.Try{Failure:schemarise.alfa.runtime.model.TryFailure[112efdb1];Result:;}
            */
            return "d00472af:d91bec91";
        }
    }
    // </editor-fold>

}
