// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.path;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ListEntry extends com.schemarise.alfa.runtime.Record {

    int getIndex();

    schemarise.alfa.runtime.model.path.PathElement getElement();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ListEntryBuilder builder() {
        return new schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl();
    }

    public static ListEntryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ListEntryBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        ListEntryBuilder setIndex(int v);

        int getIndex();

        ListEntryBuilder setElement(schemarise.alfa.runtime.model.path.PathElement v);

        schemarise.alfa.runtime.model.path.PathElement getElement();

        ListEntry build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ListEntryBuilderImpl extends _ListEntry__Base__ implements ListEntryBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ListEntryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ListEntryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor.INSTANCE;
        }

        public ListEntryBuilder setIndex(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Index", v);
            this._index = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor
                            .FIELD_ID_INDEX);
            return this;
        }

        public ListEntryBuilder setElement(schemarise.alfa.runtime.model.path.PathElement v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Element", v);
            this._element = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor
                            .FIELD_ID_ELEMENT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Index":
                    setIndex((int) val);
                    break;
                case "Element":
                    setElement((schemarise.alfa.runtime.model.path.PathElement) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ListEntry build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor.INSTANCE);

            ListEntry obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ListEntry)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _index, _element);
            else
                obj =
                        new schemarise.alfa.runtime.model.path.ListEntry._ListEntryConcrete(
                                _index, _element);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.ListEntry",
                    new java.lang.String[] {"Index", "Element"},
                    new java.lang.Object[] {_index, _element});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ListEntryConcrete extends _ListEntry__Base__ implements ListEntry {

        private _ListEntryConcrete() {
            super();
        }

        private _ListEntryConcrete(
                int _index, schemarise.alfa.runtime.model.path.PathElement _element) {
            super(_index, _element);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ListEntry__Base__ {
        public int _index;
        public schemarise.alfa.runtime.model.path.PathElement _element;

        public _ListEntry__Base__() {}

        public _ListEntry__Base__(
                int _index, schemarise.alfa.runtime.model.path.PathElement _element) {
            this._index = _index;
            this._element = _element;
        }

        public int getIndex() {
            return _index;
        }

        public schemarise.alfa.runtime.model.path.PathElement getElement() {
            return _element;
        }

        public int hashCode() {
            return java.util.Objects.hash(_index, _element);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.ListEntry",
                    new java.lang.String[] {"Index", "Element"},
                    new java.lang.Object[] {_index, _element});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.path.ListEntry._ListEntryConcrete))
                return false;
            schemarise.alfa.runtime.model.path.ListEntry._ListEntryConcrete rhs =
                    (schemarise.alfa.runtime.model.path.ListEntry._ListEntryConcrete) o;
            return _index == rhs._index && java.util.Objects.equals(_element, rhs._element);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Index":
                    return _index;
                case "Element":
                    return _element;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getElement().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ListEntryDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.path.ListEntry";
        public static schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.path.ListEntry.ListEntryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_INDEX = 0;
        public static final String FIELD_INDEX = "Index";

        public static final short FIELD_ID_ELEMENT = 1;
        public static final String FIELD_ELEMENT = "Element";

        private schemarise.alfa.runtime.model.ScalarDataType _indexType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _elementType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.path.PathElement")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .build();

        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _indexConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _indexType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _indexConsumer =
                        (builder, supplier) -> {
                            builder.setIndex(_indexConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.path.PathElement>
                _elementConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _elementType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _elementConsumer =
                        (builder, supplier) -> {
                            builder.setElement(_elementConsumerInner1.apply(supplier));
                        };

        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _indexSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _indexType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.ListEntry,
                        com.schemarise.alfa.runtime.DataConsumer>
                _indexSupplier =
                        (p, consumer) -> {
                            _indexSupplierInner1.accept(p.getIndex(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _elementSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _elementType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.ListEntry,
                        com.schemarise.alfa.runtime.DataConsumer>
                _elementSupplier =
                        (p, consumer) -> {
                            _elementSupplierInner1.accept(p.getElement(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ListEntry, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta indexMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_indexSupplier),
                        java.util.Optional.of(_indexConsumer),
                        java.util.Optional.of(_indexSupplierInner1),
                        java.util.Optional.of(_indexConsumerInner1),
                        _indexType,
                        FIELD_INDEX,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta elementMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_elementSupplier),
                        java.util.Optional.of(_elementConsumer),
                        java.util.Optional.of(_elementSupplierInner1),
                        java.util.Optional.of(_elementConsumerInner1),
                        _elementType,
                        FIELD_ELEMENT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ListEntryBuilder builder() {
            return new schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl();
        }

        @Override
        public ListEntryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.path.ListEntry._ListEntryBuilderImpl(cc);
        }

        public ListEntryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ListEntry>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_INDEX, indexMeta);
                                        put(FIELD_ELEMENT, elementMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ListEntry>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_INDEX:
                    return FIELD_INDEX;
                case FIELD_ID_ELEMENT:
                    return FIELD_ELEMENT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.path.ListEntry{Element:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];Index:int;}
            schemarise.alfa.runtime.model.path.ListEntry{Element:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];Index:int;}
            */
            return "509cdd3d:";
        }
    }
    // </editor-fold>

}
