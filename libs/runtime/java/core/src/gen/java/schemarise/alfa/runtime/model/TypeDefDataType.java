// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TypeDefDataType
        extends com.schemarise.alfa.runtime.Record,
                schemarise.alfa.runtime.model.IDataType,
                schemarise.alfa.runtime.model.IDocumentation {

    java.util.Optional<java.lang.String> getDoc();

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    java.lang.String getTypeName();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>> getTypeArguments();

    schemarise.alfa.runtime.model.IDataType getFinalType();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TypeDefDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl();
    }

    public static TypeDefDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                                    .INSTANCE);
        else
            return new schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl(
                    bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TypeDefDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDataType.IDataTypeBuilder,
                    schemarise.alfa.runtime.model.IDocumentation.IDocumentationBuilder {
        TypeDefDataTypeBuilder setDoc(java.util.Optional<java.lang.String> v);

        TypeDefDataTypeBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        TypeDefDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        TypeDefDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        TypeDefDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        TypeDefDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        TypeDefDataTypeBuilder setTypeName(java.lang.String v);

        java.lang.String getTypeName();

        TypeDefDataTypeBuilder setTypeArguments(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>> v);

        TypeDefDataTypeBuilder setTypeArguments(
                java.util.List<schemarise.alfa.runtime.model.IDataType> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>
                getTypeArguments();

        TypeDefDataTypeBuilder setFinalType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getFinalType();

        TypeDefDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TypeDefDataTypeBuilderImpl extends _TypeDefDataType__Base__
            implements TypeDefDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TypeDefDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TypeDefDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setDoc(java.util.Optional.empty());
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
            setTypeArguments(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor.INSTANCE;
        }

        public TypeDefDataTypeBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public TypeDefDataTypeBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public TypeDefDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public TypeDefDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public TypeDefDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public TypeDefDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public TypeDefDataTypeBuilder setTypeName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeName", v);
            this._typeName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_TYPENAME);
            return this;
        }

        public TypeDefDataTypeBuilder setTypeArguments(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeArguments", v);
            this._typeArguments = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_TYPEARGUMENTS);
            return this;
        }

        public TypeDefDataTypeBuilder setTypeArguments(
                java.util.List<schemarise.alfa.runtime.model.IDataType> v) {
            this._typeArguments = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_TYPEARGUMENTS);
            return this;
        }

        public TypeDefDataTypeBuilder setFinalType(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FinalType", v);
            this._finalType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .FIELD_ID_FINALTYPE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "TypeName":
                    setTypeName((java.lang.String) val);
                    break;
                case "TypeArguments":
                    setTypeArguments(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.IDataType>>)
                                    val);
                    break;
                case "FinalType":
                    setFinalType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TypeDefDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                            .INSTANCE);

            TypeDefDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TypeDefDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _doc,
                                                _extendedAttribs,
                                                _typeDefName,
                                                _typeName,
                                                _typeArguments,
                                                _finalType);
            else
                obj =
                        new schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeConcrete(
                                _doc,
                                _extendedAttribs,
                                _typeDefName,
                                _typeName,
                                _typeArguments,
                                _finalType);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeDefDataType",
                    new java.lang.String[] {
                        "Doc",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "TypeName",
                        "TypeArguments",
                        "FinalType"
                    },
                    new java.lang.Object[] {
                        _doc, _extendedAttribs, _typeDefName, _typeName, _typeArguments, _finalType
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TypeDefDataTypeConcrete extends _TypeDefDataType__Base__
            implements TypeDefDataType {

        private _TypeDefDataTypeConcrete() {
            super();
        }

        private _TypeDefDataTypeConcrete(
                java.util.Optional<java.lang.String> _doc,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _typeName,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>
                        _typeArguments,
                schemarise.alfa.runtime.model.IDataType _finalType) {
            super(_doc, _extendedAttribs, _typeDefName, _typeName, _typeArguments, _finalType);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TypeDefDataType__Base__ {
        public java.util.Optional<java.lang.String> _doc;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public java.lang.String _typeName;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>
                _typeArguments;
        public schemarise.alfa.runtime.model.IDataType _finalType;

        public _TypeDefDataType__Base__() {}

        public _TypeDefDataType__Base__(
                java.util.Optional<java.lang.String> _doc,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _typeName,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>
                        _typeArguments,
                schemarise.alfa.runtime.model.IDataType _finalType) {
            this._doc = _doc;
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._typeName = _typeName;
            this._typeArguments = _typeArguments;
            this._finalType = _finalType;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public java.lang.String getTypeName() {
            return _typeName;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>
                getTypeArguments() {
            return _typeArguments;
        }

        public schemarise.alfa.runtime.model.IDataType getFinalType() {
            return _finalType;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _doc, _extendedAttribs, _typeDefName, _typeName, _typeArguments, _finalType);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeDefDataType",
                    new java.lang.String[] {
                        "Doc",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "TypeName",
                        "TypeArguments",
                        "FinalType"
                    },
                    new java.lang.Object[] {
                        _doc, _extendedAttribs, _typeDefName, _typeName, _typeArguments, _finalType
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeConcrete) o;
            return java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(_typeName, rhs._typeName)
                    && java.util.Objects.equals(_typeArguments, rhs._typeArguments)
                    && java.util.Objects.equals(_finalType, rhs._finalType);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Doc":
                    return _doc;
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "TypeName":
                    return _typeName;
                case "TypeArguments":
                    return _typeArguments;
                case "FinalType":
                    return _finalType;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getTypeArguments().isPresent()) {
                java.util.stream.IntStream.range(0, getTypeArguments().get().size())
                        .forEach(
                                e0 -> {
                                    getTypeArguments().get().get(e0).validate(__builderConfig);
                                });
            }
            getFinalType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TypeDefDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TypeDefDataType";
        public static schemarise.alfa.runtime.model.TypeDefDataType.TypeDefDataTypeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.TypeDefDataType
                                .TypeDefDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DOC = 0;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_EXTENDEDATTRIBS = 1;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 2;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_TYPENAME = 3;
        public static final String FIELD_TYPENAME = "TypeName";

        public static final short FIELD_ID_TYPEARGUMENTS = 4;
        public static final String FIELD_TYPEARGUMENTS = "TypeArguments";

        public static final short FIELD_ID_FINALTYPE = 5;
        public static final String FIELD_FINALTYPE = "FinalType";

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _typeNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeArgumentsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.IDataType")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .traitType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _finalTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _typeNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeName(_typeNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.IDataType > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>>
                _typeArgumentsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<schemarise.alfa.runtime.model.IDataType>>
                                    _typeArgumentsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .IDataType>
                                                        _typeArgumentsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _typeArgumentsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeArgumentsType)
                                                                        .getComponentType()),
                                                        _typeArgumentsConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeArgumentsType),
                                    _typeArgumentsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeArgumentsConsumer =
                        (builder, supplier) -> {
                            builder.setTypeArguments(_typeArgumentsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _finalTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _finalTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _finalTypeConsumer =
                        (builder, supplier) -> {
                            builder.setFinalType(_finalTypeConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _typeNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeNameSupplier =
                        (p, consumer) -> {
                            _typeNameSupplierInner1.accept(p.getTypeName(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.IDataType > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.IDataType>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeArgumentsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<schemarise.alfa.runtime.model.IDataType>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeArgumentsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .IDataType,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _typeArgumentsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _typeArgumentsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeArgumentsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _typeArgumentsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeArgumentsType),
                                    pInner1,
                                    _typeArgumentsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeArgumentsSupplier =
                        (p, consumer) -> {
                            _typeArgumentsSupplierInner1.accept(p.getTypeArguments(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _finalTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _finalTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _finalTypeSupplier =
                        (p, consumer) -> {
                            _finalTypeSupplierInner1.accept(p.getFinalType(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TypeDefDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeNameSupplier),
                        java.util.Optional.of(_typeNameConsumer),
                        java.util.Optional.of(_typeNameSupplierInner1),
                        java.util.Optional.of(_typeNameConsumerInner1),
                        _typeNameType,
                        FIELD_TYPENAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeArgumentsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeArgumentsSupplier),
                        java.util.Optional.of(_typeArgumentsConsumer),
                        java.util.Optional.of(_typeArgumentsSupplierInner1),
                        java.util.Optional.of(_typeArgumentsConsumerInner1),
                        _typeArgumentsType,
                        FIELD_TYPEARGUMENTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta finalTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_finalTypeSupplier),
                        java.util.Optional.of(_finalTypeConsumer),
                        java.util.Optional.of(_finalTypeSupplierInner1),
                        java.util.Optional.of(_finalTypeConsumerInner1),
                        _finalTypeType,
                        FIELD_FINALTYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TypeDefDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl();
        }

        @Override
        public TypeDefDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TypeDefDataType._TypeDefDataTypeBuilderImpl(
                    cc);
        }

        public TypeDefDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeDefDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(FIELD_TYPENAME, typeNameMeta);
                                        put(FIELD_TYPEARGUMENTS, typeArgumentsMeta);
                                        put(FIELD_FINALTYPE, finalTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeDefDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_TYPENAME:
                    return FIELD_TYPENAME;
                case FIELD_ID_TYPEARGUMENTS:
                    return FIELD_TYPEARGUMENTS;
                case FIELD_ID_FINALTYPE:
                    return FIELD_FINALTYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TypeDefDataType{Doc:optional<string;>;ExtendedAttribs:optional<map<string,string>;>;FinalType:schemarise.alfa.runtime.model.IDataType[4404d6a0];TypeArguments:optional<list<schemarise.alfa.runtime.model.IDataType[4404d6a0]>;>;TypeDefName:optional<string;>;TypeName:string;}
            schemarise.alfa.runtime.model.TypeDefDataType{FinalType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];TypeName:string;}
            */
            return "e3ccde98:b7c0f063";
        }
    }
    // </editor-fold>

}
