// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Assert
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.MethodsContainer {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<
                    java.util.Map<
                            java.lang.String,
                            java.util.Map<
                                    java.lang.String, schemarise.alfa.runtime.model.IExpression>>>
            getAnnotations();

    java.util.Optional<java.lang.String> getDoc();

    schemarise.alfa.runtime.model.UdtVersionedName getContainerName();

    schemarise.alfa.runtime.model.MethodsContainerType getContainerType();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal> getConstructorFormals();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> getMethods();

    java.lang.String getName();

    boolean getIsAssertAll();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static AssertBuilder builder() {
        return new schemarise.alfa.runtime.model.Assert._AssertBuilderImpl();
    }

    public static AssertBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Assert.AssertDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Assert._AssertBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface AssertBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.MethodsContainer.MethodsContainerBuilder {
        AssertBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        AssertBuilder setExtendedAttribs(java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        AssertBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v);

        AssertBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v);

        java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations();

        AssertBuilder setDoc(java.util.Optional<java.lang.String> v);

        AssertBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        AssertBuilder setContainerName(schemarise.alfa.runtime.model.UdtVersionedName v);

        schemarise.alfa.runtime.model.UdtVersionedName getContainerName();

        AssertBuilder setContainerType(schemarise.alfa.runtime.model.MethodsContainerType v);

        schemarise.alfa.runtime.model.MethodsContainerType getContainerType();

        AssertBuilder putConstructorFormals(
                java.lang.String k, schemarise.alfa.runtime.model.Formal v);

        AssertBuilder putAllConstructorFormals(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>
                getConstructorFormals();

        AssertBuilder putMethods(java.lang.String k, schemarise.alfa.runtime.model.Method v);

        AssertBuilder putAllMethods(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> getMethods();

        AssertBuilder setName(java.lang.String v);

        java.lang.String getName();

        AssertBuilder setIsAssertAll(boolean v);

        boolean getIsAssertAll();

        Assert build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _AssertBuilderImpl extends _Assert__Base__ implements AssertBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _AssertBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _AssertBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(9);
            __missingFields.set(0, 9);
            setExtendedAttribs(java.util.Optional.empty());
            setAnnotations(java.util.Optional.empty());
            setDoc(java.util.Optional.empty());
            setConstructorFormals(
                    new java.util.HashMap<
                            java.lang.String, schemarise.alfa.runtime.model.Formal>());
            setMethods(
                    new java.util.HashMap<
                            java.lang.String, schemarise.alfa.runtime.model.Method>());
            setIsAssertAll(false);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Assert.AssertDescriptor.INSTANCE;
        }

        public AssertBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public AssertBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public AssertBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Annotations", v);
            this._annotations = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_ANNOTATIONS);
            return this;
        }

        public AssertBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v) {
            this._annotations = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_ANNOTATIONS);
            return this;
        }

        public AssertBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_DOC);
            return this;
        }

        public AssertBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_DOC);
            return this;
        }

        public AssertBuilder setContainerName(schemarise.alfa.runtime.model.UdtVersionedName v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ContainerName", v);
            this._containerName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_CONTAINERNAME);
            return this;
        }

        public AssertBuilder setContainerType(
                schemarise.alfa.runtime.model.MethodsContainerType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ContainerType", v);
            this._containerType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_CONTAINERTYPE);
            return this;
        }

        private void createConstructorFormals() {
            this._constructorFormals = new java.util.LinkedHashMap<>();
        }

        public AssertBuilder putConstructorFormals(
                java.lang.String k, schemarise.alfa.runtime.model.Formal v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key ConstructorFormals", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value ConstructorFormals", v);
            if (this._constructorFormals == null) createConstructorFormals();
            this._constructorFormals.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor
                            .FIELD_ID_CONSTRUCTORFORMALS);
            return this;
        }

        public AssertBuilder putAllConstructorFormals(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ConstructorFormals", all);
            if (this._constructorFormals == null) createConstructorFormals();
            this._constructorFormals.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor
                            .FIELD_ID_CONSTRUCTORFORMALS);
            return this;
        }

        private AssertBuilder setConstructorFormals(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ConstructorFormals", all);
            _constructorFormals = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor
                            .FIELD_ID_CONSTRUCTORFORMALS);
            return this;
        }

        private void createMethods() {
            this._methods = new java.util.LinkedHashMap<>();
        }

        public AssertBuilder putMethods(
                java.lang.String k, schemarise.alfa.runtime.model.Method v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Methods", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Methods", v);
            if (this._methods == null) createMethods();
            this._methods.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_METHODS);
            return this;
        }

        public AssertBuilder putAllMethods(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Methods", all);
            if (this._methods == null) createMethods();
            this._methods.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_METHODS);
            return this;
        }

        private AssertBuilder setMethods(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Methods", all);
            _methods = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_METHODS);
            return this;
        }

        public AssertBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_NAME);
            return this;
        }

        public AssertBuilder setIsAssertAll(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsAssertAll", v);
            this._isAssertAll = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.FIELD_ID_ISASSERTALL);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "Annotations":
                    setAnnotations(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>)
                                    val);
                    break;
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "ContainerName":
                    setContainerName((schemarise.alfa.runtime.model.UdtVersionedName) val);
                    break;
                case "ContainerType":
                    setContainerType((schemarise.alfa.runtime.model.MethodsContainerType) val);
                    break;
                case "ConstructorFormals":
                    setConstructorFormals(
                            (java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>)
                                    val);
                    break;
                case "Methods":
                    setMethods(
                            (java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method>)
                                    val);
                    break;
                case "Name":
                    setName((java.lang.String) val);
                    break;
                case "IsAssertAll":
                    setIsAssertAll((boolean) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Assert build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    9,
                    schemarise.alfa.runtime.model.Assert.AssertDescriptor.INSTANCE);

            Assert obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Assert)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _annotations,
                                                _doc,
                                                _containerName,
                                                _containerType,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model.Assert
                                                                        .AssertDescriptor.INSTANCE
                                                                        ._constructorFormalsSupplierInner1,
                                                                _constructorFormals),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model.Assert
                                                                        .AssertDescriptor.INSTANCE
                                                                        ._methodsSupplierInner1,
                                                                _methods),
                                                _name,
                                                _isAssertAll);
            else
                obj =
                        new schemarise.alfa.runtime.model.Assert._AssertConcrete(
                                _extendedAttribs,
                                _annotations,
                                _doc,
                                _containerName,
                                _containerType,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Assert.AssertDescriptor
                                                .INSTANCE
                                                ._constructorFormalsSupplierInner1,
                                        _constructorFormals),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Assert.AssertDescriptor
                                                .INSTANCE
                                                ._methodsSupplierInner1,
                                        _methods),
                                _name,
                                _isAssertAll);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Assert",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "Annotations",
                        "Doc",
                        "ContainerName",
                        "ContainerType",
                        "ConstructorFormals",
                        "Methods",
                        "Name",
                        "IsAssertAll"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _annotations,
                        _doc,
                        _containerName,
                        _containerType,
                        _constructorFormals,
                        _methods,
                        _name,
                        _isAssertAll
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _AssertConcrete extends _Assert__Base__ implements Assert {

        private _AssertConcrete() {
            super();
        }

        private _AssertConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                schemarise.alfa.runtime.model.UdtVersionedName _containerName,
                schemarise.alfa.runtime.model.MethodsContainerType _containerType,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>
                        _constructorFormals,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> _methods,
                java.lang.String _name,
                boolean _isAssertAll) {
            super(
                    _extendedAttribs,
                    _annotations,
                    _doc,
                    _containerName,
                    _containerType,
                    _constructorFormals,
                    _methods,
                    _name,
                    _isAssertAll);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Assert__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                _annotations;
        public java.util.Optional<java.lang.String> _doc;
        public schemarise.alfa.runtime.model.UdtVersionedName _containerName;
        public schemarise.alfa.runtime.model.MethodsContainerType _containerType;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>
                _constructorFormals;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> _methods;
        public java.lang.String _name;
        public boolean _isAssertAll;

        public _Assert__Base__() {}

        public _Assert__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                schemarise.alfa.runtime.model.UdtVersionedName _containerName,
                schemarise.alfa.runtime.model.MethodsContainerType _containerType,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>
                        _constructorFormals,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> _methods,
                java.lang.String _name,
                boolean _isAssertAll) {
            this._extendedAttribs = _extendedAttribs;
            this._annotations = _annotations;
            this._doc = _doc;
            this._containerName = _containerName;
            this._containerType = _containerType;
            this._constructorFormals = _constructorFormals;
            this._methods = _methods;
            this._name = _name;
            this._isAssertAll = _isAssertAll;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations() {
            return _annotations;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public schemarise.alfa.runtime.model.UdtVersionedName getContainerName() {
            return _containerName;
        }

        public schemarise.alfa.runtime.model.MethodsContainerType getContainerType() {
            return _containerType;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>
                getConstructorFormals() {
            return _constructorFormals;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method> getMethods() {
            return _methods;
        }

        public java.lang.String getName() {
            return _name;
        }

        public boolean getIsAssertAll() {
            return _isAssertAll;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _extendedAttribs,
                    _annotations,
                    _doc,
                    _containerName,
                    _containerType,
                    _constructorFormals,
                    _methods,
                    _name,
                    _isAssertAll);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Assert",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "Annotations",
                        "Doc",
                        "ContainerName",
                        "ContainerType",
                        "ConstructorFormals",
                        "Methods",
                        "Name",
                        "IsAssertAll"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _annotations,
                        _doc,
                        _containerName,
                        _containerType,
                        _constructorFormals,
                        _methods,
                        _name,
                        _isAssertAll
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Assert._AssertConcrete)) return false;
            schemarise.alfa.runtime.model.Assert._AssertConcrete rhs =
                    (schemarise.alfa.runtime.model.Assert._AssertConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_annotations, rhs._annotations)
                    && java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_containerName, rhs._containerName)
                    && java.util.Objects.equals(_containerType, rhs._containerType)
                    && java.util.Objects.equals(_constructorFormals, rhs._constructorFormals)
                    && java.util.Objects.equals(_methods, rhs._methods)
                    && java.util.Objects.equals(_name, rhs._name)
                    && _isAssertAll == rhs._isAssertAll;
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Assert.AssertDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "Annotations":
                    return _annotations;
                case "Doc":
                    return _doc;
                case "ContainerName":
                    return _containerName;
                case "ContainerType":
                    return _containerType;
                case "ConstructorFormals":
                    return _constructorFormals;
                case "Methods":
                    return _methods;
                case "Name":
                    return _name;
                case "IsAssertAll":
                    return _isAssertAll;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getAnnotations().isPresent()) {
                getAnnotations()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue()
                                            .entrySet()
                                            .stream()
                                            .filter(e1 -> e1.getValue() != null)
                                            .forEach(
                                                    e1 -> {
                                                        e1.getValue().validate(__builderConfig);
                                                    });
                                });
            }

            getContainerName().validate(__builderConfig);
            getContainerType().validate(__builderConfig);
            getConstructorFormals()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            getMethods()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class AssertDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Assert";
        public static schemarise.alfa.runtime.model.Assert.AssertDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Assert.AssertDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_ANNOTATIONS = 1;
        public static final String FIELD_ANNOTATIONS = "Annotations";

        public static final short FIELD_ID_DOC = 2;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_CONTAINERNAME = 3;
        public static final String FIELD_CONTAINERNAME = "ContainerName";

        public static final short FIELD_ID_CONTAINERTYPE = 4;
        public static final String FIELD_CONTAINERTYPE = "ContainerType";

        public static final short FIELD_ID_CONSTRUCTORFORMALS = 5;
        public static final String FIELD_CONSTRUCTORFORMALS = "ConstructorFormals";

        public static final short FIELD_ID_METHODS = 6;
        public static final String FIELD_METHODS = "Methods";

        public static final short FIELD_ID_NAME = 7;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_ISASSERTALL = 8;
        public static final String FIELD_ISASSERTALL = "IsAssertAll";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _annotationsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("AnnotationName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.MapDataType.builder()
                                                        .setKeyType(
                                                                schemarise.alfa.runtime.model
                                                                        .ScalarDataType.builder()
                                                                        .setScalarType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .ScalarType
                                                                                        .stringType)
                                                                        .build())
                                                        .setValueType(
                                                                schemarise.alfa.runtime.model.UdtDataType
                                                                        .builder()
                                                                        .setFullyQualifiedName(
                                                                                "schemarise.alfa.runtime.model.IExpression")
                                                                        .setUdtType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .UdtMetaType
                                                                                        .traitType)
                                                                        .build())
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _containerNameType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtVersionedName")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _containerTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.MethodsContainerType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _constructorFormalsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Formal")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _methodsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Method")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _isAssertAllType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>>
                _annotationsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>
                                    _annotationsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _annotationsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _annotationsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>>
                                                        _annotationsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    java.lang
                                                                                            .String>
                                                                            _annotationsConsumerInner4Key =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .stringValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()));
                                                                                    };
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression>
                                                                            _annotationsConsumerInner4Val =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .objectValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()));
                                                                                    };
                                                                    return supplierInner3.mapValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            _annotationsConsumerInner4Key,
                                                                            _annotationsConsumerInner4Val);
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        _annotationsConsumerInner3Key,
                                                        _annotationsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    _annotationsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _annotationsConsumer =
                        (builder, supplier) -> {
                            builder.setAnnotations(_annotationsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtVersionedName>
                _containerNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _containerNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _containerNameConsumer =
                        (builder, supplier) -> {
                            builder.setContainerName(_containerNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.MethodsContainerType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.MethodsContainerType>
                _containerTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _containerTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _containerTypeConsumer =
                        (builder, supplier) -> {
                            builder.setContainerType(_containerTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.Formal > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>>
                _constructorFormalsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _constructorFormalsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _constructorFormalsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Formal>
                                    _constructorFormalsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _constructorFormalsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType)
                                            _constructorFormalsType),
                                    _constructorFormalsConsumerInner2Key,
                                    _constructorFormalsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _constructorFormalsConsumer =
                        (builder, supplier) -> {
                            builder.putAllConstructorFormals(
                                    _constructorFormalsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.Method > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method>>
                _methodsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _methodsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _methodsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Method>
                                    _methodsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _methodsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _methodsType),
                                    _methodsConsumerInner2Key,
                                    _methodsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _methodsConsumer =
                        (builder, supplier) -> {
                            builder.putAllMethods(_methodsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _isAssertAllConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isAssertAllType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert._AssertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isAssertAllConsumer =
                        (builder, supplier) -> {
                            builder.setIsAssertAll(_isAssertAllConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _annotationsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    java.util.function.BiConsumer<
                                                                                    java.lang
                                                                                            .String,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Key =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    java.util.function.BiConsumer<
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Val =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3,
                                                                            _annotationsSupplierInner4Key,
                                                                            _annotationsSupplierInner4Val);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _annotationsSupplierInner3Key,
                                                        _annotationsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    pInner1,
                                    _annotationsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplier =
                        (p, consumer) -> {
                            _annotationsSupplierInner1.accept(p.getAnnotations(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _containerNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _containerNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _containerNameSupplier =
                        (p, consumer) -> {
                            _containerNameSupplierInner1.accept(p.getContainerName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.MethodsContainerType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MethodsContainerType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _containerTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _containerTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _containerTypeSupplier =
                        (p, consumer) -> {
                            _containerTypeSupplierInner1.accept(p.getContainerType(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.Formal > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Formal>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _constructorFormalsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _constructorFormalsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _constructorFormalsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Formal,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _constructorFormalsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _constructorFormalsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType)
                                            _constructorFormalsType),
                                    pInner1,
                                    _constructorFormalsSupplierInner2Key,
                                    _constructorFormalsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _constructorFormalsSupplier =
                        (p, consumer) -> {
                            _constructorFormalsSupplierInner1.accept(
                                    p.getConstructorFormals(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.Method > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Method>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _methodsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _methodsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _methodsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Method,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _methodsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _methodsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _methodsType),
                                    pInner1,
                                    _methodsSupplierInner2Key,
                                    _methodsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _methodsSupplier =
                        (p, consumer) -> {
                            _methodsSupplierInner1.accept(p.getMethods(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _isAssertAllSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isAssertAllType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Assert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isAssertAllSupplier =
                        (p, consumer) -> {
                            _isAssertAllSupplierInner1.accept(p.getIsAssertAll(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Assert, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta annotationsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_annotationsSupplier),
                        java.util.Optional.of(_annotationsConsumer),
                        java.util.Optional.of(_annotationsSupplierInner1),
                        java.util.Optional.of(_annotationsConsumerInner1),
                        _annotationsType,
                        FIELD_ANNOTATIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta containerNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_containerNameSupplier),
                        java.util.Optional.of(_containerNameConsumer),
                        java.util.Optional.of(_containerNameSupplierInner1),
                        java.util.Optional.of(_containerNameConsumerInner1),
                        _containerNameType,
                        FIELD_CONTAINERNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta containerTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_containerTypeSupplier),
                        java.util.Optional.of(_containerTypeConsumer),
                        java.util.Optional.of(_containerTypeSupplierInner1),
                        java.util.Optional.of(_containerTypeConsumerInner1),
                        _containerTypeType,
                        FIELD_CONTAINERTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta constructorFormalsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_constructorFormalsSupplier),
                        java.util.Optional.of(_constructorFormalsConsumer),
                        java.util.Optional.of(_constructorFormalsSupplierInner1),
                        java.util.Optional.of(_constructorFormalsConsumerInner1),
                        _constructorFormalsType,
                        FIELD_CONSTRUCTORFORMALS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta methodsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_methodsSupplier),
                        java.util.Optional.of(_methodsConsumer),
                        java.util.Optional.of(_methodsSupplierInner1),
                        java.util.Optional.of(_methodsConsumerInner1),
                        _methodsType,
                        FIELD_METHODS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isAssertAllMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isAssertAllSupplier),
                        java.util.Optional.of(_isAssertAllConsumer),
                        java.util.Optional.of(_isAssertAllSupplierInner1),
                        java.util.Optional.of(_isAssertAllConsumerInner1),
                        _isAssertAllType,
                        FIELD_ISASSERTALL,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public AssertBuilder builder() {
            return new schemarise.alfa.runtime.model.Assert._AssertBuilderImpl();
        }

        @Override
        public AssertBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Assert._AssertBuilderImpl(cc);
        }

        public AssertDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Assert>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_ANNOTATIONS, annotationsMeta);
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_CONTAINERNAME, containerNameMeta);
                                        put(FIELD_CONTAINERTYPE, containerTypeMeta);
                                        put(FIELD_CONSTRUCTORFORMALS, constructorFormalsMeta);
                                        put(FIELD_METHODS, methodsMeta);
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_ISASSERTALL, isAssertAllMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Assert>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_ANNOTATIONS:
                    return FIELD_ANNOTATIONS;
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_CONTAINERNAME:
                    return FIELD_CONTAINERNAME;
                case FIELD_ID_CONTAINERTYPE:
                    return FIELD_CONTAINERTYPE;
                case FIELD_ID_CONSTRUCTORFORMALS:
                    return FIELD_CONSTRUCTORFORMALS;
                case FIELD_ID_METHODS:
                    return FIELD_METHODS;
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_ISASSERTALL:
                    return FIELD_ISASSERTALL;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Assert{Annotations:optional<map<string,string>;>;ConstructorFormals:map<string,string>={  };ContainerName:schemarise.alfa.runtime.model.UdtVersionedName[dd07c725];ContainerType:schemarise.alfa.runtime.model.MethodsContainerType[afb8e1f9];Doc:optional<string;>;ExtendedAttribs:optional<map<string,string>;>;IsAssertAll:boolean=false;Methods:map<string,string>={  };Name:string;}
            schemarise.alfa.runtime.model.Assert{ContainerName:schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb];ContainerType:schemarise.alfa.runtime.model.MethodsContainerType[afb8e1f9];Name:string;}
            */
            return "cbba5d77:49c8772c";
        }
    }
    // </editor-fold>

}
