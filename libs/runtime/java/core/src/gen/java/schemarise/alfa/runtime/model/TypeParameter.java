// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TypeParameter extends com.schemarise.alfa.runtime.Record {

    java.lang.String getName();

    java.util.Optional<schemarise.alfa.runtime.model.IDataType> getDerivedFrom();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TypeParameterBuilder builder() {
        return new schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl();
    }

    public static TypeParameterBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TypeParameterBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TypeParameterBuilder setName(java.lang.String v);

        java.lang.String getName();

        TypeParameterBuilder setDerivedFrom(
                java.util.Optional<schemarise.alfa.runtime.model.IDataType> v);

        TypeParameterBuilder setDerivedFrom(schemarise.alfa.runtime.model.IDataType v);

        java.util.Optional<schemarise.alfa.runtime.model.IDataType> getDerivedFrom();

        TypeParameter build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TypeParameterBuilderImpl extends _TypeParameter__Base__
            implements TypeParameterBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TypeParameterBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TypeParameterBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
            setDerivedFrom(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor.INSTANCE;
        }

        public TypeParameterBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor
                            .FIELD_ID_NAME);
            return this;
        }

        public TypeParameterBuilder setDerivedFrom(
                java.util.Optional<schemarise.alfa.runtime.model.IDataType> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DerivedFrom", v);
            this._derivedFrom = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor
                            .FIELD_ID_DERIVEDFROM);
            return this;
        }

        public TypeParameterBuilder setDerivedFrom(schemarise.alfa.runtime.model.IDataType v) {
            this._derivedFrom = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor
                            .FIELD_ID_DERIVEDFROM);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Name":
                    setName((java.lang.String) val);
                    break;
                case "DerivedFrom":
                    setDerivedFrom(
                            (java.util.Optional<schemarise.alfa.runtime.model.IDataType>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TypeParameter build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor.INSTANCE);

            TypeParameter obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TypeParameter)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _name, _derivedFrom);
            else
                obj =
                        new schemarise.alfa.runtime.model.TypeParameter._TypeParameterConcrete(
                                _name, _derivedFrom);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeParameter",
                    new java.lang.String[] {"Name", "DerivedFrom"},
                    new java.lang.Object[] {_name, _derivedFrom});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TypeParameterConcrete extends _TypeParameter__Base__ implements TypeParameter {

        private _TypeParameterConcrete() {
            super();
        }

        private _TypeParameterConcrete(
                java.lang.String _name,
                java.util.Optional<schemarise.alfa.runtime.model.IDataType> _derivedFrom) {
            super(_name, _derivedFrom);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TypeParameter__Base__ {
        public java.lang.String _name;
        public java.util.Optional<schemarise.alfa.runtime.model.IDataType> _derivedFrom;

        public _TypeParameter__Base__() {}

        public _TypeParameter__Base__(
                java.lang.String _name,
                java.util.Optional<schemarise.alfa.runtime.model.IDataType> _derivedFrom) {
            this._name = _name;
            this._derivedFrom = _derivedFrom;
        }

        public java.lang.String getName() {
            return _name;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.IDataType> getDerivedFrom() {
            return _derivedFrom;
        }

        public int hashCode() {
            return java.util.Objects.hash(_name, _derivedFrom);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeParameter",
                    new java.lang.String[] {"Name", "DerivedFrom"},
                    new java.lang.Object[] {_name, _derivedFrom});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.TypeParameter._TypeParameterConcrete))
                return false;
            schemarise.alfa.runtime.model.TypeParameter._TypeParameterConcrete rhs =
                    (schemarise.alfa.runtime.model.TypeParameter._TypeParameterConcrete) o;
            return java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_derivedFrom, rhs._derivedFrom);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Name":
                    return _name;
                case "DerivedFrom":
                    return _derivedFrom;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getDerivedFrom().isPresent()) {
                getDerivedFrom().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TypeParameterDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TypeParameter";
        public static schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.TypeParameter.TypeParameterDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAME = 0;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_DERIVEDFROM = 1;
        public static final String FIELD_DERIVEDFROM = "DerivedFrom";

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _derivedFromType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IDataType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.IDataType>>
                _derivedFromConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IDataType>
                                    _derivedFromConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _derivedFromType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _derivedFromType),
                                    _derivedFromConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _derivedFromConsumer =
                        (builder, supplier) -> {
                            builder.setDerivedFrom(_derivedFromConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeParameter,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.IDataType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _derivedFromSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IDataType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _derivedFromSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _derivedFromType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _derivedFromType),
                                    pInner1,
                                    _derivedFromSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeParameter,
                        com.schemarise.alfa.runtime.DataConsumer>
                _derivedFromSupplier =
                        (p, consumer) -> {
                            _derivedFromSupplierInner1.accept(p.getDerivedFrom(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TypeParameter, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta derivedFromMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_derivedFromSupplier),
                        java.util.Optional.of(_derivedFromConsumer),
                        java.util.Optional.of(_derivedFromSupplierInner1),
                        java.util.Optional.of(_derivedFromConsumerInner1),
                        _derivedFromType,
                        FIELD_DERIVEDFROM,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TypeParameterBuilder builder() {
            return new schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl();
        }

        @Override
        public TypeParameterBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TypeParameter._TypeParameterBuilderImpl(cc);
        }

        public TypeParameterDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeParameter>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_DERIVEDFROM, derivedFromMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeParameter>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_DERIVEDFROM:
                    return FIELD_DERIVEDFROM;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TypeParameter{DerivedFrom:optional<schemarise.alfa.runtime.model.IDataType[4404d6a0];>;Name:string;}
            schemarise.alfa.runtime.model.TypeParameter{Name:string;}
            */
            return "da83cb12:a3010fb1";
        }
    }
    // </editor-fold>

}
