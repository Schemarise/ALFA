// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface NamespaceSummary
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IDocumentation {

    java.util.Optional<java.lang.String> getDoc();

    java.lang.String getQualifiedName();

    java.util.List<schemarise.alfa.runtime.model.UdtSummary> getUdts();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static NamespaceSummaryBuilder builder() {
        return new schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl();
    }

    public static NamespaceSummaryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.NamespaceSummary
                                    .NamespaceSummaryDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl(
                    bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface NamespaceSummaryBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDocumentation.IDocumentationBuilder {
        NamespaceSummaryBuilder setDoc(java.util.Optional<java.lang.String> v);

        NamespaceSummaryBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        NamespaceSummaryBuilder setQualifiedName(java.lang.String v);

        java.lang.String getQualifiedName();

        NamespaceSummaryBuilder addUdts(schemarise.alfa.runtime.model.UdtSummary e);

        NamespaceSummaryBuilder addAllUdts(
                java.util.List<schemarise.alfa.runtime.model.UdtSummary> all);

        java.util.List<schemarise.alfa.runtime.model.UdtSummary> getUdts();

        NamespaceSummary build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _NamespaceSummaryBuilderImpl extends _NamespaceSummary__Base__
            implements NamespaceSummaryBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _NamespaceSummaryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _NamespaceSummaryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setDoc(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                    .INSTANCE;
        }

        public NamespaceSummaryBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public NamespaceSummaryBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public NamespaceSummaryBuilder setQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("QualifiedName", v);
            this._qualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_QUALIFIEDNAME);
            return this;
        }

        private void createUdts() {
            this._udts = new java.util.ArrayList<>();
        }

        public NamespaceSummaryBuilder addUdts(schemarise.alfa.runtime.model.UdtSummary e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Udts", e);
            if (this._udts == null) createUdts();
            this._udts.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_UDTS);
            return this;
        }

        public NamespaceSummaryBuilder setUdts(
                int index, schemarise.alfa.runtime.model.UdtSummary e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Udts", e);
            if (this._udts == null) createUdts();
            this._udts.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_UDTS);
            return this;
        }

        public NamespaceSummaryBuilder addAllUdts(
                java.util.List<schemarise.alfa.runtime.model.UdtSummary> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Udts", all);
            if (this._udts == null) createUdts();
            this._udts.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_UDTS);
            return this;
        }

        private NamespaceSummaryBuilder setUdts(
                java.util.List<schemarise.alfa.runtime.model.UdtSummary> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Udts", all);
            this._udts = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .FIELD_ID_UDTS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "QualifiedName":
                    setQualifiedName((java.lang.String) val);
                    break;
                case "Udts":
                    setUdts((java.util.List<schemarise.alfa.runtime.model.UdtSummary>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public NamespaceSummary build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                            .INSTANCE);

            NamespaceSummary obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (NamespaceSummary)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _doc,
                                                _qualifiedName,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .NamespaceSummary
                                                                        .NamespaceSummaryDescriptor
                                                                        .INSTANCE
                                                                        ._udtsSupplierInner1,
                                                                _udts));
            else
                obj =
                        new schemarise.alfa.runtime.model.NamespaceSummary
                                ._NamespaceSummaryConcrete(
                                _doc,
                                _qualifiedName,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.NamespaceSummary
                                                .NamespaceSummaryDescriptor.INSTANCE
                                                ._udtsSupplierInner1,
                                        _udts));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.NamespaceSummary",
                    new java.lang.String[] {"Doc", "QualifiedName", "Udts"},
                    new java.lang.Object[] {_doc, _qualifiedName, _udts});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _NamespaceSummaryConcrete extends _NamespaceSummary__Base__
            implements NamespaceSummary {

        private _NamespaceSummaryConcrete() {
            super();
        }

        private _NamespaceSummaryConcrete(
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _qualifiedName,
                java.util.List<schemarise.alfa.runtime.model.UdtSummary> _udts) {
            super(_doc, _qualifiedName, _udts);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _NamespaceSummary__Base__ {
        public java.util.Optional<java.lang.String> _doc;
        public java.lang.String _qualifiedName;
        public java.util.List<schemarise.alfa.runtime.model.UdtSummary> _udts;

        public _NamespaceSummary__Base__() {}

        public _NamespaceSummary__Base__(
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _qualifiedName,
                java.util.List<schemarise.alfa.runtime.model.UdtSummary> _udts) {
            this._doc = _doc;
            this._qualifiedName = _qualifiedName;
            this._udts = _udts;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public java.lang.String getQualifiedName() {
            return _qualifiedName;
        }

        public java.util.List<schemarise.alfa.runtime.model.UdtSummary> getUdts() {
            return _udts;
        }

        public int hashCode() {
            return java.util.Objects.hash(_doc, _qualifiedName, _udts);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.NamespaceSummary",
                    new java.lang.String[] {"Doc", "QualifiedName", "Udts"},
                    new java.lang.Object[] {_doc, _qualifiedName, _udts});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryConcrete))
                return false;
            schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryConcrete rhs =
                    (schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryConcrete) o;
            return java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_qualifiedName, rhs._qualifiedName)
                    && java.util.Objects.equals(_udts, rhs._udts);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Doc":
                    return _doc;
                case "QualifiedName":
                    return _qualifiedName;
                case "Udts":
                    return _udts;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            java.util.stream.IntStream.range(0, getUdts().size())
                    .forEach(
                            e0 -> {
                                getUdts().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class NamespaceSummaryDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.NamespaceSummary";
        public static schemarise.alfa.runtime.model.NamespaceSummary.NamespaceSummaryDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.NamespaceSummary
                                .NamespaceSummaryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DOC = 0;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_QUALIFIEDNAME = 1;
        public static final String FIELD_QUALIFIEDNAME = "QualifiedName";

        public static final short FIELD_ID_UDTS = 2;
        public static final String FIELD_UDTS = "Udts";

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _qualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _udtsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtSummary")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _qualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _qualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _qualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setQualifiedName(_qualifiedNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtSummary > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.UdtSummary>>
                _udtsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtSummary>
                                    _udtsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _udtsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _udtsType),
                                    _udtsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtsConsumer =
                        (builder, supplier) -> {
                            builder.addAllUdts(_udtsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _qualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _qualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _qualifiedNameSupplier =
                        (p, consumer) -> {
                            _qualifiedNameSupplierInner1.accept(p.getQualifiedName(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtSummary > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.UdtSummary>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtSummary,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _udtsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _udtsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _udtsType),
                                    pInner1,
                                    _udtsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.NamespaceSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtsSupplier =
                        (p, consumer) -> {
                            _udtsSupplierInner1.accept(p.getUdts(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                NamespaceSummary, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta qualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_qualifiedNameSupplier),
                        java.util.Optional.of(_qualifiedNameConsumer),
                        java.util.Optional.of(_qualifiedNameSupplierInner1),
                        java.util.Optional.of(_qualifiedNameConsumerInner1),
                        _qualifiedNameType,
                        FIELD_QUALIFIEDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtsSupplier),
                        java.util.Optional.of(_udtsConsumer),
                        java.util.Optional.of(_udtsSupplierInner1),
                        java.util.Optional.of(_udtsConsumerInner1),
                        _udtsType,
                        FIELD_UDTS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public NamespaceSummaryBuilder builder() {
            return new schemarise.alfa.runtime.model.NamespaceSummary
                    ._NamespaceSummaryBuilderImpl();
        }

        @Override
        public NamespaceSummaryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.NamespaceSummary._NamespaceSummaryBuilderImpl(
                    cc);
        }

        public NamespaceSummaryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<NamespaceSummary>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_QUALIFIEDNAME, qualifiedNameMeta);
                                        put(FIELD_UDTS, udtsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<NamespaceSummary>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_QUALIFIEDNAME:
                    return FIELD_QUALIFIEDNAME;
                case FIELD_ID_UDTS:
                    return FIELD_UDTS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.NamespaceSummary{Doc:optional<string;>;QualifiedName:string;Udts:list<schemarise.alfa.runtime.model.UdtSummary[558f92b3]>;}
            schemarise.alfa.runtime.model.NamespaceSummary{QualifiedName:string;Udts:list<schemarise.alfa.runtime.model.UdtSummary[6b2dd34c]>;}
            */
            return "15bbc738:a45920d6";
        }
    }
    // </editor-fold>

}
