// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Method
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.ExtendedAttribs {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    schemarise.alfa.runtime.model.MethodSignature getSignature();

    java.util.List<schemarise.alfa.runtime.model.Statement> getStatements();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static MethodBuilder builder() {
        return new schemarise.alfa.runtime.model.Method._MethodBuilderImpl();
    }

    public static MethodBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Method.MethodDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Method._MethodBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface MethodBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.ExtendedAttribs.ExtendedAttribsBuilder {
        MethodBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        MethodBuilder setExtendedAttribs(java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        MethodBuilder setSignature(schemarise.alfa.runtime.model.MethodSignature v);

        schemarise.alfa.runtime.model.MethodSignature getSignature();

        MethodBuilder addStatements(schemarise.alfa.runtime.model.Statement e);

        MethodBuilder addAllStatements(java.util.List<schemarise.alfa.runtime.model.Statement> all);

        java.util.List<schemarise.alfa.runtime.model.Statement> getStatements();

        Method build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _MethodBuilderImpl extends _Method__Base__ implements MethodBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _MethodBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _MethodBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setExtendedAttribs(java.util.Optional.empty());
            setStatements(new java.util.ArrayList<schemarise.alfa.runtime.model.Statement>());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Method.MethodDescriptor.INSTANCE;
        }

        public MethodBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public MethodBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public MethodBuilder setSignature(schemarise.alfa.runtime.model.MethodSignature v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Signature", v);
            this._signature = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_SIGNATURE);
            return this;
        }

        private void createStatements() {
            this._statements = new java.util.ArrayList<>();
        }

        public MethodBuilder addStatements(schemarise.alfa.runtime.model.Statement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Statements", e);
            if (this._statements == null) createStatements();
            this._statements.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_STATEMENTS);
            return this;
        }

        public MethodBuilder setStatements(int index, schemarise.alfa.runtime.model.Statement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Statements", e);
            if (this._statements == null) createStatements();
            this._statements.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_STATEMENTS);
            return this;
        }

        public MethodBuilder addAllStatements(
                java.util.List<schemarise.alfa.runtime.model.Statement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Statements", all);
            if (this._statements == null) createStatements();
            this._statements.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_STATEMENTS);
            return this;
        }

        private MethodBuilder setStatements(
                java.util.List<schemarise.alfa.runtime.model.Statement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Statements", all);
            this._statements = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.FIELD_ID_STATEMENTS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "Signature":
                    setSignature((schemarise.alfa.runtime.model.MethodSignature) val);
                    break;
                case "Statements":
                    setStatements((java.util.List<schemarise.alfa.runtime.model.Statement>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Method build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.Method.MethodDescriptor.INSTANCE);

            Method obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Method)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _signature,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model.Method
                                                                        .MethodDescriptor.INSTANCE
                                                                        ._statementsSupplierInner1,
                                                                _statements));
            else
                obj =
                        new schemarise.alfa.runtime.model.Method._MethodConcrete(
                                _extendedAttribs,
                                _signature,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Method.MethodDescriptor
                                                .INSTANCE
                                                ._statementsSupplierInner1,
                                        _statements));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Method",
                    new java.lang.String[] {"ExtendedAttribs", "Signature", "Statements"},
                    new java.lang.Object[] {_extendedAttribs, _signature, _statements});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _MethodConcrete extends _Method__Base__ implements Method {

        private _MethodConcrete() {
            super();
        }

        private _MethodConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                schemarise.alfa.runtime.model.MethodSignature _signature,
                java.util.List<schemarise.alfa.runtime.model.Statement> _statements) {
            super(_extendedAttribs, _signature, _statements);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Method__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public schemarise.alfa.runtime.model.MethodSignature _signature;
        public java.util.List<schemarise.alfa.runtime.model.Statement> _statements;

        public _Method__Base__() {}

        public _Method__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                schemarise.alfa.runtime.model.MethodSignature _signature,
                java.util.List<schemarise.alfa.runtime.model.Statement> _statements) {
            this._extendedAttribs = _extendedAttribs;
            this._signature = _signature;
            this._statements = _statements;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public schemarise.alfa.runtime.model.MethodSignature getSignature() {
            return _signature;
        }

        public java.util.List<schemarise.alfa.runtime.model.Statement> getStatements() {
            return _statements;
        }

        public int hashCode() {
            return java.util.Objects.hash(_extendedAttribs, _signature, _statements);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Method",
                    new java.lang.String[] {"ExtendedAttribs", "Signature", "Statements"},
                    new java.lang.Object[] {_extendedAttribs, _signature, _statements});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Method._MethodConcrete)) return false;
            schemarise.alfa.runtime.model.Method._MethodConcrete rhs =
                    (schemarise.alfa.runtime.model.Method._MethodConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_signature, rhs._signature)
                    && java.util.Objects.equals(_statements, rhs._statements);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Method.MethodDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "Signature":
                    return _signature;
                case "Statements":
                    return _statements;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getSignature().validate(__builderConfig);
            java.util.stream.IntStream.range(0, getStatements().size())
                    .forEach(
                            e0 -> {
                                getStatements().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class MethodDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Method";
        public static schemarise.alfa.runtime.model.Method.MethodDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Method.MethodDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_SIGNATURE = 1;
        public static final String FIELD_SIGNATURE = "Signature";

        public static final short FIELD_ID_STATEMENTS = 2;
        public static final String FIELD_STATEMENTS = "Statements";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _signatureType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.MethodSignature")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _statementsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Statement")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method._MethodBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.MethodSignature -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.MethodSignature>
                _signatureConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _signatureType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method._MethodBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _signatureConsumer =
                        (builder, supplier) -> {
                            builder.setSignature(_signatureConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.Statement > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.Statement>>
                _statementsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Statement>
                                    _statementsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _statementsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _statementsType),
                                    _statementsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method._MethodBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _statementsConsumer =
                        (builder, supplier) -> {
                            builder.addAllStatements(_statementsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.MethodSignature -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MethodSignature,
                        com.schemarise.alfa.runtime.DataConsumer>
                _signatureSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _signatureType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method,
                        com.schemarise.alfa.runtime.DataConsumer>
                _signatureSupplier =
                        (p, consumer) -> {
                            _signatureSupplierInner1.accept(p.getSignature(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.Statement > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.Statement>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _statementsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Statement,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _statementsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _statementsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _statementsType),
                                    pInner1,
                                    _statementsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Method,
                        com.schemarise.alfa.runtime.DataConsumer>
                _statementsSupplier =
                        (p, consumer) -> {
                            _statementsSupplierInner1.accept(p.getStatements(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Method, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta signatureMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_signatureSupplier),
                        java.util.Optional.of(_signatureConsumer),
                        java.util.Optional.of(_signatureSupplierInner1),
                        java.util.Optional.of(_signatureConsumerInner1),
                        _signatureType,
                        FIELD_SIGNATURE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta statementsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_statementsSupplier),
                        java.util.Optional.of(_statementsConsumer),
                        java.util.Optional.of(_statementsSupplierInner1),
                        java.util.Optional.of(_statementsConsumerInner1),
                        _statementsType,
                        FIELD_STATEMENTS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public MethodBuilder builder() {
            return new schemarise.alfa.runtime.model.Method._MethodBuilderImpl();
        }

        @Override
        public MethodBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Method._MethodBuilderImpl(cc);
        }

        public MethodDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Method>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_SIGNATURE, signatureMeta);
                                        put(FIELD_STATEMENTS, statementsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Method>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_SIGNATURE:
                    return FIELD_SIGNATURE;
                case FIELD_ID_STATEMENTS:
                    return FIELD_STATEMENTS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Method{ExtendedAttribs:optional<map<string,string>;>;Signature:schemarise.alfa.runtime.model.MethodSignature[4c19238b];Statements:list<schemarise.alfa.runtime.model.Statement[d43aa7d0]>=( list< schemarise.alfa.runtime.model.Statement > ) [];}
            schemarise.alfa.runtime.model.Method{Signature:schemarise.alfa.runtime.model.MethodSignature[8c393fd7];}
            */
            return "a778b774:59e8e646";
        }
    }
    // </editor-fold>

}
