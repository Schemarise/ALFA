// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TypeDefInfo extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.TypeDefDataType getDef();

    java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> getUdtUsages();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TypeDefInfoBuilder builder() {
        return new schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl();
    }

    public static TypeDefInfoBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TypeDefInfoBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TypeDefInfoBuilder setDef(schemarise.alfa.runtime.model.TypeDefDataType v);

        schemarise.alfa.runtime.model.TypeDefDataType getDef();

        TypeDefInfoBuilder addUdtUsages(schemarise.alfa.runtime.model.UdtVersionedName e);

        TypeDefInfoBuilder addAllUdtUsages(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all);

        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> getUdtUsages();

        TypeDefInfo build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TypeDefInfoBuilderImpl extends _TypeDefInfo__Base__ implements TypeDefInfoBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TypeDefInfoBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TypeDefInfoBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor.INSTANCE;
        }

        public TypeDefInfoBuilder setDef(schemarise.alfa.runtime.model.TypeDefDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Def", v);
            this._def = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor.FIELD_ID_DEF);
            return this;
        }

        private void createUdtUsages() {
            this._udtUsages = new java.util.LinkedHashSet<>();
        }

        public TypeDefInfoBuilder addUdtUsages(schemarise.alfa.runtime.model.UdtVersionedName e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtUsages", e);
            if (this._udtUsages == null) createUdtUsages();
            this._udtUsages.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        public TypeDefInfoBuilder addAllUdtUsages(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtUsages", all);
            if (this._udtUsages == null) createUdtUsages();
            this._udtUsages.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        private TypeDefInfoBuilder setUdtUsages(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtUsages", all);
            this._udtUsages = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "def":
                    setDef((schemarise.alfa.runtime.model.TypeDefDataType) val);
                    break;
                case "udtUsages":
                    setUdtUsages(
                            (java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TypeDefInfo build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor.INSTANCE);

            TypeDefInfo obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TypeDefInfo)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _def,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .TypeDefInfo
                                                                        .TypeDefInfoDescriptor
                                                                        .INSTANCE
                                                                        ._udtUsagesSupplierInner1,
                                                                _udtUsages));
            else
                obj =
                        new schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoConcrete(
                                _def,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.TypeDefInfo
                                                .TypeDefInfoDescriptor.INSTANCE
                                                ._udtUsagesSupplierInner1,
                                        _udtUsages));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeDefInfo",
                    new java.lang.String[] {"def", "udtUsages"},
                    new java.lang.Object[] {_def, _udtUsages});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TypeDefInfoConcrete extends _TypeDefInfo__Base__ implements TypeDefInfo {

        private _TypeDefInfoConcrete() {
            super();
        }

        private _TypeDefInfoConcrete(
                schemarise.alfa.runtime.model.TypeDefDataType _def,
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _udtUsages) {
            super(_def, _udtUsages);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TypeDefInfo__Base__ {
        public schemarise.alfa.runtime.model.TypeDefDataType _def;
        public java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _udtUsages;

        public _TypeDefInfo__Base__() {}

        public _TypeDefInfo__Base__(
                schemarise.alfa.runtime.model.TypeDefDataType _def,
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _udtUsages) {
            this._def = _def;
            this._udtUsages = _udtUsages;
        }

        public schemarise.alfa.runtime.model.TypeDefDataType getDef() {
            return _def;
        }

        public java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> getUdtUsages() {
            return _udtUsages;
        }

        public int hashCode() {
            return java.util.Objects.hash(_def, _udtUsages);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TypeDefInfo",
                    new java.lang.String[] {"def", "udtUsages"},
                    new java.lang.Object[] {_def, _udtUsages});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoConcrete))
                return false;
            schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoConcrete rhs =
                    (schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoConcrete) o;
            return java.util.Objects.equals(_def, rhs._def)
                    && java.util.Objects.equals(_udtUsages, rhs._udtUsages);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "def":
                    return _def;
                case "udtUsages":
                    return _udtUsages;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getDef().validate(__builderConfig);
            getUdtUsages()
                    .forEach(
                            e0 -> {
                                e0.validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TypeDefInfoDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TypeDefInfo";
        public static schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.TypeDefInfo.TypeDefInfoDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DEF = 0;
        public static final String FIELD_DEF = "def";

        public static final short FIELD_ID_UDTUSAGES = 1;
        public static final String FIELD_UDTUSAGES = "udtUsages";

        private schemarise.alfa.runtime.model.UdtDataType _defType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.TypeDefDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _udtUsagesType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.TypeDefDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.TypeDefDataType>
                _defConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _defConsumer =
                        (builder, supplier) -> {
                            builder.setDef(_defConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< schemarise.alfa.runtime.model.UdtVersionedName > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>>
                _udtUsagesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtVersionedName>
                                    _udtUsagesConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _udtUsagesType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _udtUsagesType),
                                    _udtUsagesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtUsagesConsumer =
                        (builder, supplier) -> {
                            builder.addAllUdtUsages(_udtUsagesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.TypeDefDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefInfo,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplier =
                        (p, consumer) -> {
                            _defSupplierInner1.accept(p.getDef(), consumer);
                        };
        /* -- Supplier set< schemarise.alfa.runtime.model.UdtVersionedName > -- */
        java.util.function.BiConsumer<
                        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtUsagesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtVersionedName,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _udtUsagesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _udtUsagesType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _udtUsagesType),
                                    pInner1,
                                    _udtUsagesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TypeDefInfo,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtUsagesSupplier =
                        (p, consumer) -> {
                            _udtUsagesSupplierInner1.accept(p.getUdtUsages(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TypeDefInfo, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta defMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_defSupplier),
                        java.util.Optional.of(_defConsumer),
                        java.util.Optional.of(_defSupplierInner1),
                        java.util.Optional.of(_defConsumerInner1),
                        _defType,
                        FIELD_DEF,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtUsagesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtUsagesSupplier),
                        java.util.Optional.of(_udtUsagesConsumer),
                        java.util.Optional.of(_udtUsagesSupplierInner1),
                        java.util.Optional.of(_udtUsagesConsumerInner1),
                        _udtUsagesType,
                        FIELD_UDTUSAGES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TypeDefInfoBuilder builder() {
            return new schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl();
        }

        @Override
        public TypeDefInfoBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TypeDefInfo._TypeDefInfoBuilderImpl(cc);
        }

        public TypeDefInfoDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeDefInfo>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DEF, defMeta);
                                        put(FIELD_UDTUSAGES, udtUsagesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TypeDefInfo>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DEF:
                    return FIELD_DEF;
                case FIELD_ID_UDTUSAGES:
                    return FIELD_UDTUSAGES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TypeDefInfo{def:schemarise.alfa.runtime.model.TypeDefDataType[e3ccde98];udtUsages:set<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725]>;}
            schemarise.alfa.runtime.model.TypeDefInfo{def:schemarise.alfa.runtime.model.TypeDefDataType[b7c0f063];udtUsages:set<schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb]>;}
            */
            return "e6bd4a46:cbebd0d8";
        }
    }
    // </editor-fold>

}
