// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__ObjectExpr extends com.schemarise.alfa.runtime.Record {

    java.lang.String getUdtName();

    java.util.Optional<schemarise.alfa.runtime.model.IExpression> getKeyObject();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression> getFieldValues();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__ObjectExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__ObjectExpr
                ._Expression__ObjectExprBuilderImpl();
    }

    public static Expression__ObjectExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__ObjectExpr
                                    .Expression__ObjectExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__ObjectExpr
                    ._Expression__ObjectExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__ObjectExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__ObjectExprBuilder setUdtName(java.lang.String v);

        java.lang.String getUdtName();

        Expression__ObjectExprBuilder setKeyObject(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v);

        Expression__ObjectExprBuilder setKeyObject(schemarise.alfa.runtime.model.IExpression v);

        java.util.Optional<schemarise.alfa.runtime.model.IExpression> getKeyObject();

        Expression__ObjectExprBuilder putFieldValues(
                java.lang.String k, schemarise.alfa.runtime.model.IExpression v);

        Expression__ObjectExprBuilder putAllFieldValues(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression> getFieldValues();

        Expression__ObjectExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__ObjectExprBuilderImpl extends _Expression__ObjectExpr__Base__
            implements Expression__ObjectExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__ObjectExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__ObjectExprBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setKeyObject(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__ObjectExpr
                    .Expression__ObjectExprDescriptor.INSTANCE;
        }

        public Expression__ObjectExprBuilder setUdtName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtName", v);
            this._udtName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_UDTNAME);
            return this;
        }

        public Expression__ObjectExprBuilder setKeyObject(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyObject", v);
            this._keyObject = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_KEYOBJECT);
            return this;
        }

        public Expression__ObjectExprBuilder setKeyObject(
                schemarise.alfa.runtime.model.IExpression v) {
            this._keyObject = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_KEYOBJECT);
            return this;
        }

        private void createFieldValues() {
            this._fieldValues = new java.util.LinkedHashMap<>();
        }

        public Expression__ObjectExprBuilder putFieldValues(
                java.lang.String k, schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key FieldValues", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value FieldValues", v);
            if (this._fieldValues == null) createFieldValues();
            this._fieldValues.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_FIELDVALUES);
            return this;
        }

        public Expression__ObjectExprBuilder putAllFieldValues(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FieldValues", all);
            if (this._fieldValues == null) createFieldValues();
            this._fieldValues.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_FIELDVALUES);
            return this;
        }

        private Expression__ObjectExprBuilder setFieldValues(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FieldValues", all);
            _fieldValues = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.FIELD_ID_FIELDVALUES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "udtName":
                    setUdtName((java.lang.String) val);
                    break;
                case "keyObject":
                    setKeyObject(
                            (java.util.Optional<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                case "fieldValues":
                    setFieldValues(
                            (java.util.Map<
                                            java.lang.String,
                                            schemarise.alfa.runtime.model.IExpression>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__ObjectExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            .Expression__ObjectExprDescriptor.INSTANCE);

            Expression__ObjectExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__ObjectExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _udtName,
                                                _keyObject,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Expression__ObjectExpr
                                                                        .Expression__ObjectExprDescriptor
                                                                        .INSTANCE
                                                                        ._fieldValuesSupplierInner1,
                                                                _fieldValues));
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__ObjectExpr
                                ._Expression__ObjectExprConcrete(
                                _udtName,
                                _keyObject,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Expression__ObjectExpr
                                                .Expression__ObjectExprDescriptor.INSTANCE
                                                ._fieldValuesSupplierInner1,
                                        _fieldValues));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__ObjectExpr",
                    new java.lang.String[] {"udtName", "keyObject", "fieldValues"},
                    new java.lang.Object[] {_udtName, _keyObject, _fieldValues});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__ObjectExprConcrete extends _Expression__ObjectExpr__Base__
            implements Expression__ObjectExpr {

        private _Expression__ObjectExprConcrete() {
            super();
        }

        private _Expression__ObjectExprConcrete(
                java.lang.String _udtName,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _keyObject,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>
                        _fieldValues) {
            super(_udtName, _keyObject, _fieldValues);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__ObjectExpr__Base__ {
        public java.lang.String _udtName;
        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> _keyObject;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>
                _fieldValues;

        public _Expression__ObjectExpr__Base__() {}

        public _Expression__ObjectExpr__Base__(
                java.lang.String _udtName,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _keyObject,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>
                        _fieldValues) {
            this._udtName = _udtName;
            this._keyObject = _keyObject;
            this._fieldValues = _fieldValues;
        }

        public java.lang.String getUdtName() {
            return _udtName;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> getKeyObject() {
            return _keyObject;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>
                getFieldValues() {
            return _fieldValues;
        }

        public int hashCode() {
            return java.util.Objects.hash(_udtName, _keyObject, _fieldValues);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__ObjectExpr",
                    new java.lang.String[] {"udtName", "keyObject", "fieldValues"},
                    new java.lang.Object[] {_udtName, _keyObject, _fieldValues});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__ObjectExpr
                            ._Expression__ObjectExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__ObjectExpr._Expression__ObjectExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.Expression__ObjectExpr
                                            ._Expression__ObjectExprConcrete)
                                    o;
            return java.util.Objects.equals(_udtName, rhs._udtName)
                    && java.util.Objects.equals(_keyObject, rhs._keyObject)
                    && java.util.Objects.equals(_fieldValues, rhs._fieldValues);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__ObjectExpr
                    .Expression__ObjectExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "udtName":
                    return _udtName;
                case "keyObject":
                    return _keyObject;
                case "fieldValues":
                    return _fieldValues;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getKeyObject().isPresent()) {
                getKeyObject().get().validate(__builderConfig);
            }
            getFieldValues()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__ObjectExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__ObjectExpr";
        public static schemarise.alfa.runtime.model.Expression__ObjectExpr
                        .Expression__ObjectExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__ObjectExpr
                                .Expression__ObjectExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_UDTNAME = 0;
        public static final String FIELD_UDTNAME = "udtName";

        public static final short FIELD_ID_KEYOBJECT = 1;
        public static final String FIELD_KEYOBJECT = "keyObject";

        public static final short FIELD_ID_FIELDVALUES = 2;
        public static final String FIELD_FIELDVALUES = "fieldValues";

        private schemarise.alfa.runtime.model.ScalarDataType _udtNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _keyObjectType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _fieldValuesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _udtNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _udtNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr
                                ._Expression__ObjectExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtNameConsumer =
                        (builder, supplier) -> {
                            builder.setUdtName(_udtNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>>
                _keyObjectConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _keyObjectConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _keyObjectType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _keyObjectType),
                                    _keyObjectConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr
                                ._Expression__ObjectExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyObjectConsumer =
                        (builder, supplier) -> {
                            builder.setKeyObject(_keyObjectConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>>
                _fieldValuesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _fieldValuesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldValuesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _fieldValuesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldValuesType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldValuesType),
                                    _fieldValuesConsumerInner2Key,
                                    _fieldValuesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr
                                ._Expression__ObjectExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fieldValuesConsumer =
                        (builder, supplier) -> {
                            builder.putAllFieldValues(_fieldValuesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _udtNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplier =
                        (p, consumer) -> {
                            _udtNameSupplierInner1.accept(p.getUdtName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyObjectSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _keyObjectSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _keyObjectType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _keyObjectType),
                                    pInner1,
                                    _keyObjectSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyObjectSupplier =
                        (p, consumer) -> {
                            _keyObjectSupplierInner1.accept(p.getKeyObject(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldValuesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldValuesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldValuesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldValuesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldValuesType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldValuesType),
                                    pInner1,
                                    _fieldValuesSupplierInner2Key,
                                    _fieldValuesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldValuesSupplier =
                        (p, consumer) -> {
                            _fieldValuesSupplierInner1.accept(p.getFieldValues(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__ObjectExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta udtNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtNameSupplier),
                        java.util.Optional.of(_udtNameConsumer),
                        java.util.Optional.of(_udtNameSupplierInner1),
                        java.util.Optional.of(_udtNameConsumerInner1),
                        _udtNameType,
                        FIELD_UDTNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyObjectMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keyObjectSupplier),
                        java.util.Optional.of(_keyObjectConsumer),
                        java.util.Optional.of(_keyObjectSupplierInner1),
                        java.util.Optional.of(_keyObjectConsumerInner1),
                        _keyObjectType,
                        FIELD_KEYOBJECT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldValuesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fieldValuesSupplier),
                        java.util.Optional.of(_fieldValuesConsumer),
                        java.util.Optional.of(_fieldValuesSupplierInner1),
                        java.util.Optional.of(_fieldValuesConsumerInner1),
                        _fieldValuesType,
                        FIELD_FIELDVALUES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__ObjectExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__ObjectExpr
                    ._Expression__ObjectExprBuilderImpl();
        }

        @Override
        public Expression__ObjectExprBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__ObjectExpr
                    ._Expression__ObjectExprBuilderImpl(cc);
        }

        public Expression__ObjectExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__ObjectExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_UDTNAME, udtNameMeta);
                                        put(FIELD_KEYOBJECT, keyObjectMeta);
                                        put(FIELD_FIELDVALUES, fieldValuesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__ObjectExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_UDTNAME:
                    return FIELD_UDTNAME;
                case FIELD_ID_KEYOBJECT:
                    return FIELD_KEYOBJECT;
                case FIELD_ID_FIELDVALUES:
                    return FIELD_FIELDVALUES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__ObjectExpr{fieldValues:map<string,string>;keyObject:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;udtName:string;}
            schemarise.alfa.runtime.model.Expression__ObjectExpr{fieldValues:map<string,string>;udtName:string;}
            */
            return "b301c153:8baeb314";
        }
    }
    // </editor-fold>

}
