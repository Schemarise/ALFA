// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface UdtDataType
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IDataType {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    java.lang.String getFullyQualifiedName();

    schemarise.alfa.runtime.model.UdtMetaType getUdtType();

    java.util.Optional<java.lang.Integer> getVersion();

    java.util.Optional<java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType>>
            getTypeArguments();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl();
    }

    public static UdtDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDataType.IDataTypeBuilder {
        UdtDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        UdtDataTypeBuilder setExtendedAttribs(java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        UdtDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        UdtDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        UdtDataTypeBuilder setFullyQualifiedName(java.lang.String v);

        java.lang.String getFullyQualifiedName();

        UdtDataTypeBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v);

        schemarise.alfa.runtime.model.UdtMetaType getUdtType();

        UdtDataTypeBuilder setVersion(java.util.Optional<java.lang.Integer> v);

        UdtDataTypeBuilder setVersion(int v);

        java.util.Optional<java.lang.Integer> getVersion();

        UdtDataTypeBuilder setTypeArguments(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                        v);

        UdtDataTypeBuilder setTypeArguments(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType> v);

        java.util.Optional<java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                getTypeArguments();

        UdtDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtDataTypeBuilderImpl extends _UdtDataType__Base__ implements UdtDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
            setVersion(java.util.Optional.empty());
            setTypeArguments(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor.INSTANCE;
        }

        public UdtDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public UdtDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public UdtDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public UdtDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public UdtDataTypeBuilder setFullyQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FullyQualifiedName", v);
            this._fullyQualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_FULLYQUALIFIEDNAME);
            return this;
        }

        public UdtDataTypeBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtType", v);
            this._udtType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_UDTTYPE);
            return this;
        }

        public UdtDataTypeBuilder setVersion(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Version", v);
            this._version = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_VERSION);
            return this;
        }

        public UdtDataTypeBuilder setVersion(int v) {
            this._version = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_VERSION);
            return this;
        }

        public UdtDataTypeBuilder setTypeArguments(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeArguments", v);
            this._typeArguments = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_TYPEARGUMENTS);
            return this;
        }

        public UdtDataTypeBuilder setTypeArguments(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType> v) {
            this._typeArguments = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor
                            .FIELD_ID_TYPEARGUMENTS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "FullyQualifiedName":
                    setFullyQualifiedName((java.lang.String) val);
                    break;
                case "UdtType":
                    setUdtType((schemarise.alfa.runtime.model.UdtMetaType) val);
                    break;
                case "Version":
                    setVersion((java.util.Optional<java.lang.Integer>) val);
                    break;
                case "TypeArguments":
                    setTypeArguments(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model.IDataType>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor.INSTANCE);

            UdtDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _typeDefName,
                                                _fullyQualifiedName,
                                                _udtType,
                                                _version,
                                                _typeArguments);
            else
                obj =
                        new schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeConcrete(
                                _extendedAttribs,
                                _typeDefName,
                                _fullyQualifiedName,
                                _udtType,
                                _version,
                                _typeArguments);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "FullyQualifiedName",
                        "UdtType",
                        "Version",
                        "TypeArguments"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _fullyQualifiedName,
                        _udtType,
                        _version,
                        _typeArguments
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtDataTypeConcrete extends _UdtDataType__Base__ implements UdtDataType {

        private _UdtDataTypeConcrete() {
            super();
        }

        private _UdtDataTypeConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Integer> _version,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                        _typeArguments) {
            super(
                    _extendedAttribs,
                    _typeDefName,
                    _fullyQualifiedName,
                    _udtType,
                    _version,
                    _typeArguments);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtDataType__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public java.lang.String _fullyQualifiedName;
        public schemarise.alfa.runtime.model.UdtMetaType _udtType;
        public java.util.Optional<java.lang.Integer> _version;
        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                _typeArguments;

        public _UdtDataType__Base__() {}

        public _UdtDataType__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Integer> _version,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                        _typeArguments) {
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._fullyQualifiedName = _fullyQualifiedName;
            this._udtType = _udtType;
            this._version = _version;
            this._typeArguments = _typeArguments;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public java.lang.String getFullyQualifiedName() {
            return _fullyQualifiedName;
        }

        public schemarise.alfa.runtime.model.UdtMetaType getUdtType() {
            return _udtType;
        }

        public java.util.Optional<java.lang.Integer> getVersion() {
            return _version;
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.IDataType>>
                getTypeArguments() {
            return _typeArguments;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _extendedAttribs,
                    _typeDefName,
                    _fullyQualifiedName,
                    _udtType,
                    _version,
                    _typeArguments);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "FullyQualifiedName",
                        "UdtType",
                        "Version",
                        "TypeArguments"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _fullyQualifiedName,
                        _udtType,
                        _version,
                        _typeArguments
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(_fullyQualifiedName, rhs._fullyQualifiedName)
                    && java.util.Objects.equals(_udtType, rhs._udtType)
                    && java.util.Objects.equals(_version, rhs._version)
                    && java.util.Objects.equals(_typeArguments, rhs._typeArguments);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "FullyQualifiedName":
                    return _fullyQualifiedName;
                case "UdtType":
                    return _udtType;
                case "Version":
                    return _version;
                case "TypeArguments":
                    return _typeArguments;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getUdtType().validate(__builderConfig);

            if (getTypeArguments().isPresent()) {
                getTypeArguments()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue().validate(__builderConfig);
                                });
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.UdtDataType";
        public static schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.UdtDataType.UdtDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 1;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_FULLYQUALIFIEDNAME = 2;
        public static final String FIELD_FULLYQUALIFIEDNAME = "FullyQualifiedName";

        public static final short FIELD_ID_UDTTYPE = 3;
        public static final String FIELD_UDTTYPE = "UdtType";

        public static final short FIELD_ID_VERSION = 4;
        public static final String FIELD_VERSION = "Version";

        public static final short FIELD_ID_TYPEARGUMENTS = 5;
        public static final String FIELD_TYPEARGUMENTS = "TypeArguments";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _fullyQualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _udtTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtMetaType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _versionType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeArgumentsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("Param"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.IDataType")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .traitType)
                                                        .build())
                                        .setValueName(java.util.Optional.of("Arg"))
                                        .build())
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _fullyQualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fullyQualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setFullyQualifiedName(
                                    _fullyQualifiedNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtMetaType>
                _udtTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtTypeConsumer =
                        (builder, supplier) -> {
                            builder.setUdtType(_udtTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _versionConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _versionConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    _versionConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _versionConsumer =
                        (builder, supplier) -> {
                            builder.setVersion(_versionConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< Param : string , Arg : schemarise.alfa.runtime.model.IDataType > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>>
                _typeArgumentsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model.IDataType>>
                                    _typeArgumentsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _typeArgumentsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _typeArgumentsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .IDataType>
                                                        _typeArgumentsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _typeArgumentsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeArgumentsType)
                                                                        .getComponentType()),
                                                        _typeArgumentsConsumerInner3Key,
                                                        _typeArgumentsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeArgumentsType),
                                    _typeArgumentsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeArgumentsConsumer =
                        (builder, supplier) -> {
                            builder.setTypeArguments(_typeArgumentsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplier =
                        (p, consumer) -> {
                            _fullyQualifiedNameSupplierInner1.accept(
                                    p.getFullyQualifiedName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtMetaType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplier =
                        (p, consumer) -> {
                            _udtTypeSupplierInner1.accept(p.getUdtType(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _versionSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    pInner1,
                                    _versionSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplier =
                        (p, consumer) -> {
                            _versionSupplierInner1.accept(p.getVersion(), consumer);
                        };
        /* -- Supplier map< Param : string , Arg : schemarise.alfa.runtime.model.IDataType > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String, schemarise.alfa.runtime.model.IDataType>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeArgumentsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model.IDataType>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeArgumentsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _typeArgumentsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _typeArgumentsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .IDataType,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _typeArgumentsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _typeArgumentsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeArgumentsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _typeArgumentsSupplierInner3Key,
                                                        _typeArgumentsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeArgumentsType),
                                    pInner1,
                                    _typeArgumentsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeArgumentsSupplier =
                        (p, consumer) -> {
                            _typeArgumentsSupplierInner1.accept(p.getTypeArguments(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fullyQualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fullyQualifiedNameSupplier),
                        java.util.Optional.of(_fullyQualifiedNameConsumer),
                        java.util.Optional.of(_fullyQualifiedNameSupplierInner1),
                        java.util.Optional.of(_fullyQualifiedNameConsumerInner1),
                        _fullyQualifiedNameType,
                        FIELD_FULLYQUALIFIEDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtTypeSupplier),
                        java.util.Optional.of(_udtTypeConsumer),
                        java.util.Optional.of(_udtTypeSupplierInner1),
                        java.util.Optional.of(_udtTypeConsumerInner1),
                        _udtTypeType,
                        FIELD_UDTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta versionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_versionSupplier),
                        java.util.Optional.of(_versionConsumer),
                        java.util.Optional.of(_versionSupplierInner1),
                        java.util.Optional.of(_versionConsumerInner1),
                        _versionType,
                        FIELD_VERSION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeArgumentsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeArgumentsSupplier),
                        java.util.Optional.of(_typeArgumentsConsumer),
                        java.util.Optional.of(_typeArgumentsSupplierInner1),
                        java.util.Optional.of(_typeArgumentsConsumerInner1),
                        _typeArgumentsType,
                        FIELD_TYPEARGUMENTS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl();
        }

        @Override
        public UdtDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.UdtDataType._UdtDataTypeBuilderImpl(cc);
        }

        public UdtDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(FIELD_FULLYQUALIFIEDNAME, fullyQualifiedNameMeta);
                                        put(FIELD_UDTTYPE, udtTypeMeta);
                                        put(FIELD_VERSION, versionMeta);
                                        put(FIELD_TYPEARGUMENTS, typeArgumentsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_FULLYQUALIFIEDNAME:
                    return FIELD_FULLYQUALIFIEDNAME;
                case FIELD_ID_UDTTYPE:
                    return FIELD_UDTTYPE;
                case FIELD_ID_VERSION:
                    return FIELD_VERSION;
                case FIELD_ID_TYPEARGUMENTS:
                    return FIELD_TYPEARGUMENTS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.UdtDataType{ExtendedAttribs:optional<map<string,string>;>;FullyQualifiedName:string;TypeArguments:optional<map<string,string>;>;TypeDefName:optional<string;>;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];Version:optional<int;>;}
            schemarise.alfa.runtime.model.UdtDataType{FullyQualifiedName:string;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];}
            */
            return "b49aa6a7:20423f1d";
        }
    }
    // </editor-fold>

}
