// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ColumnData extends com.schemarise.alfa.runtime.Union {

    public default java.util.List<java.util.Optional<java.lang.Integer>> getInts() {
        throw new IllegalStateException(
                "Accessing field ints is not supported in " + getClass().getSimpleName());
    }

    public default boolean isInts() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.Short>> getShorts() {
        throw new IllegalStateException(
                "Accessing field shorts is not supported in " + getClass().getSimpleName());
    }

    public default boolean isShorts() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.Long>> getLongs() {
        throw new IllegalStateException(
                "Accessing field longs is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLongs() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.Double>> getDoubles() {
        throw new IllegalStateException(
                "Accessing field doubles is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDoubles() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.math.BigDecimal>> getDecimals() {
        throw new IllegalStateException(
                "Accessing field decimals is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDecimals() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.String>> getStrings() {
        throw new IllegalStateException(
                "Accessing field strings is not supported in " + getClass().getSimpleName());
    }

    public default boolean isStrings() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.Boolean>> getBooleans() {
        throw new IllegalStateException(
                "Accessing field booleans is not supported in " + getClass().getSimpleName());
    }

    public default boolean isBooleans() {
        return false;
    }

    public default java.util.List<java.util.Optional<byte[]>> getBinaries() {
        throw new IllegalStateException(
                "Accessing field binaries is not supported in " + getClass().getSimpleName());
    }

    public default boolean isBinaries() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.time.LocalDate>> getDates() {
        throw new IllegalStateException(
                "Accessing field dates is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDates() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.time.Duration>> getDurations() {
        throw new IllegalStateException(
                "Accessing field durations is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDurations() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.time.LocalTime>> getTimes() {
        throw new IllegalStateException(
                "Accessing field times is not supported in " + getClass().getSimpleName());
    }

    public default boolean isTimes() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.time.LocalDateTime>> getDatetimes() {
        throw new IllegalStateException(
                "Accessing field datetimes is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDatetimes() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.util.UUID>> getUuids() {
        throw new IllegalStateException(
                "Accessing field uuids is not supported in " + getClass().getSimpleName());
    }

    public default boolean isUuids() {
        return false;
    }

    public default java.util.List<java.util.Optional<java.lang.Boolean>> getVoids() {
        throw new IllegalStateException(
                "Accessing field voids is not supported in " + getClass().getSimpleName());
    }

    public default boolean isVoids() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="Caseints">
    static final class Caseints implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Integer>> _ints;

        private Caseints(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Integer>> v) {
            this._ints = v;
        }

        public java.util.List<java.util.Optional<java.lang.Integer>> getInts() {
            return this._ints;
        }

        public boolean isInts() {
            return true;
        }

        public java.lang.String caseName() {
            return "ints";
        }

        public java.lang.Object caseValue() {
            return _ints;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ints")) return _ints;
            else throw new IllegalStateException("Cannot access ints");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Caseshorts">
    static final class Caseshorts implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Short>> _shorts;

        private Caseshorts(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Short>> v) {
            this._shorts = v;
        }

        public java.util.List<java.util.Optional<java.lang.Short>> getShorts() {
            return this._shorts;
        }

        public boolean isShorts() {
            return true;
        }

        public java.lang.String caseName() {
            return "shorts";
        }

        public java.lang.Object caseValue() {
            return _shorts;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("shorts")) return _shorts;
            else throw new IllegalStateException("Cannot access shorts");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Caselongs">
    static final class Caselongs implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Long>> _longs;

        private Caselongs(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Long>> v) {
            this._longs = v;
        }

        public java.util.List<java.util.Optional<java.lang.Long>> getLongs() {
            return this._longs;
        }

        public boolean isLongs() {
            return true;
        }

        public java.lang.String caseName() {
            return "longs";
        }

        public java.lang.Object caseValue() {
            return _longs;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("longs")) return _longs;
            else throw new IllegalStateException("Cannot access longs");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casedoubles">
    static final class Casedoubles implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Double>> _doubles;

        private Casedoubles(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Double>> v) {
            this._doubles = v;
        }

        public java.util.List<java.util.Optional<java.lang.Double>> getDoubles() {
            return this._doubles;
        }

        public boolean isDoubles() {
            return true;
        }

        public java.lang.String caseName() {
            return "doubles";
        }

        public java.lang.Object caseValue() {
            return _doubles;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("doubles")) return _doubles;
            else throw new IllegalStateException("Cannot access doubles");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casedecimals">
    static final class Casedecimals implements ColumnData {
        private java.util.List<java.util.Optional<java.math.BigDecimal>> _decimals;

        private Casedecimals(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.math.BigDecimal>> v) {
            this._decimals = v;
        }

        public java.util.List<java.util.Optional<java.math.BigDecimal>> getDecimals() {
            return this._decimals;
        }

        public boolean isDecimals() {
            return true;
        }

        public java.lang.String caseName() {
            return "decimals";
        }

        public java.lang.Object caseValue() {
            return _decimals;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("decimals")) return _decimals;
            else throw new IllegalStateException("Cannot access decimals");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casestrings">
    static final class Casestrings implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.String>> _strings;

        private Casestrings(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.String>> v) {
            this._strings = v;
        }

        public java.util.List<java.util.Optional<java.lang.String>> getStrings() {
            return this._strings;
        }

        public boolean isStrings() {
            return true;
        }

        public java.lang.String caseName() {
            return "strings";
        }

        public java.lang.Object caseValue() {
            return _strings;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("strings")) return _strings;
            else throw new IllegalStateException("Cannot access strings");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casebooleans">
    static final class Casebooleans implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Boolean>> _booleans;

        private Casebooleans(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Boolean>> v) {
            this._booleans = v;
        }

        public java.util.List<java.util.Optional<java.lang.Boolean>> getBooleans() {
            return this._booleans;
        }

        public boolean isBooleans() {
            return true;
        }

        public java.lang.String caseName() {
            return "booleans";
        }

        public java.lang.Object caseValue() {
            return _booleans;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("booleans")) return _booleans;
            else throw new IllegalStateException("Cannot access booleans");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casebinaries">
    static final class Casebinaries implements ColumnData {
        private java.util.List<java.util.Optional<byte[]>> _binaries;

        private Casebinaries(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<byte[]>> v) {
            this._binaries = v;
        }

        public java.util.List<java.util.Optional<byte[]>> getBinaries() {
            return this._binaries;
        }

        public boolean isBinaries() {
            return true;
        }

        public java.lang.String caseName() {
            return "binaries";
        }

        public java.lang.Object caseValue() {
            return _binaries;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("binaries")) return _binaries;
            else throw new IllegalStateException("Cannot access binaries");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casedates">
    static final class Casedates implements ColumnData {
        private java.util.List<java.util.Optional<java.time.LocalDate>> _dates;

        private Casedates(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.time.LocalDate>> v) {
            this._dates = v;
        }

        public java.util.List<java.util.Optional<java.time.LocalDate>> getDates() {
            return this._dates;
        }

        public boolean isDates() {
            return true;
        }

        public java.lang.String caseName() {
            return "dates";
        }

        public java.lang.Object caseValue() {
            return _dates;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("dates")) return _dates;
            else throw new IllegalStateException("Cannot access dates");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casedurations">
    static final class Casedurations implements ColumnData {
        private java.util.List<java.util.Optional<java.time.Duration>> _durations;

        private Casedurations(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.time.Duration>> v) {
            this._durations = v;
        }

        public java.util.List<java.util.Optional<java.time.Duration>> getDurations() {
            return this._durations;
        }

        public boolean isDurations() {
            return true;
        }

        public java.lang.String caseName() {
            return "durations";
        }

        public java.lang.Object caseValue() {
            return _durations;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("durations")) return _durations;
            else throw new IllegalStateException("Cannot access durations");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casetimes">
    static final class Casetimes implements ColumnData {
        private java.util.List<java.util.Optional<java.time.LocalTime>> _times;

        private Casetimes(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.time.LocalTime>> v) {
            this._times = v;
        }

        public java.util.List<java.util.Optional<java.time.LocalTime>> getTimes() {
            return this._times;
        }

        public boolean isTimes() {
            return true;
        }

        public java.lang.String caseName() {
            return "times";
        }

        public java.lang.Object caseValue() {
            return _times;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("times")) return _times;
            else throw new IllegalStateException("Cannot access times");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casedatetimes">
    static final class Casedatetimes implements ColumnData {
        private java.util.List<java.util.Optional<java.time.LocalDateTime>> _datetimes;

        private Casedatetimes(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.time.LocalDateTime>> v) {
            this._datetimes = v;
        }

        public java.util.List<java.util.Optional<java.time.LocalDateTime>> getDatetimes() {
            return this._datetimes;
        }

        public boolean isDatetimes() {
            return true;
        }

        public java.lang.String caseName() {
            return "datetimes";
        }

        public java.lang.Object caseValue() {
            return _datetimes;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("datetimes")) return _datetimes;
            else throw new IllegalStateException("Cannot access datetimes");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Caseuuids">
    static final class Caseuuids implements ColumnData {
        private java.util.List<java.util.Optional<java.util.UUID>> _uuids;

        private Caseuuids(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.util.UUID>> v) {
            this._uuids = v;
        }

        public java.util.List<java.util.Optional<java.util.UUID>> getUuids() {
            return this._uuids;
        }

        public boolean isUuids() {
            return true;
        }

        public java.lang.String caseName() {
            return "uuids";
        }

        public java.lang.Object caseValue() {
            return _uuids;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("uuids")) return _uuids;
            else throw new IllegalStateException("Cannot access uuids");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Casevoids">
    static final class Casevoids implements ColumnData {
        private java.util.List<java.util.Optional<java.lang.Boolean>> _voids;

        private Casevoids(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<java.util.Optional<java.lang.Boolean>> v) {
            this._voids = v;
        }

        public java.util.List<java.util.Optional<java.lang.Boolean>> getVoids() {
            return this._voids;
        }

        public boolean isVoids() {
            return true;
        }

        public java.lang.String caseName() {
            return "voids";
        }

        public java.lang.Object caseValue() {
            return _voids;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("voids")) return _voids;
            else throw new IllegalStateException("Cannot access voids");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ColumnDataBuilder builder() {
        return new schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl();
    }

    public static ColumnDataBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ColumnDataBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        ColumnDataBuilder addInts(java.util.Optional<java.lang.Integer> e);

        ColumnDataBuilder addAllInts(java.util.List<java.util.Optional<java.lang.Integer>> all);

        ColumnDataBuilder addShorts(java.util.Optional<java.lang.Short> e);

        ColumnDataBuilder addAllShorts(java.util.List<java.util.Optional<java.lang.Short>> all);

        ColumnDataBuilder addLongs(java.util.Optional<java.lang.Long> e);

        ColumnDataBuilder addAllLongs(java.util.List<java.util.Optional<java.lang.Long>> all);

        ColumnDataBuilder addDoubles(java.util.Optional<java.lang.Double> e);

        ColumnDataBuilder addAllDoubles(java.util.List<java.util.Optional<java.lang.Double>> all);

        ColumnDataBuilder addDecimals(java.util.Optional<java.math.BigDecimal> e);

        ColumnDataBuilder addAllDecimals(
                java.util.List<java.util.Optional<java.math.BigDecimal>> all);

        ColumnDataBuilder addStrings(java.util.Optional<java.lang.String> e);

        ColumnDataBuilder addAllStrings(java.util.List<java.util.Optional<java.lang.String>> all);

        ColumnDataBuilder addBooleans(java.util.Optional<java.lang.Boolean> e);

        ColumnDataBuilder addAllBooleans(java.util.List<java.util.Optional<java.lang.Boolean>> all);

        ColumnDataBuilder addBinaries(java.util.Optional<byte[]> e);

        ColumnDataBuilder addAllBinaries(java.util.List<java.util.Optional<byte[]>> all);

        ColumnDataBuilder addDates(java.util.Optional<java.time.LocalDate> e);

        ColumnDataBuilder addAllDates(java.util.List<java.util.Optional<java.time.LocalDate>> all);

        ColumnDataBuilder addDurations(java.util.Optional<java.time.Duration> e);

        ColumnDataBuilder addAllDurations(
                java.util.List<java.util.Optional<java.time.Duration>> all);

        ColumnDataBuilder addTimes(java.util.Optional<java.time.LocalTime> e);

        ColumnDataBuilder addAllTimes(java.util.List<java.util.Optional<java.time.LocalTime>> all);

        ColumnDataBuilder addDatetimes(java.util.Optional<java.time.LocalDateTime> e);

        ColumnDataBuilder addAllDatetimes(
                java.util.List<java.util.Optional<java.time.LocalDateTime>> all);

        ColumnDataBuilder addUuids(java.util.Optional<java.util.UUID> e);

        ColumnDataBuilder addAllUuids(java.util.List<java.util.Optional<java.util.UUID>> all);

        ColumnDataBuilder addVoids(java.util.Optional<java.lang.Boolean> e);

        ColumnDataBuilder addAllVoids(java.util.List<java.util.Optional<java.lang.Boolean>> all);

        ColumnData build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ColumnDataBuilderImpl implements ColumnDataBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.List<java.util.Optional<java.lang.Integer>> _ints;
        private java.util.List<java.util.Optional<java.lang.Short>> _shorts;
        private java.util.List<java.util.Optional<java.lang.Long>> _longs;
        private java.util.List<java.util.Optional<java.lang.Double>> _doubles;
        private java.util.List<java.util.Optional<java.math.BigDecimal>> _decimals;
        private java.util.List<java.util.Optional<java.lang.String>> _strings;
        private java.util.List<java.util.Optional<java.lang.Boolean>> _booleans;
        private java.util.List<java.util.Optional<byte[]>> _binaries;
        private java.util.List<java.util.Optional<java.time.LocalDate>> _dates;
        private java.util.List<java.util.Optional<java.time.Duration>> _durations;
        private java.util.List<java.util.Optional<java.time.LocalTime>> _times;
        private java.util.List<java.util.Optional<java.time.LocalDateTime>> _datetimes;
        private java.util.List<java.util.Optional<java.util.UUID>> _uuids;
        private java.util.List<java.util.Optional<java.lang.Boolean>> _voids;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ints":
                    return _ints;
                case "shorts":
                    return _shorts;
                case "longs":
                    return _longs;
                case "doubles":
                    return _doubles;
                case "decimals":
                    return _decimals;
                case "strings":
                    return _strings;
                case "booleans":
                    return _booleans;
                case "binaries":
                    return _binaries;
                case "dates":
                    return _dates;
                case "durations":
                    return _durations;
                case "times":
                    return _times;
                case "datetimes":
                    return _datetimes;
                case "uuids":
                    return _uuids;
                case "voids":
                    return _voids;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _ColumnDataBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ColumnDataBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(14);
            __missingFields.set(0, 14);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE;
        }

        private void createInts() {
            this._ints = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addInts(java.util.Optional<java.lang.Integer> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Ints", e);
            if (this._ints == null) createInts();
            this._ints.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_INTS);
            return this;
        }

        public ColumnDataBuilder setInts(int index, java.util.Optional<java.lang.Integer> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Ints", e);
            if (this._ints == null) createInts();
            this._ints.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_INTS);
            return this;
        }

        public ColumnDataBuilder addAllInts(
                java.util.List<java.util.Optional<java.lang.Integer>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Ints", all);
            if (this._ints == null) createInts();
            this._ints.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_INTS);
            return this;
        }

        private ColumnDataBuilder setInts(
                java.util.List<java.util.Optional<java.lang.Integer>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Ints", all);
            this._ints = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_INTS);
            return this;
        }

        private void createShorts() {
            this._shorts = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addShorts(java.util.Optional<java.lang.Short> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Shorts", e);
            if (this._shorts == null) createShorts();
            this._shorts.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_SHORTS);
            return this;
        }

        public ColumnDataBuilder setShorts(int index, java.util.Optional<java.lang.Short> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Shorts", e);
            if (this._shorts == null) createShorts();
            this._shorts.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_SHORTS);
            return this;
        }

        public ColumnDataBuilder addAllShorts(
                java.util.List<java.util.Optional<java.lang.Short>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Shorts", all);
            if (this._shorts == null) createShorts();
            this._shorts.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_SHORTS);
            return this;
        }

        private ColumnDataBuilder setShorts(
                java.util.List<java.util.Optional<java.lang.Short>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Shorts", all);
            this._shorts = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_SHORTS);
            return this;
        }

        private void createLongs() {
            this._longs = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addLongs(java.util.Optional<java.lang.Long> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Longs", e);
            if (this._longs == null) createLongs();
            this._longs.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_LONGS);
            return this;
        }

        public ColumnDataBuilder setLongs(int index, java.util.Optional<java.lang.Long> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Longs", e);
            if (this._longs == null) createLongs();
            this._longs.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_LONGS);
            return this;
        }

        public ColumnDataBuilder addAllLongs(
                java.util.List<java.util.Optional<java.lang.Long>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Longs", all);
            if (this._longs == null) createLongs();
            this._longs.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_LONGS);
            return this;
        }

        private ColumnDataBuilder setLongs(java.util.List<java.util.Optional<java.lang.Long>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Longs", all);
            this._longs = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_LONGS);
            return this;
        }

        private void createDoubles() {
            this._doubles = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addDoubles(java.util.Optional<java.lang.Double> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doubles", e);
            if (this._doubles == null) createDoubles();
            this._doubles.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DOUBLES);
            return this;
        }

        public ColumnDataBuilder setDoubles(int index, java.util.Optional<java.lang.Double> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doubles", e);
            if (this._doubles == null) createDoubles();
            this._doubles.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DOUBLES);
            return this;
        }

        public ColumnDataBuilder addAllDoubles(
                java.util.List<java.util.Optional<java.lang.Double>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doubles", all);
            if (this._doubles == null) createDoubles();
            this._doubles.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DOUBLES);
            return this;
        }

        private ColumnDataBuilder setDoubles(
                java.util.List<java.util.Optional<java.lang.Double>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doubles", all);
            this._doubles = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DOUBLES);
            return this;
        }

        private void createDecimals() {
            this._decimals = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addDecimals(java.util.Optional<java.math.BigDecimal> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Decimals", e);
            if (this._decimals == null) createDecimals();
            this._decimals.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DECIMALS);
            return this;
        }

        public ColumnDataBuilder setDecimals(
                int index, java.util.Optional<java.math.BigDecimal> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Decimals", e);
            if (this._decimals == null) createDecimals();
            this._decimals.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DECIMALS);
            return this;
        }

        public ColumnDataBuilder addAllDecimals(
                java.util.List<java.util.Optional<java.math.BigDecimal>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Decimals", all);
            if (this._decimals == null) createDecimals();
            this._decimals.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DECIMALS);
            return this;
        }

        private ColumnDataBuilder setDecimals(
                java.util.List<java.util.Optional<java.math.BigDecimal>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Decimals", all);
            this._decimals = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DECIMALS);
            return this;
        }

        private void createStrings() {
            this._strings = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addStrings(java.util.Optional<java.lang.String> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Strings", e);
            if (this._strings == null) createStrings();
            this._strings.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_STRINGS);
            return this;
        }

        public ColumnDataBuilder setStrings(int index, java.util.Optional<java.lang.String> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Strings", e);
            if (this._strings == null) createStrings();
            this._strings.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_STRINGS);
            return this;
        }

        public ColumnDataBuilder addAllStrings(
                java.util.List<java.util.Optional<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Strings", all);
            if (this._strings == null) createStrings();
            this._strings.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_STRINGS);
            return this;
        }

        private ColumnDataBuilder setStrings(
                java.util.List<java.util.Optional<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Strings", all);
            this._strings = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_STRINGS);
            return this;
        }

        private void createBooleans() {
            this._booleans = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addBooleans(java.util.Optional<java.lang.Boolean> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Booleans", e);
            if (this._booleans == null) createBooleans();
            this._booleans.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BOOLEANS);
            return this;
        }

        public ColumnDataBuilder setBooleans(int index, java.util.Optional<java.lang.Boolean> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Booleans", e);
            if (this._booleans == null) createBooleans();
            this._booleans.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BOOLEANS);
            return this;
        }

        public ColumnDataBuilder addAllBooleans(
                java.util.List<java.util.Optional<java.lang.Boolean>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Booleans", all);
            if (this._booleans == null) createBooleans();
            this._booleans.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BOOLEANS);
            return this;
        }

        private ColumnDataBuilder setBooleans(
                java.util.List<java.util.Optional<java.lang.Boolean>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Booleans", all);
            this._booleans = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BOOLEANS);
            return this;
        }

        private void createBinaries() {
            this._binaries = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addBinaries(java.util.Optional<byte[]> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Binaries", e);
            if (this._binaries == null) createBinaries();
            this._binaries.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BINARIES);
            return this;
        }

        public ColumnDataBuilder setBinaries(int index, java.util.Optional<byte[]> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Binaries", e);
            if (this._binaries == null) createBinaries();
            this._binaries.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BINARIES);
            return this;
        }

        public ColumnDataBuilder addAllBinaries(java.util.List<java.util.Optional<byte[]>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Binaries", all);
            if (this._binaries == null) createBinaries();
            this._binaries.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BINARIES);
            return this;
        }

        private ColumnDataBuilder setBinaries(java.util.List<java.util.Optional<byte[]>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Binaries", all);
            this._binaries = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BINARIES);
            return this;
        }

        private void createDates() {
            this._dates = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addDates(java.util.Optional<java.time.LocalDate> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Dates", e);
            if (this._dates == null) createDates();
            this._dates.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DATES);
            return this;
        }

        public ColumnDataBuilder setDates(int index, java.util.Optional<java.time.LocalDate> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Dates", e);
            if (this._dates == null) createDates();
            this._dates.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DATES);
            return this;
        }

        public ColumnDataBuilder addAllDates(
                java.util.List<java.util.Optional<java.time.LocalDate>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Dates", all);
            if (this._dates == null) createDates();
            this._dates.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DATES);
            return this;
        }

        private ColumnDataBuilder setDates(
                java.util.List<java.util.Optional<java.time.LocalDate>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Dates", all);
            this._dates = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DATES);
            return this;
        }

        private void createDurations() {
            this._durations = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addDurations(java.util.Optional<java.time.Duration> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Durations", e);
            if (this._durations == null) createDurations();
            this._durations.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DURATIONS);
            return this;
        }

        public ColumnDataBuilder setDurations(int index, java.util.Optional<java.time.Duration> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Durations", e);
            if (this._durations == null) createDurations();
            this._durations.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DURATIONS);
            return this;
        }

        public ColumnDataBuilder addAllDurations(
                java.util.List<java.util.Optional<java.time.Duration>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Durations", all);
            if (this._durations == null) createDurations();
            this._durations.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DURATIONS);
            return this;
        }

        private ColumnDataBuilder setDurations(
                java.util.List<java.util.Optional<java.time.Duration>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Durations", all);
            this._durations = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DURATIONS);
            return this;
        }

        private void createTimes() {
            this._times = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addTimes(java.util.Optional<java.time.LocalTime> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Times", e);
            if (this._times == null) createTimes();
            this._times.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_TIMES);
            return this;
        }

        public ColumnDataBuilder setTimes(int index, java.util.Optional<java.time.LocalTime> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Times", e);
            if (this._times == null) createTimes();
            this._times.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_TIMES);
            return this;
        }

        public ColumnDataBuilder addAllTimes(
                java.util.List<java.util.Optional<java.time.LocalTime>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Times", all);
            if (this._times == null) createTimes();
            this._times.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_TIMES);
            return this;
        }

        private ColumnDataBuilder setTimes(
                java.util.List<java.util.Optional<java.time.LocalTime>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Times", all);
            this._times = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_TIMES);
            return this;
        }

        private void createDatetimes() {
            this._datetimes = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addDatetimes(java.util.Optional<java.time.LocalDateTime> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Datetimes", e);
            if (this._datetimes == null) createDatetimes();
            this._datetimes.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DATETIMES);
            return this;
        }

        public ColumnDataBuilder setDatetimes(
                int index, java.util.Optional<java.time.LocalDateTime> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Datetimes", e);
            if (this._datetimes == null) createDatetimes();
            this._datetimes.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DATETIMES);
            return this;
        }

        public ColumnDataBuilder addAllDatetimes(
                java.util.List<java.util.Optional<java.time.LocalDateTime>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Datetimes", all);
            if (this._datetimes == null) createDatetimes();
            this._datetimes.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DATETIMES);
            return this;
        }

        private ColumnDataBuilder setDatetimes(
                java.util.List<java.util.Optional<java.time.LocalDateTime>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Datetimes", all);
            this._datetimes = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DATETIMES);
            return this;
        }

        private void createUuids() {
            this._uuids = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addUuids(java.util.Optional<java.util.UUID> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Uuids", e);
            if (this._uuids == null) createUuids();
            this._uuids.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_UUIDS);
            return this;
        }

        public ColumnDataBuilder setUuids(int index, java.util.Optional<java.util.UUID> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Uuids", e);
            if (this._uuids == null) createUuids();
            this._uuids.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_UUIDS);
            return this;
        }

        public ColumnDataBuilder addAllUuids(
                java.util.List<java.util.Optional<java.util.UUID>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Uuids", all);
            if (this._uuids == null) createUuids();
            this._uuids.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_UUIDS);
            return this;
        }

        private ColumnDataBuilder setUuids(java.util.List<java.util.Optional<java.util.UUID>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Uuids", all);
            this._uuids = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_UUIDS);
            return this;
        }

        private void createVoids() {
            this._voids = new java.util.ArrayList<>();
        }

        public ColumnDataBuilder addVoids(java.util.Optional<java.lang.Boolean> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Voids", e);
            if (this._voids == null) createVoids();
            this._voids.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_VOIDS);
            return this;
        }

        public ColumnDataBuilder setVoids(int index, java.util.Optional<java.lang.Boolean> e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Voids", e);
            if (this._voids == null) createVoids();
            this._voids.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_VOIDS);
            return this;
        }

        public ColumnDataBuilder addAllVoids(
                java.util.List<java.util.Optional<java.lang.Boolean>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Voids", all);
            if (this._voids == null) createVoids();
            this._voids.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_VOIDS);
            return this;
        }

        private ColumnDataBuilder setVoids(
                java.util.List<java.util.Optional<java.lang.Boolean>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Voids", all);
            this._voids = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_VOIDS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ints":
                    setInts((java.util.List<java.util.Optional<java.lang.Integer>>) val);
                    break;
                case "shorts":
                    setShorts((java.util.List<java.util.Optional<java.lang.Short>>) val);
                    break;
                case "longs":
                    setLongs((java.util.List<java.util.Optional<java.lang.Long>>) val);
                    break;
                case "doubles":
                    setDoubles((java.util.List<java.util.Optional<java.lang.Double>>) val);
                    break;
                case "decimals":
                    setDecimals((java.util.List<java.util.Optional<java.math.BigDecimal>>) val);
                    break;
                case "strings":
                    setStrings((java.util.List<java.util.Optional<java.lang.String>>) val);
                    break;
                case "booleans":
                    setBooleans((java.util.List<java.util.Optional<java.lang.Boolean>>) val);
                    break;
                case "binaries":
                    setBinaries((java.util.List<java.util.Optional<byte[]>>) val);
                    break;
                case "dates":
                    setDates((java.util.List<java.util.Optional<java.time.LocalDate>>) val);
                    break;
                case "durations":
                    setDurations((java.util.List<java.util.Optional<java.time.Duration>>) val);
                    break;
                case "times":
                    setTimes((java.util.List<java.util.Optional<java.time.LocalTime>>) val);
                    break;
                case "datetimes":
                    setDatetimes((java.util.List<java.util.Optional<java.time.LocalDateTime>>) val);
                    break;
                case "uuids":
                    setUuids((java.util.List<java.util.Optional<java.util.UUID>>) val);
                    break;
                case "voids":
                    setVoids((java.util.List<java.util.Optional<java.lang.Boolean>>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ColumnData build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_INTS))
                return new Caseints(__builderConfig, java.util.Collections.unmodifiableList(_ints));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_SHORTS))
                return new Caseshorts(
                        __builderConfig, java.util.Collections.unmodifiableList(_shorts));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_LONGS))
                return new Caselongs(
                        __builderConfig, java.util.Collections.unmodifiableList(_longs));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DOUBLES))
                return new Casedoubles(
                        __builderConfig, java.util.Collections.unmodifiableList(_doubles));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DECIMALS))
                return new Casedecimals(
                        __builderConfig, java.util.Collections.unmodifiableList(_decimals));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_STRINGS))
                return new Casestrings(
                        __builderConfig, java.util.Collections.unmodifiableList(_strings));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BOOLEANS))
                return new Casebooleans(
                        __builderConfig, java.util.Collections.unmodifiableList(_booleans));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_BINARIES))
                return new Casebinaries(
                        __builderConfig, java.util.Collections.unmodifiableList(_binaries));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_DATES))
                return new Casedates(
                        __builderConfig, java.util.Collections.unmodifiableList(_dates));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DURATIONS))
                return new Casedurations(
                        __builderConfig, java.util.Collections.unmodifiableList(_durations));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_TIMES))
                return new Casetimes(
                        __builderConfig, java.util.Collections.unmodifiableList(_times));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor
                            .FIELD_ID_DATETIMES))
                return new Casedatetimes(
                        __builderConfig, java.util.Collections.unmodifiableList(_datetimes));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_UUIDS))
                return new Caseuuids(
                        __builderConfig, java.util.Collections.unmodifiableList(_uuids));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.FIELD_ID_VOIDS))
                return new Casevoids(
                        __builderConfig, java.util.Collections.unmodifiableList(_voids));

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor.INSTANCE,
                    14,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ColumnData",
                    new java.lang.String[] {
                        "ints",
                        "shorts",
                        "longs",
                        "doubles",
                        "decimals",
                        "strings",
                        "booleans",
                        "binaries",
                        "dates",
                        "durations",
                        "times",
                        "datetimes",
                        "uuids",
                        "voids"
                    },
                    new java.lang.Object[] {
                        _ints,
                        _shorts,
                        _longs,
                        _doubles,
                        _decimals,
                        _strings,
                        _booleans,
                        _binaries,
                        _dates,
                        _durations,
                        _times,
                        _datetimes,
                        _uuids,
                        _voids
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ColumnDataDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.ColumnData";
        public static schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.ColumnData.ColumnDataDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_INTS = 0;
        public static final String FIELD_INTS = "ints";

        public static final short FIELD_ID_SHORTS = 1;
        public static final String FIELD_SHORTS = "shorts";

        public static final short FIELD_ID_LONGS = 2;
        public static final String FIELD_LONGS = "longs";

        public static final short FIELD_ID_DOUBLES = 3;
        public static final String FIELD_DOUBLES = "doubles";

        public static final short FIELD_ID_DECIMALS = 4;
        public static final String FIELD_DECIMALS = "decimals";

        public static final short FIELD_ID_STRINGS = 5;
        public static final String FIELD_STRINGS = "strings";

        public static final short FIELD_ID_BOOLEANS = 6;
        public static final String FIELD_BOOLEANS = "booleans";

        public static final short FIELD_ID_BINARIES = 7;
        public static final String FIELD_BINARIES = "binaries";

        public static final short FIELD_ID_DATES = 8;
        public static final String FIELD_DATES = "dates";

        public static final short FIELD_ID_DURATIONS = 9;
        public static final String FIELD_DURATIONS = "durations";

        public static final short FIELD_ID_TIMES = 10;
        public static final String FIELD_TIMES = "times";

        public static final short FIELD_ID_DATETIMES = 11;
        public static final String FIELD_DATETIMES = "datetimes";

        public static final short FIELD_ID_UUIDS = 12;
        public static final String FIELD_UUIDS = "uuids";

        public static final short FIELD_ID_VOIDS = 13;
        public static final String FIELD_VOIDS = "voids";

        private schemarise.alfa.runtime.model.ListDataType _intsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .intType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _shortsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .shortType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _longsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .longType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _doublesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .doubleType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _decimalsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .decimalType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _stringsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _booleansType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .booleanType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _binariesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .binaryType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _datesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .dateType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _durationsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .durationType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _timesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .timeType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _datetimesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .datetimeType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _uuidsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .uuidType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _voidsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.OptionalDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .booleanType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer list< int ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Integer>>>
                _intsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Integer>>
                                    _intsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Integer>
                                                        _intsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3.intValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _intsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _intsType)
                                                                        .getComponentType()),
                                                        _intsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _intsType),
                                    _intsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _intsConsumer =
                        (builder, supplier) -> {
                            builder.addAllInts(_intsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< short ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Short>>>
                _shortsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Short>>
                                    _shortsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Short>
                                                        _shortsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .shortValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _shortsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _shortsType)
                                                                        .getComponentType()),
                                                        _shortsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _shortsType),
                                    _shortsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _shortsConsumer =
                        (builder, supplier) -> {
                            builder.addAllShorts(_shortsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< long ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Long>>>
                _longsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Long>>
                                    _longsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Long>
                                                        _longsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3.longValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _longsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _longsType)
                                                                        .getComponentType()),
                                                        _longsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _longsType),
                                    _longsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _longsConsumer =
                        (builder, supplier) -> {
                            builder.addAllLongs(_longsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< double ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Double>>>
                _doublesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Double>>
                                    _doublesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Double>
                                                        _doublesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .doubleValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _doublesType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _doublesType)
                                                                        .getComponentType()),
                                                        _doublesConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _doublesType),
                                    _doublesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _doublesConsumer =
                        (builder, supplier) -> {
                            builder.addAllDoubles(_doublesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< decimal ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.math.BigDecimal>>>
                _decimalsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.math.BigDecimal>>
                                    _decimalsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.math.BigDecimal>
                                                        _decimalsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .decimalValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _decimalsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _decimalsType)
                                                                        .getComponentType()),
                                                        _decimalsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _decimalsType),
                                    _decimalsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _decimalsConsumer =
                        (builder, supplier) -> {
                            builder.addAllDecimals(_decimalsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< string ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.String>>>
                _stringsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.String>>
                                    _stringsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _stringsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _stringsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _stringsType)
                                                                        .getComponentType()),
                                                        _stringsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _stringsType),
                                    _stringsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _stringsConsumer =
                        (builder, supplier) -> {
                            builder.addAllStrings(_stringsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< boolean ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Boolean>>>
                _booleansConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Boolean>>
                                    _booleansConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Boolean>
                                                        _booleansConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .booleanValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _booleansType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _booleansType)
                                                                        .getComponentType()),
                                                        _booleansConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _booleansType),
                                    _booleansConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _booleansConsumer =
                        (builder, supplier) -> {
                            builder.addAllBooleans(_booleansConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< binary ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<byte[]>>>
                _binariesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<byte[]>>
                                    _binariesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                byte[]>
                                                        _binariesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .binaryValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _binariesType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _binariesType)
                                                                        .getComponentType()),
                                                        _binariesConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _binariesType),
                                    _binariesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _binariesConsumer =
                        (builder, supplier) -> {
                            builder.addAllBinaries(_binariesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< date ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.time.LocalDate>>>
                _datesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.time.LocalDate>>
                                    _datesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.time.LocalDate>
                                                        _datesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3.dateValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _datesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _datesType)
                                                                        .getComponentType()),
                                                        _datesConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _datesType),
                                    _datesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _datesConsumer =
                        (builder, supplier) -> {
                            builder.addAllDates(_datesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< duration ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.time.Duration>>>
                _durationsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.time.Duration>>
                                    _durationsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.time.Duration>
                                                        _durationsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .durationValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _durationsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _durationsType)
                                                                        .getComponentType()),
                                                        _durationsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _durationsType),
                                    _durationsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _durationsConsumer =
                        (builder, supplier) -> {
                            builder.addAllDurations(_durationsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< time ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.time.LocalTime>>>
                _timesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.time.LocalTime>>
                                    _timesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.time.LocalTime>
                                                        _timesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3.timeValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _timesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _timesType)
                                                                        .getComponentType()),
                                                        _timesConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _timesType),
                                    _timesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _timesConsumer =
                        (builder, supplier) -> {
                            builder.addAllTimes(_timesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< datetime ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.time.LocalDateTime>>>
                _datetimesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.time.LocalDateTime>>
                                    _datetimesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.time.LocalDateTime>
                                                        _datetimesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .datetimeValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _datetimesType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _datetimesType)
                                                                        .getComponentType()),
                                                        _datetimesConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _datetimesType),
                                    _datetimesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _datetimesConsumer =
                        (builder, supplier) -> {
                            builder.addAllDatetimes(_datetimesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< uuid ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.util.UUID>>>
                _uuidsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.util.UUID>>
                                    _uuidsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.util.UUID>
                                                        _uuidsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3.uuidValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _uuidsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _uuidsType)
                                                                        .getComponentType()),
                                                        _uuidsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _uuidsType),
                                    _uuidsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _uuidsConsumer =
                        (builder, supplier) -> {
                            builder.addAllUuids(_uuidsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< boolean ? > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<java.util.Optional<java.lang.Boolean>>>
                _voidsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Optional<java.lang.Boolean>>
                                    _voidsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.Boolean>
                                                        _voidsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .booleanValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .OptionalDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .ListDataType)
                                                                                                                            _voidsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.optionalValue(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _voidsType)
                                                                        .getComponentType()),
                                                        _voidsConsumerInner3);
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _voidsType),
                                    _voidsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _voidsConsumer =
                        (builder, supplier) -> {
                            builder.addAllVoids(_voidsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier list< int ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Integer>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _intsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Integer>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _intsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Integer,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _intsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _intsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _intsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _intsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _intsType),
                                    pInner1,
                                    _intsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _intsSupplier =
                        (p, consumer) -> {
                            _intsSupplierInner1.accept(p.getInts(), consumer);
                        };
        /* -- Supplier list< short ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Short>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _shortsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Short>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _shortsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Short,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _shortsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _shortsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _shortsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _shortsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _shortsType),
                                    pInner1,
                                    _shortsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _shortsSupplier =
                        (p, consumer) -> {
                            _shortsSupplierInner1.accept(p.getShorts(), consumer);
                        };
        /* -- Supplier list< long ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Long>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _longsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Long>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _longsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Long,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _longsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _longsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _longsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _longsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _longsType),
                                    pInner1,
                                    _longsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _longsSupplier =
                        (p, consumer) -> {
                            _longsSupplierInner1.accept(p.getLongs(), consumer);
                        };
        /* -- Supplier list< double ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Double>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _doublesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Double>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _doublesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Double,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _doublesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _doublesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _doublesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _doublesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _doublesType),
                                    pInner1,
                                    _doublesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _doublesSupplier =
                        (p, consumer) -> {
                            _doublesSupplierInner1.accept(p.getDoubles(), consumer);
                        };
        /* -- Supplier list< decimal ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.math.BigDecimal>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decimalsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.math.BigDecimal>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _decimalsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.math.BigDecimal,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _decimalsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _decimalsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _decimalsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _decimalsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _decimalsType),
                                    pInner1,
                                    _decimalsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decimalsSupplier =
                        (p, consumer) -> {
                            _decimalsSupplierInner1.accept(p.getDecimals(), consumer);
                        };
        /* -- Supplier list< string ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _stringsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _stringsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _stringsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _stringsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _stringsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _stringsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _stringsType),
                                    pInner1,
                                    _stringsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _stringsSupplier =
                        (p, consumer) -> {
                            _stringsSupplierInner1.accept(p.getStrings(), consumer);
                        };
        /* -- Supplier list< boolean ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Boolean>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _booleansSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Boolean>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _booleansSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Boolean,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _booleansSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _booleansType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _booleansType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _booleansSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _booleansType),
                                    pInner1,
                                    _booleansSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _booleansSupplier =
                        (p, consumer) -> {
                            _booleansSupplierInner1.accept(p.getBooleans(), consumer);
                        };
        /* -- Supplier list< binary ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<byte[]>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _binariesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<byte[]>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _binariesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                byte[],
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _binariesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _binariesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _binariesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _binariesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _binariesType),
                                    pInner1,
                                    _binariesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _binariesSupplier =
                        (p, consumer) -> {
                            _binariesSupplierInner1.accept(p.getBinaries(), consumer);
                        };
        /* -- Supplier list< date ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.time.LocalDate>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.time.LocalDate>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _datesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.time.LocalDate,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _datesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _datesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _datesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _datesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _datesType),
                                    pInner1,
                                    _datesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datesSupplier =
                        (p, consumer) -> {
                            _datesSupplierInner1.accept(p.getDates(), consumer);
                        };
        /* -- Supplier list< duration ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.time.Duration>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _durationsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.time.Duration>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _durationsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.time.Duration,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _durationsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _durationsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _durationsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _durationsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _durationsType),
                                    pInner1,
                                    _durationsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _durationsSupplier =
                        (p, consumer) -> {
                            _durationsSupplierInner1.accept(p.getDurations(), consumer);
                        };
        /* -- Supplier list< time ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.time.LocalTime>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _timesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.time.LocalTime>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _timesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.time.LocalTime,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _timesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _timesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _timesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _timesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _timesType),
                                    pInner1,
                                    _timesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _timesSupplier =
                        (p, consumer) -> {
                            _timesSupplierInner1.accept(p.getTimes(), consumer);
                        };
        /* -- Supplier list< datetime ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.time.LocalDateTime>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datetimesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.time.LocalDateTime>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _datetimesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.time.LocalDateTime,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _datetimesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _datetimesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _datetimesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _datetimesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _datetimesType),
                                    pInner1,
                                    _datetimesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datetimesSupplier =
                        (p, consumer) -> {
                            _datetimesSupplierInner1.accept(p.getDatetimes(), consumer);
                        };
        /* -- Supplier list< uuid ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.util.UUID>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _uuidsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.util.UUID>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _uuidsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.util.UUID,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _uuidsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _uuidsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _uuidsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _uuidsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _uuidsType),
                                    pInner1,
                                    _uuidsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _uuidsSupplier =
                        (p, consumer) -> {
                            _uuidsSupplierInner1.accept(p.getUuids(), consumer);
                        };
        /* -- Supplier list< boolean ? > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.util.Optional<java.lang.Boolean>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _voidsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Optional<java.lang.Boolean>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _voidsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.Boolean,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _voidsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .OptionalDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .ListDataType)
                                                                                                                    _voidsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.OptionalDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _voidsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _voidsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _voidsType),
                                    pInner1,
                                    _voidsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColumnData,
                        com.schemarise.alfa.runtime.DataConsumer>
                _voidsSupplier =
                        (p, consumer) -> {
                            _voidsSupplierInner1.accept(p.getVoids(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ColumnData, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta intsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_intsSupplier),
                        java.util.Optional.of(_intsConsumer),
                        java.util.Optional.of(_intsSupplierInner1),
                        java.util.Optional.of(_intsConsumerInner1),
                        _intsType,
                        FIELD_INTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta shortsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_shortsSupplier),
                        java.util.Optional.of(_shortsConsumer),
                        java.util.Optional.of(_shortsSupplierInner1),
                        java.util.Optional.of(_shortsConsumerInner1),
                        _shortsType,
                        FIELD_SHORTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta longsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_longsSupplier),
                        java.util.Optional.of(_longsConsumer),
                        java.util.Optional.of(_longsSupplierInner1),
                        java.util.Optional.of(_longsConsumerInner1),
                        _longsType,
                        FIELD_LONGS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta doublesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_doublesSupplier),
                        java.util.Optional.of(_doublesConsumer),
                        java.util.Optional.of(_doublesSupplierInner1),
                        java.util.Optional.of(_doublesConsumerInner1),
                        _doublesType,
                        FIELD_DOUBLES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta decimalsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_decimalsSupplier),
                        java.util.Optional.of(_decimalsConsumer),
                        java.util.Optional.of(_decimalsSupplierInner1),
                        java.util.Optional.of(_decimalsConsumerInner1),
                        _decimalsType,
                        FIELD_DECIMALS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta stringsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_stringsSupplier),
                        java.util.Optional.of(_stringsConsumer),
                        java.util.Optional.of(_stringsSupplierInner1),
                        java.util.Optional.of(_stringsConsumerInner1),
                        _stringsType,
                        FIELD_STRINGS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta booleansMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_booleansSupplier),
                        java.util.Optional.of(_booleansConsumer),
                        java.util.Optional.of(_booleansSupplierInner1),
                        java.util.Optional.of(_booleansConsumerInner1),
                        _booleansType,
                        FIELD_BOOLEANS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta binariesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_binariesSupplier),
                        java.util.Optional.of(_binariesConsumer),
                        java.util.Optional.of(_binariesSupplierInner1),
                        java.util.Optional.of(_binariesConsumerInner1),
                        _binariesType,
                        FIELD_BINARIES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_datesSupplier),
                        java.util.Optional.of(_datesConsumer),
                        java.util.Optional.of(_datesSupplierInner1),
                        java.util.Optional.of(_datesConsumerInner1),
                        _datesType,
                        FIELD_DATES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta durationsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_durationsSupplier),
                        java.util.Optional.of(_durationsConsumer),
                        java.util.Optional.of(_durationsSupplierInner1),
                        java.util.Optional.of(_durationsConsumerInner1),
                        _durationsType,
                        FIELD_DURATIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta timesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_timesSupplier),
                        java.util.Optional.of(_timesConsumer),
                        java.util.Optional.of(_timesSupplierInner1),
                        java.util.Optional.of(_timesConsumerInner1),
                        _timesType,
                        FIELD_TIMES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datetimesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_datetimesSupplier),
                        java.util.Optional.of(_datetimesConsumer),
                        java.util.Optional.of(_datetimesSupplierInner1),
                        java.util.Optional.of(_datetimesConsumerInner1),
                        _datetimesType,
                        FIELD_DATETIMES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta uuidsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_uuidsSupplier),
                        java.util.Optional.of(_uuidsConsumer),
                        java.util.Optional.of(_uuidsSupplierInner1),
                        java.util.Optional.of(_uuidsConsumerInner1),
                        _uuidsType,
                        FIELD_UUIDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta voidsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_voidsSupplier),
                        java.util.Optional.of(_voidsConsumer),
                        java.util.Optional.of(_voidsSupplierInner1),
                        java.util.Optional.of(_voidsConsumerInner1),
                        _voidsType,
                        FIELD_VOIDS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ColumnDataBuilder builder() {
            return new schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl();
        }

        @Override
        public ColumnDataBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.ColumnData._ColumnDataBuilderImpl(cc);
        }

        public ColumnDataDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ColumnData>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_INTS, intsMeta);
                                        put(FIELD_SHORTS, shortsMeta);
                                        put(FIELD_LONGS, longsMeta);
                                        put(FIELD_DOUBLES, doublesMeta);
                                        put(FIELD_DECIMALS, decimalsMeta);
                                        put(FIELD_STRINGS, stringsMeta);
                                        put(FIELD_BOOLEANS, booleansMeta);
                                        put(FIELD_BINARIES, binariesMeta);
                                        put(FIELD_DATES, datesMeta);
                                        put(FIELD_DURATIONS, durationsMeta);
                                        put(FIELD_TIMES, timesMeta);
                                        put(FIELD_DATETIMES, datetimesMeta);
                                        put(FIELD_UUIDS, uuidsMeta);
                                        put(FIELD_VOIDS, voidsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ColumnData>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_INTS:
                    return FIELD_INTS;
                case FIELD_ID_SHORTS:
                    return FIELD_SHORTS;
                case FIELD_ID_LONGS:
                    return FIELD_LONGS;
                case FIELD_ID_DOUBLES:
                    return FIELD_DOUBLES;
                case FIELD_ID_DECIMALS:
                    return FIELD_DECIMALS;
                case FIELD_ID_STRINGS:
                    return FIELD_STRINGS;
                case FIELD_ID_BOOLEANS:
                    return FIELD_BOOLEANS;
                case FIELD_ID_BINARIES:
                    return FIELD_BINARIES;
                case FIELD_ID_DATES:
                    return FIELD_DATES;
                case FIELD_ID_DURATIONS:
                    return FIELD_DURATIONS;
                case FIELD_ID_TIMES:
                    return FIELD_TIMES;
                case FIELD_ID_DATETIMES:
                    return FIELD_DATETIMES;
                case FIELD_ID_UUIDS:
                    return FIELD_UUIDS;
                case FIELD_ID_VOIDS:
                    return FIELD_VOIDS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.ColumnData{binaries:list<optional<binary;>>;booleans:list<optional<boolean;>>;dates:list<optional<date;>>;datetimes:list<optional<datetime;>>;decimals:list<optional<decimal;>>;doubles:list<optional<double;>>;durations:list<optional<duration;>>;ints:list<optional<int;>>;longs:list<optional<long;>>;shorts:list<optional<short;>>;strings:list<optional<string;>>;times:list<optional<time;>>;uuids:list<optional<uuid;>>;voids:list<optional<boolean;>>;}
            schemarise.alfa.runtime.model.ColumnData{binaries:list<optional<binary;>>;booleans:list<optional<boolean;>>;dates:list<optional<date;>>;datetimes:list<optional<datetime;>>;decimals:list<optional<decimal;>>;doubles:list<optional<double;>>;durations:list<optional<duration;>>;ints:list<optional<int;>>;longs:list<optional<long;>>;shorts:list<optional<short;>>;strings:list<optional<string;>>;times:list<optional<time;>>;uuids:list<optional<uuid;>>;voids:list<optional<boolean;>>;}
            */
            return "fa776d29:";
        }
    }
    // </editor-fold>

}
