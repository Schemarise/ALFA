// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface AllNamespaceSummary extends com.schemarise.alfa.runtime.Record {

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary> getNamespaces();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static AllNamespaceSummaryBuilder builder() {
        return new schemarise.alfa.runtime.model.AllNamespaceSummary
                ._AllNamespaceSummaryBuilderImpl();
    }

    public static AllNamespaceSummaryBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.AllNamespaceSummary
                                    .AllNamespaceSummaryDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.AllNamespaceSummary
                    ._AllNamespaceSummaryBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface AllNamespaceSummaryBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        AllNamespaceSummaryBuilder putNamespaces(
                java.lang.String k, schemarise.alfa.runtime.model.NamespaceSummary v);

        AllNamespaceSummaryBuilder putAllNamespaces(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                        all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                getNamespaces();

        AllNamespaceSummary build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _AllNamespaceSummaryBuilderImpl extends _AllNamespaceSummary__Base__
            implements AllNamespaceSummaryBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _AllNamespaceSummaryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _AllNamespaceSummaryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(1);
            __missingFields.set(0, 1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                    .INSTANCE;
        }

        private void createNamespaces() {
            this._namespaces = new java.util.LinkedHashMap<>();
        }

        public AllNamespaceSummaryBuilder putNamespaces(
                java.lang.String k, schemarise.alfa.runtime.model.NamespaceSummary v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Namespaces", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Namespaces", v);
            if (this._namespaces == null) createNamespaces();
            this._namespaces.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                            .FIELD_ID_NAMESPACES);
            return this;
        }

        public AllNamespaceSummaryBuilder putAllNamespaces(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Namespaces", all);
            if (this._namespaces == null) createNamespaces();
            this._namespaces.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                            .FIELD_ID_NAMESPACES);
            return this;
        }

        private AllNamespaceSummaryBuilder setNamespaces(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Namespaces", all);
            _namespaces = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                            .FIELD_ID_NAMESPACES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "namespaces":
                    setNamespaces(
                            (java.util.Map<
                                            java.lang.String,
                                            schemarise.alfa.runtime.model.NamespaceSummary>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public AllNamespaceSummary build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    1,
                    schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                            .INSTANCE);

            AllNamespaceSummary obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (AllNamespaceSummary)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AllNamespaceSummary
                                                                        .AllNamespaceSummaryDescriptor
                                                                        .INSTANCE
                                                                        ._namespacesSupplierInner1,
                                                                _namespaces));
            else
                obj =
                        new schemarise.alfa.runtime.model.AllNamespaceSummary
                                ._AllNamespaceSummaryConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AllNamespaceSummary
                                                .AllNamespaceSummaryDescriptor.INSTANCE
                                                ._namespacesSupplierInner1,
                                        _namespaces));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllNamespaceSummary",
                    new java.lang.String[] {"namespaces"},
                    new java.lang.Object[] {_namespaces});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _AllNamespaceSummaryConcrete extends _AllNamespaceSummary__Base__
            implements AllNamespaceSummary {

        private _AllNamespaceSummaryConcrete() {
            super();
        }

        private _AllNamespaceSummaryConcrete(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                        _namespaces) {
            super(_namespaces);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _AllNamespaceSummary__Base__ {
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                _namespaces;

        public _AllNamespaceSummary__Base__() {}

        public _AllNamespaceSummary__Base__(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                        _namespaces) {
            this._namespaces = _namespaces;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>
                getNamespaces() {
            return _namespaces;
        }

        public int hashCode() {
            return java.util.Objects.hash(_namespaces);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllNamespaceSummary",
                    new java.lang.String[] {"namespaces"},
                    new java.lang.Object[] {_namespaces});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.AllNamespaceSummary._AllNamespaceSummaryConcrete))
                return false;
            schemarise.alfa.runtime.model.AllNamespaceSummary._AllNamespaceSummaryConcrete rhs =
                    (schemarise.alfa.runtime.model.AllNamespaceSummary._AllNamespaceSummaryConcrete)
                            o;
            return java.util.Objects.equals(_namespaces, rhs._namespaces);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllNamespaceSummary.AllNamespaceSummaryDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "namespaces":
                    return _namespaces;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getNamespaces()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class AllNamespaceSummaryDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.AllNamespaceSummary";
        public static schemarise.alfa.runtime.model.AllNamespaceSummary
                        .AllNamespaceSummaryDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.AllNamespaceSummary
                                .AllNamespaceSummaryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAMESPACES = 0;
        public static final String FIELD_NAMESPACES = "namespaces";

        private schemarise.alfa.runtime.model.MapDataType _namespacesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.NamespaceSummary")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer map< string , schemarise.alfa.runtime.model.NamespaceSummary > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>>
                _namespacesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _namespacesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namespacesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.NamespaceSummary>
                                    _namespacesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namespacesType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _namespacesType),
                                    _namespacesConsumerInner2Key,
                                    _namespacesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllNamespaceSummary
                                ._AllNamespaceSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _namespacesConsumer =
                        (builder, supplier) -> {
                            builder.putAllNamespaces(_namespacesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , schemarise.alfa.runtime.model.NamespaceSummary > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.NamespaceSummary>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namespacesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _namespacesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namespacesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.NamespaceSummary,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _namespacesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namespacesType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _namespacesType),
                                    pInner1,
                                    _namespacesSupplierInner2Key,
                                    _namespacesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllNamespaceSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namespacesSupplier =
                        (p, consumer) -> {
                            _namespacesSupplierInner1.accept(p.getNamespaces(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                AllNamespaceSummary, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta namespacesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_namespacesSupplier),
                        java.util.Optional.of(_namespacesConsumer),
                        java.util.Optional.of(_namespacesSupplierInner1),
                        java.util.Optional.of(_namespacesConsumerInner1),
                        _namespacesType,
                        FIELD_NAMESPACES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public AllNamespaceSummaryBuilder builder() {
            return new schemarise.alfa.runtime.model.AllNamespaceSummary
                    ._AllNamespaceSummaryBuilderImpl();
        }

        @Override
        public AllNamespaceSummaryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.AllNamespaceSummary
                    ._AllNamespaceSummaryBuilderImpl(cc);
        }

        public AllNamespaceSummaryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllNamespaceSummary>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAMESPACES, namespacesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllNamespaceSummary>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAMESPACES:
                    return FIELD_NAMESPACES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.AllNamespaceSummary{namespaces:map<string,string>;}
            schemarise.alfa.runtime.model.AllNamespaceSummary{namespaces:map<string,string>;}
            */
            return "12207e05:";
        }
    }
    // </editor-fold>

}
