// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.path;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface MapEntry extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.path.PathElement getKey();

    schemarise.alfa.runtime.model.path.PathElement getValue();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static MapEntryBuilder builder() {
        return new schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl();
    }

    public static MapEntryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface MapEntryBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        MapEntryBuilder setKey(schemarise.alfa.runtime.model.path.PathElement v);

        schemarise.alfa.runtime.model.path.PathElement getKey();

        MapEntryBuilder setValue(schemarise.alfa.runtime.model.path.PathElement v);

        schemarise.alfa.runtime.model.path.PathElement getValue();

        MapEntry build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _MapEntryBuilderImpl extends _MapEntry__Base__ implements MapEntryBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _MapEntryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _MapEntryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor.INSTANCE;
        }

        public MapEntryBuilder setKey(schemarise.alfa.runtime.model.path.PathElement v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key", v);
            this._key = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor.FIELD_ID_KEY);
            return this;
        }

        public MapEntryBuilder setValue(schemarise.alfa.runtime.model.path.PathElement v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value", v);
            this._value = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor.FIELD_ID_VALUE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Key":
                    setKey((schemarise.alfa.runtime.model.path.PathElement) val);
                    break;
                case "Value":
                    setValue((schemarise.alfa.runtime.model.path.PathElement) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public MapEntry build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor.INSTANCE);

            MapEntry obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (MapEntry)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _key, _value);
            else
                obj =
                        new schemarise.alfa.runtime.model.path.MapEntry._MapEntryConcrete(
                                _key, _value);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.MapEntry",
                    new java.lang.String[] {"Key", "Value"},
                    new java.lang.Object[] {_key, _value});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _MapEntryConcrete extends _MapEntry__Base__ implements MapEntry {

        private _MapEntryConcrete() {
            super();
        }

        private _MapEntryConcrete(
                schemarise.alfa.runtime.model.path.PathElement _key,
                schemarise.alfa.runtime.model.path.PathElement _value) {
            super(_key, _value);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _MapEntry__Base__ {
        public schemarise.alfa.runtime.model.path.PathElement _key;
        public schemarise.alfa.runtime.model.path.PathElement _value;

        public _MapEntry__Base__() {}

        public _MapEntry__Base__(
                schemarise.alfa.runtime.model.path.PathElement _key,
                schemarise.alfa.runtime.model.path.PathElement _value) {
            this._key = _key;
            this._value = _value;
        }

        public schemarise.alfa.runtime.model.path.PathElement getKey() {
            return _key;
        }

        public schemarise.alfa.runtime.model.path.PathElement getValue() {
            return _value;
        }

        public int hashCode() {
            return java.util.Objects.hash(_key, _value);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.MapEntry",
                    new java.lang.String[] {"Key", "Value"},
                    new java.lang.Object[] {_key, _value});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.path.MapEntry._MapEntryConcrete))
                return false;
            schemarise.alfa.runtime.model.path.MapEntry._MapEntryConcrete rhs =
                    (schemarise.alfa.runtime.model.path.MapEntry._MapEntryConcrete) o;
            return java.util.Objects.equals(_key, rhs._key)
                    && java.util.Objects.equals(_value, rhs._value);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Key":
                    return _key;
                case "Value":
                    return _value;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getKey().validate(__builderConfig);
            getValue().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class MapEntryDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.path.MapEntry";
        public static schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.path.MapEntry.MapEntryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_KEY = 0;
        public static final String FIELD_KEY = "Key";

        public static final short FIELD_ID_VALUE = 1;
        public static final String FIELD_VALUE = "Value";

        private schemarise.alfa.runtime.model.UdtDataType _keyType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.path.PathElement")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _valueType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.path.PathElement")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.path.PathElement>
                _keyConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyConsumer =
                        (builder, supplier) -> {
                            builder.setKey(_keyConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.path.PathElement>
                _valueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _valueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _valueConsumer =
                        (builder, supplier) -> {
                            builder.setValue(_valueConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.MapEntry,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keySupplier =
                        (p, consumer) -> {
                            _keySupplierInner1.accept(p.getKey(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.path.PathElement -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _valueType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.MapEntry,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueSupplier =
                        (p, consumer) -> {
                            _valueSupplierInner1.accept(p.getValue(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                MapEntry, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta keyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keySupplier),
                        java.util.Optional.of(_keyConsumer),
                        java.util.Optional.of(_keySupplierInner1),
                        java.util.Optional.of(_keyConsumerInner1),
                        _keyType,
                        FIELD_KEY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta valueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_valueSupplier),
                        java.util.Optional.of(_valueConsumer),
                        java.util.Optional.of(_valueSupplierInner1),
                        java.util.Optional.of(_valueConsumerInner1),
                        _valueType,
                        FIELD_VALUE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public MapEntryBuilder builder() {
            return new schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl();
        }

        @Override
        public MapEntryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.path.MapEntry._MapEntryBuilderImpl(cc);
        }

        public MapEntryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<MapEntry>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_KEY, keyMeta);
                                        put(FIELD_VALUE, valueMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<MapEntry>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_KEY:
                    return FIELD_KEY;
                case FIELD_ID_VALUE:
                    return FIELD_VALUE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.path.MapEntry{Key:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];Value:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];}
            schemarise.alfa.runtime.model.path.MapEntry{Key:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];Value:schemarise.alfa.runtime.model.path.PathElement[fee75bcd];}
            */
            return "7120dd89:";
        }
    }
    // </editor-fold>

}
