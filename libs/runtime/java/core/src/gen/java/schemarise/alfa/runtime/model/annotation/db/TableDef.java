// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.annotation.db;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TableDef extends com.schemarise.alfa.runtime.Record {

    /** Underlying database table name override */
    java.util.Optional<java.lang.String> getName();

    /** Underlying database schema name */
    java.util.Optional<java.lang.String> getSchema();

    java.lang.String getPayloadColumnName();

    /** Schema layout approach */
    schemarise.alfa.runtime.model.annotation.db.StorageMode getStorageMode();

    /** Hint which fields are queryable, and possibly stored outside the JSON(B) */
    java.util.Set<java.lang.String> getQueryable();

    /** Indexes by set of fields */
    java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIndexes();

    java.util.Set<java.lang.String> getPartitionFields();

    java.util.Set<java.lang.String> getClusterFields();

    java.lang.String getPartitionExpression();

    java.util.Set<java.lang.String> getOptions();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TableDefBuilder builder() {
        return new schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl();
    }

    public static TableDefBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                                    .INSTANCE);
        else
            return new schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl(
                    bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TableDefBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TableDefBuilder setName(java.util.Optional<java.lang.String> v);

        TableDefBuilder setName(java.lang.String v);

        /** Underlying database table name override */
        java.util.Optional<java.lang.String> getName();

        TableDefBuilder setSchema(java.util.Optional<java.lang.String> v);

        TableDefBuilder setSchema(java.lang.String v);

        /** Underlying database schema name */
        java.util.Optional<java.lang.String> getSchema();

        TableDefBuilder setPayloadColumnName(java.lang.String v);

        java.lang.String getPayloadColumnName();

        TableDefBuilder setStorageMode(schemarise.alfa.runtime.model.annotation.db.StorageMode v);

        /** Schema layout approach */
        schemarise.alfa.runtime.model.annotation.db.StorageMode getStorageMode();

        TableDefBuilder addQueryable(java.lang.String e);

        TableDefBuilder addAllQueryable(java.util.Set<java.lang.String> all);

        /** Hint which fields are queryable, and possibly stored outside the JSON(B) */
        java.util.Set<java.lang.String> getQueryable();

        TableDefBuilder putIndexes(java.lang.String k, java.util.Set<java.lang.String> v);

        TableDefBuilder putAllIndexes(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all);

        /** Indexes by set of fields */
        java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIndexes();

        TableDefBuilder addPartitionFields(java.lang.String e);

        TableDefBuilder addAllPartitionFields(java.util.Set<java.lang.String> all);

        java.util.Set<java.lang.String> getPartitionFields();

        TableDefBuilder addClusterFields(java.lang.String e);

        TableDefBuilder addAllClusterFields(java.util.Set<java.lang.String> all);

        java.util.Set<java.lang.String> getClusterFields();

        TableDefBuilder setPartitionExpression(java.lang.String v);

        java.lang.String getPartitionExpression();

        TableDefBuilder addOptions(java.lang.String e);

        TableDefBuilder addAllOptions(java.util.Set<java.lang.String> all);

        java.util.Set<java.lang.String> getOptions();

        TableDef build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TableDefBuilderImpl extends _TableDef__Base__ implements TableDefBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TableDefBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TableDefBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(10);
            __missingFields.set(0, 10);
            setName(java.util.Optional.empty());
            setSchema(java.util.Optional.empty());
            setPayloadColumnName("__Payload");
            setStorageMode(schemarise.alfa.runtime.model.annotation.db.StorageMode.Composite);
            setQueryable(new java.util.LinkedHashSet<java.lang.String>());
            setIndexes(new java.util.HashMap<java.lang.String, java.util.Set<java.lang.String>>());
            setPartitionFields(new java.util.LinkedHashSet<java.lang.String>());
            setClusterFields(new java.util.LinkedHashSet<java.lang.String>());
            setPartitionExpression("");
            setOptions(new java.util.LinkedHashSet<java.lang.String>());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor.INSTANCE;
        }

        /** Underlying database table name override */
        public TableDefBuilder setName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_NAME);
            return this;
        }

        /** Underlying database table name override */
        public TableDefBuilder setName(java.lang.String v) {
            this._name = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_NAME);
            return this;
        }

        /** Underlying database schema name */
        public TableDefBuilder setSchema(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Schema", v);
            this._schema = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_SCHEMA);
            return this;
        }

        /** Underlying database schema name */
        public TableDefBuilder setSchema(java.lang.String v) {
            this._schema = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_SCHEMA);
            return this;
        }

        public TableDefBuilder setPayloadColumnName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PayloadColumnName", v);
            this._payloadColumnName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_PAYLOADCOLUMNNAME);
            return this;
        }

        /** Schema layout approach */
        public TableDefBuilder setStorageMode(
                schemarise.alfa.runtime.model.annotation.db.StorageMode v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("StorageMode", v);
            this._storageMode = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_STORAGEMODE);
            return this;
        }

        private void createQueryable() {
            this._queryable = new java.util.LinkedHashSet<>();
        }

        /** Hint which fields are queryable, and possibly stored outside the JSON(B) */
        public TableDefBuilder addQueryable(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Queryable", e);
            if (this._queryable == null) createQueryable();
            this._queryable.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_QUERYABLE);
            return this;
        }

        /** Hint which fields are queryable, and possibly stored outside the JSON(B) */
        public TableDefBuilder addAllQueryable(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Queryable", all);
            if (this._queryable == null) createQueryable();
            this._queryable.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_QUERYABLE);
            return this;
        }

        private TableDefBuilder setQueryable(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Queryable", all);
            this._queryable = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_QUERYABLE);
            return this;
        }

        private void createIndexes() {
            this._indexes = new java.util.LinkedHashMap<>();
        }

        /** Indexes by set of fields */
        public TableDefBuilder putIndexes(java.lang.String k, java.util.Set<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Indexes", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Indexes", v);
            if (this._indexes == null) createIndexes();
            this._indexes.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_INDEXES);
            return this;
        }

        /** Indexes by set of fields */
        public TableDefBuilder putAllIndexes(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Indexes", all);
            if (this._indexes == null) createIndexes();
            this._indexes.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_INDEXES);
            return this;
        }

        private TableDefBuilder setIndexes(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Indexes", all);
            _indexes = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_INDEXES);
            return this;
        }

        private void createPartitionFields() {
            this._partitionFields = new java.util.LinkedHashSet<>();
        }

        public TableDefBuilder addPartitionFields(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PartitionFields", e);
            if (this._partitionFields == null) createPartitionFields();
            this._partitionFields.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_PARTITIONFIELDS);
            return this;
        }

        public TableDefBuilder addAllPartitionFields(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PartitionFields", all);
            if (this._partitionFields == null) createPartitionFields();
            this._partitionFields.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_PARTITIONFIELDS);
            return this;
        }

        private TableDefBuilder setPartitionFields(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PartitionFields", all);
            this._partitionFields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_PARTITIONFIELDS);
            return this;
        }

        private void createClusterFields() {
            this._clusterFields = new java.util.LinkedHashSet<>();
        }

        public TableDefBuilder addClusterFields(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ClusterFields", e);
            if (this._clusterFields == null) createClusterFields();
            this._clusterFields.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_CLUSTERFIELDS);
            return this;
        }

        public TableDefBuilder addAllClusterFields(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ClusterFields", all);
            if (this._clusterFields == null) createClusterFields();
            this._clusterFields.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_CLUSTERFIELDS);
            return this;
        }

        private TableDefBuilder setClusterFields(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ClusterFields", all);
            this._clusterFields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_CLUSTERFIELDS);
            return this;
        }

        public TableDefBuilder setPartitionExpression(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PartitionExpression", v);
            this._partitionExpression = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_PARTITIONEXPRESSION);
            return this;
        }

        private void createOptions() {
            this._options = new java.util.LinkedHashSet<>();
        }

        public TableDefBuilder addOptions(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Options", e);
            if (this._options == null) createOptions();
            this._options.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_OPTIONS);
            return this;
        }

        public TableDefBuilder addAllOptions(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Options", all);
            if (this._options == null) createOptions();
            this._options.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_OPTIONS);
            return this;
        }

        private TableDefBuilder setOptions(java.util.Set<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Options", all);
            this._options = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .FIELD_ID_OPTIONS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Name":
                    setName((java.util.Optional<java.lang.String>) val);
                    break;
                case "Schema":
                    setSchema((java.util.Optional<java.lang.String>) val);
                    break;
                case "PayloadColumnName":
                    setPayloadColumnName((java.lang.String) val);
                    break;
                case "StorageMode":
                    setStorageMode((schemarise.alfa.runtime.model.annotation.db.StorageMode) val);
                    break;
                case "Queryable":
                    setQueryable((java.util.Set<java.lang.String>) val);
                    break;
                case "Indexes":
                    setIndexes(
                            (java.util.Map<java.lang.String, java.util.Set<java.lang.String>>) val);
                    break;
                case "PartitionFields":
                    setPartitionFields((java.util.Set<java.lang.String>) val);
                    break;
                case "ClusterFields":
                    setClusterFields((java.util.Set<java.lang.String>) val);
                    break;
                case "PartitionExpression":
                    setPartitionExpression((java.lang.String) val);
                    break;
                case "Options":
                    setOptions((java.util.Set<java.lang.String>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TableDef build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    10,
                    schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                            .INSTANCE);

            TableDef obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TableDef)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _name,
                                                _schema,
                                                _payloadColumnName,
                                                _storageMode,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .annotation.db.TableDef
                                                                        .TableDefDescriptor.INSTANCE
                                                                        ._queryableSupplierInner1,
                                                                _queryable),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .annotation.db.TableDef
                                                                        .TableDefDescriptor.INSTANCE
                                                                        ._indexesSupplierInner1,
                                                                _indexes),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .annotation.db.TableDef
                                                                        .TableDefDescriptor.INSTANCE
                                                                        ._partitionFieldsSupplierInner1,
                                                                _partitionFields),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .annotation.db.TableDef
                                                                        .TableDefDescriptor.INSTANCE
                                                                        ._clusterFieldsSupplierInner1,
                                                                _clusterFields),
                                                _partitionExpression,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .annotation.db.TableDef
                                                                        .TableDefDescriptor.INSTANCE
                                                                        ._optionsSupplierInner1,
                                                                _options));
            else
                obj =
                        new schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefConcrete(
                                _name,
                                _schema,
                                _payloadColumnName,
                                _storageMode,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.annotation.db.TableDef
                                                .TableDefDescriptor.INSTANCE
                                                ._queryableSupplierInner1,
                                        _queryable),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.annotation.db.TableDef
                                                .TableDefDescriptor.INSTANCE
                                                ._indexesSupplierInner1,
                                        _indexes),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.annotation.db.TableDef
                                                .TableDefDescriptor.INSTANCE
                                                ._partitionFieldsSupplierInner1,
                                        _partitionFields),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.annotation.db.TableDef
                                                .TableDefDescriptor.INSTANCE
                                                ._clusterFieldsSupplierInner1,
                                        _clusterFields),
                                _partitionExpression,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.annotation.db.TableDef
                                                .TableDefDescriptor.INSTANCE
                                                ._optionsSupplierInner1,
                                        _options));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.annotation.db.TableDef",
                    new java.lang.String[] {
                        "Name",
                        "Schema",
                        "PayloadColumnName",
                        "StorageMode",
                        "Queryable",
                        "Indexes",
                        "PartitionFields",
                        "ClusterFields",
                        "PartitionExpression",
                        "Options"
                    },
                    new java.lang.Object[] {
                        _name,
                        _schema,
                        _payloadColumnName,
                        _storageMode,
                        _queryable,
                        _indexes,
                        _partitionFields,
                        _clusterFields,
                        _partitionExpression,
                        _options
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TableDefConcrete extends _TableDef__Base__ implements TableDef {

        private _TableDefConcrete() {
            super();
        }

        private _TableDefConcrete(
                java.util.Optional<java.lang.String> _name,
                java.util.Optional<java.lang.String> _schema,
                java.lang.String _payloadColumnName,
                schemarise.alfa.runtime.model.annotation.db.StorageMode _storageMode,
                java.util.Set<java.lang.String> _queryable,
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _indexes,
                java.util.Set<java.lang.String> _partitionFields,
                java.util.Set<java.lang.String> _clusterFields,
                java.lang.String _partitionExpression,
                java.util.Set<java.lang.String> _options) {
            super(
                    _name,
                    _schema,
                    _payloadColumnName,
                    _storageMode,
                    _queryable,
                    _indexes,
                    _partitionFields,
                    _clusterFields,
                    _partitionExpression,
                    _options);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TableDef__Base__ {
        public java.util.Optional<java.lang.String> _name;
        public java.util.Optional<java.lang.String> _schema;
        public java.lang.String _payloadColumnName;
        public schemarise.alfa.runtime.model.annotation.db.StorageMode _storageMode;
        public java.util.Set<java.lang.String> _queryable;
        public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _indexes;
        public java.util.Set<java.lang.String> _partitionFields;
        public java.util.Set<java.lang.String> _clusterFields;
        public java.lang.String _partitionExpression;
        public java.util.Set<java.lang.String> _options;

        public _TableDef__Base__() {}

        public _TableDef__Base__(
                java.util.Optional<java.lang.String> _name,
                java.util.Optional<java.lang.String> _schema,
                java.lang.String _payloadColumnName,
                schemarise.alfa.runtime.model.annotation.db.StorageMode _storageMode,
                java.util.Set<java.lang.String> _queryable,
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _indexes,
                java.util.Set<java.lang.String> _partitionFields,
                java.util.Set<java.lang.String> _clusterFields,
                java.lang.String _partitionExpression,
                java.util.Set<java.lang.String> _options) {
            this._name = _name;
            this._schema = _schema;
            this._payloadColumnName = _payloadColumnName;
            this._storageMode = _storageMode;
            this._queryable = _queryable;
            this._indexes = _indexes;
            this._partitionFields = _partitionFields;
            this._clusterFields = _clusterFields;
            this._partitionExpression = _partitionExpression;
            this._options = _options;
        }

        public java.util.Optional<java.lang.String> getName() {
            return _name;
        }

        public java.util.Optional<java.lang.String> getSchema() {
            return _schema;
        }

        public java.lang.String getPayloadColumnName() {
            return _payloadColumnName;
        }

        public schemarise.alfa.runtime.model.annotation.db.StorageMode getStorageMode() {
            return _storageMode;
        }

        public java.util.Set<java.lang.String> getQueryable() {
            return _queryable;
        }

        public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIndexes() {
            return _indexes;
        }

        public java.util.Set<java.lang.String> getPartitionFields() {
            return _partitionFields;
        }

        public java.util.Set<java.lang.String> getClusterFields() {
            return _clusterFields;
        }

        public java.lang.String getPartitionExpression() {
            return _partitionExpression;
        }

        public java.util.Set<java.lang.String> getOptions() {
            return _options;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _name,
                    _schema,
                    _payloadColumnName,
                    _storageMode,
                    _queryable,
                    _indexes,
                    _partitionFields,
                    _clusterFields,
                    _partitionExpression,
                    _options);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.annotation.db.TableDef",
                    new java.lang.String[] {
                        "Name",
                        "Schema",
                        "PayloadColumnName",
                        "StorageMode",
                        "Queryable",
                        "Indexes",
                        "PartitionFields",
                        "ClusterFields",
                        "PartitionExpression",
                        "Options"
                    },
                    new java.lang.Object[] {
                        _name,
                        _schema,
                        _payloadColumnName,
                        _storageMode,
                        _queryable,
                        _indexes,
                        _partitionFields,
                        _clusterFields,
                        _partitionExpression,
                        _options
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefConcrete))
                return false;
            schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefConcrete rhs =
                    (schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefConcrete) o;
            return java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_schema, rhs._schema)
                    && java.util.Objects.equals(_payloadColumnName, rhs._payloadColumnName)
                    && java.util.Objects.equals(_storageMode, rhs._storageMode)
                    && java.util.Objects.equals(_queryable, rhs._queryable)
                    && java.util.Objects.equals(_indexes, rhs._indexes)
                    && java.util.Objects.equals(_partitionFields, rhs._partitionFields)
                    && java.util.Objects.equals(_clusterFields, rhs._clusterFields)
                    && java.util.Objects.equals(_partitionExpression, rhs._partitionExpression)
                    && java.util.Objects.equals(_options, rhs._options);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Name":
                    return _name;
                case "Schema":
                    return _schema;
                case "PayloadColumnName":
                    return _payloadColumnName;
                case "StorageMode":
                    return _storageMode;
                case "Queryable":
                    return _queryable;
                case "Indexes":
                    return _indexes;
                case "PartitionFields":
                    return _partitionFields;
                case "ClusterFields":
                    return _clusterFields;
                case "PartitionExpression":
                    return _partitionExpression;
                case "Options":
                    return _options;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getStorageMode().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TableDefDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.annotation.db.TableDef";
        public static schemarise.alfa.runtime.model.annotation.db.TableDef.TableDefDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.annotation.db.TableDef
                                .TableDefDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAME = 0;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_SCHEMA = 1;
        public static final String FIELD_SCHEMA = "Schema";

        public static final short FIELD_ID_PAYLOADCOLUMNNAME = 2;
        public static final String FIELD_PAYLOADCOLUMNNAME = "PayloadColumnName";

        public static final short FIELD_ID_STORAGEMODE = 3;
        public static final String FIELD_STORAGEMODE = "StorageMode";

        public static final short FIELD_ID_QUERYABLE = 4;
        public static final String FIELD_QUERYABLE = "Queryable";

        public static final short FIELD_ID_INDEXES = 5;
        public static final String FIELD_INDEXES = "Indexes";

        public static final short FIELD_ID_PARTITIONFIELDS = 6;
        public static final String FIELD_PARTITIONFIELDS = "PartitionFields";

        public static final short FIELD_ID_CLUSTERFIELDS = 7;
        public static final String FIELD_CLUSTERFIELDS = "ClusterFields";

        public static final short FIELD_ID_PARTITIONEXPRESSION = 8;
        public static final String FIELD_PARTITIONEXPRESSION = "PartitionExpression";

        public static final short FIELD_ID_OPTIONS = 9;
        public static final String FIELD_OPTIONS = "Options";

        private schemarise.alfa.runtime.model.OptionalDataType _nameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _schemaType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _payloadColumnNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _storageModeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName(
                                "schemarise.alfa.runtime.model.annotation.db.StorageMode")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _queryableType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _indexesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setKeyName(java.util.Optional.of("name"))
                        .setValueType(
                                schemarise.alfa.runtime.model.SetDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .setValueName(java.util.Optional.of("cols"))
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _partitionFieldsType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _clusterFieldsType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _partitionExpressionType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _optionsType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _nameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _nameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _nameType),
                                    _nameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _schemaConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _schemaConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _schemaType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _schemaType),
                                    _schemaConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _schemaConsumer =
                        (builder, supplier) -> {
                            builder.setSchema(_schemaConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _payloadColumnNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _payloadColumnNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _payloadColumnNameConsumer =
                        (builder, supplier) -> {
                            builder.setPayloadColumnName(
                                    _payloadColumnNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.annotation.db.StorageMode -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.annotation.db.StorageMode>
                _storageModeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _storageModeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _storageModeConsumer =
                        (builder, supplier) -> {
                            builder.setStorageMode(_storageModeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Set<java.lang.String>>
                _queryableConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _queryableConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _queryableType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _queryableType),
                                    _queryableConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _queryableConsumer =
                        (builder, supplier) -> {
                            builder.addAllQueryable(_queryableConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< name : string , cols : set< string > > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>
                _indexesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _indexesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _indexesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Set<java.lang.String>>
                                    _indexesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _indexesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .SetDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _indexesType)
                                                                                                                    .getValueType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.setValue(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _indexesType)
                                                                        .getValueType()),
                                                        _indexesConsumerInner3);
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _indexesType),
                                    _indexesConsumerInner2Key,
                                    _indexesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _indexesConsumer =
                        (builder, supplier) -> {
                            builder.putAllIndexes(_indexesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Set<java.lang.String>>
                _partitionFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _partitionFieldsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _partitionFieldsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _partitionFieldsType),
                                    _partitionFieldsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _partitionFieldsConsumer =
                        (builder, supplier) -> {
                            builder.addAllPartitionFields(
                                    _partitionFieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Set<java.lang.String>>
                _clusterFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _clusterFieldsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _clusterFieldsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _clusterFieldsType),
                                    _clusterFieldsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _clusterFieldsConsumer =
                        (builder, supplier) -> {
                            builder.addAllClusterFields(
                                    _clusterFieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _partitionExpressionConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _partitionExpressionType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _partitionExpressionConsumer =
                        (builder, supplier) -> {
                            builder.setPartitionExpression(
                                    _partitionExpressionConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Set<java.lang.String>>
                _optionsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _optionsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _optionsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _optionsType),
                                    _optionsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _optionsConsumer =
                        (builder, supplier) -> {
                            builder.addAllOptions(_optionsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _nameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _nameType),
                                    pInner1,
                                    _nameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _schemaSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _schemaSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _schemaType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _schemaType),
                                    pInner1,
                                    _schemaSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _schemaSupplier =
                        (p, consumer) -> {
                            _schemaSupplierInner1.accept(p.getSchema(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _payloadColumnNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _payloadColumnNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _payloadColumnNameSupplier =
                        (p, consumer) -> {
                            _payloadColumnNameSupplierInner1.accept(
                                    p.getPayloadColumnName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.annotation.db.StorageMode -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.StorageMode,
                        com.schemarise.alfa.runtime.DataConsumer>
                _storageModeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _storageModeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _storageModeSupplier =
                        (p, consumer) -> {
                            _storageModeSupplierInner1.accept(p.getStorageMode(), consumer);
                        };
        /* -- Supplier set< string > -- */
        java.util.function.BiConsumer<
                        java.util.Set<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _queryableSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _queryableSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _queryableType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _queryableType),
                                    pInner1,
                                    _queryableSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _queryableSupplier =
                        (p, consumer) -> {
                            _queryableSupplierInner1.accept(p.getQueryable(), consumer);
                        };
        /* -- Supplier map< name : string , cols : set< string > > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, java.util.Set<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _indexesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _indexesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _indexesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            java.util.Set<java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _indexesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _indexesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .SetDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _indexesType)
                                                                                                            .getValueType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _indexesType)
                                                                        .getValueType()),
                                                        pInner2,
                                                        _indexesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _indexesType),
                                    pInner1,
                                    _indexesSupplierInner2Key,
                                    _indexesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _indexesSupplier =
                        (p, consumer) -> {
                            _indexesSupplierInner1.accept(p.getIndexes(), consumer);
                        };
        /* -- Supplier set< string > -- */
        java.util.function.BiConsumer<
                        java.util.Set<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _partitionFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _partitionFieldsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _partitionFieldsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _partitionFieldsType),
                                    pInner1,
                                    _partitionFieldsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _partitionFieldsSupplier =
                        (p, consumer) -> {
                            _partitionFieldsSupplierInner1.accept(p.getPartitionFields(), consumer);
                        };
        /* -- Supplier set< string > -- */
        java.util.function.BiConsumer<
                        java.util.Set<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _clusterFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _clusterFieldsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _clusterFieldsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _clusterFieldsType),
                                    pInner1,
                                    _clusterFieldsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _clusterFieldsSupplier =
                        (p, consumer) -> {
                            _clusterFieldsSupplierInner1.accept(p.getClusterFields(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _partitionExpressionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _partitionExpressionType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _partitionExpressionSupplier =
                        (p, consumer) -> {
                            _partitionExpressionSupplierInner1.accept(
                                    p.getPartitionExpression(), consumer);
                        };
        /* -- Supplier set< string > -- */
        java.util.function.BiConsumer<
                        java.util.Set<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _optionsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _optionsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _optionsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _optionsType),
                                    pInner1,
                                    _optionsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.annotation.db.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _optionsSupplier =
                        (p, consumer) -> {
                            _optionsSupplierInner1.accept(p.getOptions(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TableDef, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta schemaMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_schemaSupplier),
                        java.util.Optional.of(_schemaConsumer),
                        java.util.Optional.of(_schemaSupplierInner1),
                        java.util.Optional.of(_schemaConsumerInner1),
                        _schemaType,
                        FIELD_SCHEMA,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta payloadColumnNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_payloadColumnNameSupplier),
                        java.util.Optional.of(_payloadColumnNameConsumer),
                        java.util.Optional.of(_payloadColumnNameSupplierInner1),
                        java.util.Optional.of(_payloadColumnNameConsumerInner1),
                        _payloadColumnNameType,
                        FIELD_PAYLOADCOLUMNNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta storageModeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_storageModeSupplier),
                        java.util.Optional.of(_storageModeConsumer),
                        java.util.Optional.of(_storageModeSupplierInner1),
                        java.util.Optional.of(_storageModeConsumerInner1),
                        _storageModeType,
                        FIELD_STORAGEMODE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta queryableMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_queryableSupplier),
                        java.util.Optional.of(_queryableConsumer),
                        java.util.Optional.of(_queryableSupplierInner1),
                        java.util.Optional.of(_queryableConsumerInner1),
                        _queryableType,
                        FIELD_QUERYABLE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta indexesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_indexesSupplier),
                        java.util.Optional.of(_indexesConsumer),
                        java.util.Optional.of(_indexesSupplierInner1),
                        java.util.Optional.of(_indexesConsumerInner1),
                        _indexesType,
                        FIELD_INDEXES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta partitionFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_partitionFieldsSupplier),
                        java.util.Optional.of(_partitionFieldsConsumer),
                        java.util.Optional.of(_partitionFieldsSupplierInner1),
                        java.util.Optional.of(_partitionFieldsConsumerInner1),
                        _partitionFieldsType,
                        FIELD_PARTITIONFIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta clusterFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_clusterFieldsSupplier),
                        java.util.Optional.of(_clusterFieldsConsumer),
                        java.util.Optional.of(_clusterFieldsSupplierInner1),
                        java.util.Optional.of(_clusterFieldsConsumerInner1),
                        _clusterFieldsType,
                        FIELD_CLUSTERFIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta partitionExpressionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_partitionExpressionSupplier),
                        java.util.Optional.of(_partitionExpressionConsumer),
                        java.util.Optional.of(_partitionExpressionSupplierInner1),
                        java.util.Optional.of(_partitionExpressionConsumerInner1),
                        _partitionExpressionType,
                        FIELD_PARTITIONEXPRESSION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta optionsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_optionsSupplier),
                        java.util.Optional.of(_optionsConsumer),
                        java.util.Optional.of(_optionsSupplierInner1),
                        java.util.Optional.of(_optionsConsumerInner1),
                        _optionsType,
                        FIELD_OPTIONS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TableDefBuilder builder() {
            return new schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl();
        }

        @Override
        public TableDefBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.annotation.db.TableDef._TableDefBuilderImpl(
                    cc);
        }

        public TableDefDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TableDef>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_SCHEMA, schemaMeta);
                                        put(FIELD_PAYLOADCOLUMNNAME, payloadColumnNameMeta);
                                        put(FIELD_STORAGEMODE, storageModeMeta);
                                        put(FIELD_QUERYABLE, queryableMeta);
                                        put(FIELD_INDEXES, indexesMeta);
                                        put(FIELD_PARTITIONFIELDS, partitionFieldsMeta);
                                        put(FIELD_CLUSTERFIELDS, clusterFieldsMeta);
                                        put(FIELD_PARTITIONEXPRESSION, partitionExpressionMeta);
                                        put(FIELD_OPTIONS, optionsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TableDef>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_SCHEMA:
                    return FIELD_SCHEMA;
                case FIELD_ID_PAYLOADCOLUMNNAME:
                    return FIELD_PAYLOADCOLUMNNAME;
                case FIELD_ID_STORAGEMODE:
                    return FIELD_STORAGEMODE;
                case FIELD_ID_QUERYABLE:
                    return FIELD_QUERYABLE;
                case FIELD_ID_INDEXES:
                    return FIELD_INDEXES;
                case FIELD_ID_PARTITIONFIELDS:
                    return FIELD_PARTITIONFIELDS;
                case FIELD_ID_CLUSTERFIELDS:
                    return FIELD_CLUSTERFIELDS;
                case FIELD_ID_PARTITIONEXPRESSION:
                    return FIELD_PARTITIONEXPRESSION;
                case FIELD_ID_OPTIONS:
                    return FIELD_OPTIONS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.annotation.db.TableDef{ClusterFields:set<string>={  };Indexes:map<string,string>={  };Name:optional<string;>;Options:set<string>={  };PartitionExpression:string="";PartitionFields:set<string>={  };PayloadColumnName:string="__Payload";Queryable:set<string>={  };Schema:optional<string;>;StorageMode:schemarise.alfa.runtime.model.annotation.db.StorageMode[691f6b3c]=schemarise.alfa.runtime.model.annotation.db.StorageMode.Composite;}
            schemarise.alfa.runtime.model.annotation.db.TableDef{}
            */
            return "568d3ba8:e62f4a78";
        }
    }
    // </editor-fold>

}
