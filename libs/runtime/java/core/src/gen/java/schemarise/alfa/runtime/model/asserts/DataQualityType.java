// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.asserts;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public enum DataQualityType implements com.schemarise.alfa.runtime.Enum {
    Accuracy("Accuracy", java.util.Optional.empty()),
    Completeness("Completeness", java.util.Optional.empty()),
    Conformity("Conformity", java.util.Optional.empty()),
    Consistency("Consistency", java.util.Optional.empty()),
    Coverage("Coverage", java.util.Optional.empty()),
    Integrity("Integrity", java.util.Optional.empty()),
    Provenance("Provenance", java.util.Optional.empty()),
    Timeliness("Timeliness", java.util.Optional.empty()),
    Uniqueness("Uniqueness", java.util.Optional.empty()),
    Validity("Validity", java.util.Optional.empty()),
    Unclassified("Unclassified", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, DataQualityType> mappings;

    DataQualityType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static DataQualityType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, DataQualityType> m = new java.util.HashMap<>();
            for (DataQualityType c : DataQualityType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.asserts.DataQualityType.DataQualityTypeDescriptor
                .INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DataQualityTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.asserts.DataQualityType";
        public static schemarise.alfa.runtime.model.asserts.DataQualityType
                        .DataQualityTypeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.asserts.DataQualityType
                                .DataQualityTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ACCURACY = 0;
        public static final String FIELD_ACCURACY = "Accuracy";

        public static final short FIELD_ID_COMPLETENESS = 1;
        public static final String FIELD_COMPLETENESS = "Completeness";

        public static final short FIELD_ID_CONFORMITY = 2;
        public static final String FIELD_CONFORMITY = "Conformity";

        public static final short FIELD_ID_CONSISTENCY = 3;
        public static final String FIELD_CONSISTENCY = "Consistency";

        public static final short FIELD_ID_COVERAGE = 4;
        public static final String FIELD_COVERAGE = "Coverage";

        public static final short FIELD_ID_INTEGRITY = 5;
        public static final String FIELD_INTEGRITY = "Integrity";

        public static final short FIELD_ID_PROVENANCE = 6;
        public static final String FIELD_PROVENANCE = "Provenance";

        public static final short FIELD_ID_TIMELINESS = 7;
        public static final String FIELD_TIMELINESS = "Timeliness";

        public static final short FIELD_ID_UNIQUENESS = 8;
        public static final String FIELD_UNIQUENESS = "Uniqueness";

        public static final short FIELD_ID_VALIDITY = 9;
        public static final String FIELD_VALIDITY = "Validity";

        public static final short FIELD_ID_UNCLASSIFIED = 10;
        public static final String FIELD_UNCLASSIFIED = "Unclassified";

        private schemarise.alfa.runtime.model.ScalarDataType _accuracyType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _completenessType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _conformityType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _consistencyType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _coverageType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _integrityType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _provenanceType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _timelinessType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _uniquenessType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _validityType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _unclassifiedType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<DataQualityType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta accuracyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _accuracyType,
                        FIELD_ACCURACY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta completenessMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _completenessType,
                        FIELD_COMPLETENESS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta conformityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _conformityType,
                        FIELD_CONFORMITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta consistencyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _consistencyType,
                        FIELD_CONSISTENCY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta coverageMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _coverageType,
                        FIELD_COVERAGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta integrityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _integrityType,
                        FIELD_INTEGRITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta provenanceMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _provenanceType,
                        FIELD_PROVENANCE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta timelinessMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _timelinessType,
                        FIELD_TIMELINESS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta uniquenessMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _uniquenessType,
                        FIELD_UNIQUENESS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta validityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _validityType,
                        FIELD_VALIDITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta unclassifiedMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _unclassifiedType,
                        FIELD_UNCLASSIFIED,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public DataQualityTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DataQualityType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ACCURACY, accuracyMeta);
                                        put(FIELD_COMPLETENESS, completenessMeta);
                                        put(FIELD_CONFORMITY, conformityMeta);
                                        put(FIELD_CONSISTENCY, consistencyMeta);
                                        put(FIELD_COVERAGE, coverageMeta);
                                        put(FIELD_INTEGRITY, integrityMeta);
                                        put(FIELD_PROVENANCE, provenanceMeta);
                                        put(FIELD_TIMELINESS, timelinessMeta);
                                        put(FIELD_UNIQUENESS, uniquenessMeta);
                                        put(FIELD_VALIDITY, validityMeta);
                                        put(FIELD_UNCLASSIFIED, unclassifiedMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DataQualityType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ACCURACY:
                    return FIELD_ACCURACY;
                case FIELD_ID_COMPLETENESS:
                    return FIELD_COMPLETENESS;
                case FIELD_ID_CONFORMITY:
                    return FIELD_CONFORMITY;
                case FIELD_ID_CONSISTENCY:
                    return FIELD_CONSISTENCY;
                case FIELD_ID_COVERAGE:
                    return FIELD_COVERAGE;
                case FIELD_ID_INTEGRITY:
                    return FIELD_INTEGRITY;
                case FIELD_ID_PROVENANCE:
                    return FIELD_PROVENANCE;
                case FIELD_ID_TIMELINESS:
                    return FIELD_TIMELINESS;
                case FIELD_ID_UNIQUENESS:
                    return FIELD_UNIQUENESS;
                case FIELD_ID_VALIDITY:
                    return FIELD_VALIDITY;
                case FIELD_ID_UNCLASSIFIED:
                    return FIELD_UNCLASSIFIED;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.asserts.DataQualityType{Accuracy,Completeness,Conformity,Consistency,Coverage,Integrity,Provenance,Timeliness,Uniqueness,Validity,Unclassified}
            schemarise.alfa.runtime.model.asserts.DataQualityType{Accuracy,Completeness,Conformity,Consistency,Coverage,Integrity,Provenance,Timeliness,Uniqueness,Validity,Unclassified}
            */
            return "2812750d:";
        }
    }
    // </editor-fold>
}
