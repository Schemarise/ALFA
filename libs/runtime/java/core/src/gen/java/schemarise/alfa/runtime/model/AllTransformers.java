// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface AllTransformers extends com.schemarise.alfa.runtime.Record {

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature> getNames();

    java.util.Map<
                    java.lang.String,
                    java.util.Map<
                            java.lang.String, schemarise.alfa.runtime.model.UdtTransformUsageType>>
            getUdtUsages();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static AllTransformersBuilder builder() {
        return new schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl();
    }

    public static AllTransformersBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                                    .INSTANCE);
        else
            return new schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl(
                    bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface AllTransformersBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        AllTransformersBuilder putNames(
                java.lang.String k, schemarise.alfa.runtime.model.MethodSignature v);

        AllTransformersBuilder putAllNames(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature> getNames();

        AllTransformersBuilder putUdtUsages(
                java.lang.String k,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.UdtTransformUsageType>
                        v);

        AllTransformersBuilder putAllUdtUsages(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>
                        all);

        java.util.Map<
                        java.lang.String,
                        java.util.Map<
                                java.lang.String,
                                schemarise.alfa.runtime.model.UdtTransformUsageType>>
                getUdtUsages();

        AllTransformers build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _AllTransformersBuilderImpl extends _AllTransformers__Base__
            implements AllTransformersBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _AllTransformersBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _AllTransformersBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor.INSTANCE;
        }

        private void createNames() {
            this._names = new java.util.LinkedHashMap<>();
        }

        public AllTransformersBuilder putNames(
                java.lang.String k, schemarise.alfa.runtime.model.MethodSignature v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Names", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Names", v);
            if (this._names == null) createNames();
            this._names.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_NAMES);
            return this;
        }

        public AllTransformersBuilder putAllNames(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Names", all);
            if (this._names == null) createNames();
            this._names.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_NAMES);
            return this;
        }

        private AllTransformersBuilder setNames(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Names", all);
            _names = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_NAMES);
            return this;
        }

        private void createUdtUsages() {
            this._udtUsages = new java.util.LinkedHashMap<>();
        }

        public AllTransformersBuilder putUdtUsages(
                java.lang.String k,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.UdtTransformUsageType>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key UdtUsages", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value UdtUsages", v);
            if (this._udtUsages == null) createUdtUsages();
            this._udtUsages.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        public AllTransformersBuilder putAllUdtUsages(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtUsages", all);
            if (this._udtUsages == null) createUdtUsages();
            this._udtUsages.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        private AllTransformersBuilder setUdtUsages(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtUsages", all);
            _udtUsages = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .FIELD_ID_UDTUSAGES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Names":
                    setNames(
                            (java.util.Map<
                                            java.lang.String,
                                            schemarise.alfa.runtime.model.MethodSignature>)
                                    val);
                    break;
                case "UdtUsages":
                    setUdtUsages(
                            (java.util.Map<
                                            java.lang.String,
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model
                                                            .UdtTransformUsageType>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public AllTransformers build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                            .INSTANCE);

            AllTransformers obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (AllTransformers)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AllTransformers
                                                                        .AllTransformersDescriptor
                                                                        .INSTANCE
                                                                        ._namesSupplierInner1,
                                                                _names),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AllTransformers
                                                                        .AllTransformersDescriptor
                                                                        .INSTANCE
                                                                        ._udtUsagesSupplierInner1,
                                                                _udtUsages));
            else
                obj =
                        new schemarise.alfa.runtime.model.AllTransformers._AllTransformersConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AllTransformers
                                                .AllTransformersDescriptor.INSTANCE
                                                ._namesSupplierInner1,
                                        _names),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AllTransformers
                                                .AllTransformersDescriptor.INSTANCE
                                                ._udtUsagesSupplierInner1,
                                        _udtUsages));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllTransformers",
                    new java.lang.String[] {"Names", "UdtUsages"},
                    new java.lang.Object[] {_names, _udtUsages});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _AllTransformersConcrete extends _AllTransformers__Base__
            implements AllTransformers {

        private _AllTransformersConcrete() {
            super();
        }

        private _AllTransformersConcrete(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                        _names,
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>
                        _udtUsages) {
            super(_names, _udtUsages);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _AllTransformers__Base__ {
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                _names;
        public java.util.Map<
                        java.lang.String,
                        java.util.Map<
                                java.lang.String,
                                schemarise.alfa.runtime.model.UdtTransformUsageType>>
                _udtUsages;

        public _AllTransformers__Base__() {}

        public _AllTransformers__Base__(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                        _names,
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>
                        _udtUsages) {
            this._names = _names;
            this._udtUsages = _udtUsages;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.MethodSignature>
                getNames() {
            return _names;
        }

        public java.util.Map<
                        java.lang.String,
                        java.util.Map<
                                java.lang.String,
                                schemarise.alfa.runtime.model.UdtTransformUsageType>>
                getUdtUsages() {
            return _udtUsages;
        }

        public int hashCode() {
            return java.util.Objects.hash(_names, _udtUsages);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllTransformers",
                    new java.lang.String[] {"Names", "UdtUsages"},
                    new java.lang.Object[] {_names, _udtUsages});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.AllTransformers._AllTransformersConcrete))
                return false;
            schemarise.alfa.runtime.model.AllTransformers._AllTransformersConcrete rhs =
                    (schemarise.alfa.runtime.model.AllTransformers._AllTransformersConcrete) o;
            return java.util.Objects.equals(_names, rhs._names)
                    && java.util.Objects.equals(_udtUsages, rhs._udtUsages);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Names":
                    return _names;
                case "UdtUsages":
                    return _udtUsages;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getNames()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            getUdtUsages()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue()
                                        .entrySet()
                                        .stream()
                                        .filter(e1 -> e1.getValue() != null)
                                        .forEach(
                                                e1 -> {
                                                    e1.getValue().validate(__builderConfig);
                                                });
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class AllTransformersDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.AllTransformers";
        public static schemarise.alfa.runtime.model.AllTransformers.AllTransformersDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.AllTransformers
                                .AllTransformersDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAMES = 0;
        public static final String FIELD_NAMES = "Names";

        public static final short FIELD_ID_UDTUSAGES = 1;
        public static final String FIELD_UDTUSAGES = "UdtUsages";

        private schemarise.alfa.runtime.model.MapDataType _namesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setKeyName(java.util.Optional.of("TransformName"))
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.MethodSignature")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _udtUsagesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("TransformName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.UdtTransformUsageType")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .enumType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer map< TransformName : string , schemarise.alfa.runtime.model.MethodSignature > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.MethodSignature>>
                _namesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _namesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.MethodSignature>
                                    _namesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namesType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _namesType),
                                    _namesConsumerInner2Key,
                                    _namesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _namesConsumer =
                        (builder, supplier) -> {
                            builder.putAllNames(_namesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , map< TransformName : string , schemarise.alfa.runtime.model.UdtTransformUsageType > > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>>
                _udtUsagesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _udtUsagesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _udtUsagesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model
                                                            .UdtTransformUsageType>>
                                    _udtUsagesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _udtUsagesConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _udtUsagesType)
                                                                                                                    .getValueType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .UdtTransformUsageType>
                                                        _udtUsagesConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _udtUsagesType)
                                                                                                                    .getValueType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _udtUsagesType)
                                                                        .getValueType()),
                                                        _udtUsagesConsumerInner3Key,
                                                        _udtUsagesConsumerInner3Val);
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _udtUsagesType),
                                    _udtUsagesConsumerInner2Key,
                                    _udtUsagesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtUsagesConsumer =
                        (builder, supplier) -> {
                            builder.putAllUdtUsages(_udtUsagesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< TransformName : string , schemarise.alfa.runtime.model.MethodSignature > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.MethodSignature>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _namesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.MethodSignature,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _namesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _namesType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _namesType),
                                    pInner1,
                                    _namesSupplierInner2Key,
                                    _namesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTransformers,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namesSupplier =
                        (p, consumer) -> {
                            _namesSupplierInner1.accept(p.getNames(), consumer);
                        };
        /* -- Supplier map< string , map< TransformName : string , schemarise.alfa.runtime.model.UdtTransformUsageType > > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.UdtTransformUsageType>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtUsagesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _udtUsagesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _udtUsagesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.model
                                                            .UdtTransformUsageType>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _udtUsagesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _udtUsagesSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _udtUsagesType)
                                                                                                            .getValueType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .UdtTransformUsageType,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _udtUsagesSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _udtUsagesType)
                                                                                                            .getValueType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _udtUsagesType)
                                                                        .getValueType()),
                                                        pInner2,
                                                        _udtUsagesSupplierInner3Key,
                                                        _udtUsagesSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _udtUsagesType),
                                    pInner1,
                                    _udtUsagesSupplierInner2Key,
                                    _udtUsagesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTransformers,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtUsagesSupplier =
                        (p, consumer) -> {
                            _udtUsagesSupplierInner1.accept(p.getUdtUsages(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                AllTransformers, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta namesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_namesSupplier),
                        java.util.Optional.of(_namesConsumer),
                        java.util.Optional.of(_namesSupplierInner1),
                        java.util.Optional.of(_namesConsumerInner1),
                        _namesType,
                        FIELD_NAMES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtUsagesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtUsagesSupplier),
                        java.util.Optional.of(_udtUsagesConsumer),
                        java.util.Optional.of(_udtUsagesSupplierInner1),
                        java.util.Optional.of(_udtUsagesConsumerInner1),
                        _udtUsagesType,
                        FIELD_UDTUSAGES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public AllTransformersBuilder builder() {
            return new schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl();
        }

        @Override
        public AllTransformersBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.AllTransformers._AllTransformersBuilderImpl(
                    cc);
        }

        public AllTransformersDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllTransformers>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAMES, namesMeta);
                                        put(FIELD_UDTUSAGES, udtUsagesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllTransformers>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAMES:
                    return FIELD_NAMES;
                case FIELD_ID_UDTUSAGES:
                    return FIELD_UDTUSAGES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.AllTransformers{Names:map<string,string>;UdtUsages:map<string,string>;}
            schemarise.alfa.runtime.model.AllTransformers{Names:map<string,string>;UdtUsages:map<string,string>;}
            */
            return "610cc86e:";
        }
    }
    // </editor-fold>

}
