// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.asserts;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ValidationReportKey extends com.schemarise.alfa.runtime.Key {

    java.util.UUID getId();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ValidationReportKeyBuilder builder() {
        return new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                ._ValidationReportKeyBuilderImpl();
    }

    public static ValidationReportKeyBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.asserts.ValidationReportKey
                                    .ValidationReportKeyDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                    ._ValidationReportKeyBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ValidationReportKeyBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        ValidationReportKeyBuilder setId(java.util.UUID v);

        java.util.UUID getId();

        ValidationReportKey build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ValidationReportKeyBuilderImpl extends _ValidationReportKey__Base__
            implements ValidationReportKeyBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ValidationReportKeyBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ValidationReportKeyBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(1);
            __missingFields.set(0, 1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationReportKey
                    .ValidationReportKeyDescriptor.INSTANCE;
        }

        public ValidationReportKeyBuilder setId(java.util.UUID v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Id", v);
            this._id = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReportKey
                            .ValidationReportKeyDescriptor.FIELD_ID_ID);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Id":
                    setId((java.util.UUID) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ValidationReportKey build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    1,
                    schemarise.alfa.runtime.model.asserts.ValidationReportKey
                            .ValidationReportKeyDescriptor.INSTANCE);

            ValidationReportKey obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ValidationReportKey)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _id);
            else
                obj =
                        new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                                ._ValidationReportKeyConcrete(_id);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationReportKey",
                    new java.lang.String[] {"Id"},
                    new java.lang.Object[] {_id});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ValidationReportKeyConcrete extends _ValidationReportKey__Base__
            implements ValidationReportKey {

        private _ValidationReportKeyConcrete() {
            super();
        }

        private _ValidationReportKeyConcrete(java.util.UUID _id) {
            super(_id);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ValidationReportKey__Base__ {
        public java.util.UUID _id;

        public _ValidationReportKey__Base__() {}

        public _ValidationReportKey__Base__(java.util.UUID _id) {
            this._id = _id;
        }

        public java.util.UUID getId() {
            return _id;
        }

        public int hashCode() {
            return java.util.Objects.hash(_id);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationReportKey",
                    new java.lang.String[] {"Id"},
                    new java.lang.Object[] {_id});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.asserts.ValidationReportKey
                            ._ValidationReportKeyConcrete)) return false;
            schemarise.alfa.runtime.model.asserts.ValidationReportKey._ValidationReportKeyConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.asserts.ValidationReportKey
                                            ._ValidationReportKeyConcrete)
                                    o;
            return java.util.Objects.equals(_id, rhs._id);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationReportKey
                    .ValidationReportKeyDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Id":
                    return _id;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ValidationReportKeyDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.asserts.ValidationReportKey";
        public static schemarise.alfa.runtime.model.asserts.ValidationReportKey
                        .ValidationReportKeyDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                                .ValidationReportKeyDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.keyType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ID = 0;
        public static final String FIELD_ID = "Id";

        private schemarise.alfa.runtime.model.ScalarDataType _idType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.uuidType)
                        .build();

        /* -- Consumer uuid -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.util.UUID>
                _idConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.uuidValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _idType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReportKey
                                ._ValidationReportKeyBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _idConsumer =
                        (builder, supplier) -> {
                            builder.setId(_idConsumerInner1.apply(supplier));
                        };

        /* -- Supplier uuid -- */
        java.util.function.BiConsumer<java.util.UUID, com.schemarise.alfa.runtime.DataConsumer>
                _idSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _idType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReportKey,
                        com.schemarise.alfa.runtime.DataConsumer>
                _idSupplier =
                        (p, consumer) -> {
                            _idSupplierInner1.accept(p.getId(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ValidationReportKey, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta idMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_idSupplier),
                        java.util.Optional.of(_idConsumer),
                        java.util.Optional.of(_idSupplierInner1),
                        java.util.Optional.of(_idConsumerInner1),
                        _idType,
                        FIELD_ID,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ValidationReportKeyBuilder builder() {
            return new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                    ._ValidationReportKeyBuilderImpl();
        }

        @Override
        public ValidationReportKeyBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.asserts.ValidationReportKey
                    ._ValidationReportKeyBuilderImpl(cc);
        }

        public ValidationReportKeyDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationReportKey>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ID, idMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationReportKey>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Entity descriptor for this key */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.of(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.INSTANCE);
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ID:
                    return FIELD_ID;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.asserts.ValidationReportKey{Id:uuid;}
            schemarise.alfa.runtime.model.asserts.ValidationReportKey{Id:uuid;}
            */
            return "1bb3def9:";
        }
    }
    // </editor-fold>

}
