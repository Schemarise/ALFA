// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.blk;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public enum ArgType implements com.schemarise.alfa.runtime.Enum {
    input_value("input_value", java.util.Optional.empty()),
    input_statement("input_statement", java.util.Optional.empty()),
    input_dummy("input_dummy", java.util.Optional.empty()),
    field_input("field_input", java.util.Optional.empty()),
    field_dropdown("field_dropdown", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, ArgType> mappings;

    ArgType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static ArgType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, ArgType> m = new java.util.HashMap<>();
            for (ArgType c : ArgType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.blk.ArgType.ArgTypeDescriptor.INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ArgTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.blk.ArgType";
        public static schemarise.alfa.runtime.model.blk.ArgType.ArgTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.blk.ArgType.ArgTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_INPUT_VALUE = 0;
        public static final String FIELD_INPUT_VALUE = "input_value";

        public static final short FIELD_ID_INPUT_STATEMENT = 1;
        public static final String FIELD_INPUT_STATEMENT = "input_statement";

        public static final short FIELD_ID_INPUT_DUMMY = 2;
        public static final String FIELD_INPUT_DUMMY = "input_dummy";

        public static final short FIELD_ID_FIELD_INPUT = 3;
        public static final String FIELD_FIELD_INPUT = "field_input";

        public static final short FIELD_ID_FIELD_DROPDOWN = 4;
        public static final String FIELD_FIELD_DROPDOWN = "field_dropdown";

        private schemarise.alfa.runtime.model.ScalarDataType _input_valueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _input_statementType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _input_dummyType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _field_inputType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _field_dropdownType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<java.util.function.Function<ArgType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta input_valueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _input_valueType,
                        FIELD_INPUT_VALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta input_statementMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _input_statementType,
                        FIELD_INPUT_STATEMENT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta input_dummyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _input_dummyType,
                        FIELD_INPUT_DUMMY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta field_inputMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _field_inputType,
                        FIELD_FIELD_INPUT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta field_dropdownMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _field_dropdownType,
                        FIELD_FIELD_DROPDOWN,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public ArgTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ArgType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_INPUT_VALUE, input_valueMeta);
                                        put(FIELD_INPUT_STATEMENT, input_statementMeta);
                                        put(FIELD_INPUT_DUMMY, input_dummyMeta);
                                        put(FIELD_FIELD_INPUT, field_inputMeta);
                                        put(FIELD_FIELD_DROPDOWN, field_dropdownMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ArgType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_INPUT_VALUE:
                    return FIELD_INPUT_VALUE;
                case FIELD_ID_INPUT_STATEMENT:
                    return FIELD_INPUT_STATEMENT;
                case FIELD_ID_INPUT_DUMMY:
                    return FIELD_INPUT_DUMMY;
                case FIELD_ID_FIELD_INPUT:
                    return FIELD_FIELD_INPUT;
                case FIELD_ID_FIELD_DROPDOWN:
                    return FIELD_FIELD_DROPDOWN;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.blk.ArgType{input_value,input_statement,input_dummy,field_input,field_dropdown}
            schemarise.alfa.runtime.model.blk.ArgType{input_value,input_statement,input_dummy,field_input,field_dropdown}
            */
            return "88618ddf:";
        }
    }
    // </editor-fold>
}
