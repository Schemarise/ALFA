// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionRule extends com.schemarise.alfa.runtime.Record {

    java.util.List<schemarise.alfa.runtime.model.DecisionExpression> getInput();

    schemarise.alfa.runtime.model.IExpression getOutput();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionRuleBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl();
    }

    public static DecisionRuleBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionRuleBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        DecisionRuleBuilder addInput(schemarise.alfa.runtime.model.DecisionExpression e);

        DecisionRuleBuilder addAllInput(
                java.util.List<schemarise.alfa.runtime.model.DecisionExpression> all);

        java.util.List<schemarise.alfa.runtime.model.DecisionExpression> getInput();

        DecisionRuleBuilder setOutput(schemarise.alfa.runtime.model.IExpression v);

        schemarise.alfa.runtime.model.IExpression getOutput();

        DecisionRule build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionRuleBuilderImpl extends _DecisionRule__Base__
            implements DecisionRuleBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _DecisionRuleBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionRuleBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor.INSTANCE;
        }

        private void createInput() {
            this._input = new java.util.ArrayList<>();
        }

        public DecisionRuleBuilder addInput(schemarise.alfa.runtime.model.DecisionExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Input", e);
            if (this._input == null) createInput();
            this._input.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                            .FIELD_ID_INPUT);
            return this;
        }

        public DecisionRuleBuilder setInput(
                int index, schemarise.alfa.runtime.model.DecisionExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Input", e);
            if (this._input == null) createInput();
            this._input.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                            .FIELD_ID_INPUT);
            return this;
        }

        public DecisionRuleBuilder addAllInput(
                java.util.List<schemarise.alfa.runtime.model.DecisionExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Input", all);
            if (this._input == null) createInput();
            this._input.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                            .FIELD_ID_INPUT);
            return this;
        }

        private DecisionRuleBuilder setInput(
                java.util.List<schemarise.alfa.runtime.model.DecisionExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Input", all);
            this._input = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                            .FIELD_ID_INPUT);
            return this;
        }

        public DecisionRuleBuilder setOutput(schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Output", v);
            this._output = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor
                            .FIELD_ID_OUTPUT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Input":
                    setInput(
                            (java.util.List<schemarise.alfa.runtime.model.DecisionExpression>) val);
                    break;
                case "Output":
                    setOutput((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionRule build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor.INSTANCE);

            DecisionRule obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (DecisionRule)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .DecisionRule
                                                                        .DecisionRuleDescriptor
                                                                        .INSTANCE
                                                                        ._inputSupplierInner1,
                                                                _input),
                                                _output);
            else
                obj =
                        new schemarise.alfa.runtime.model.DecisionRule._DecisionRuleConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.DecisionRule
                                                .DecisionRuleDescriptor.INSTANCE
                                                ._inputSupplierInner1,
                                        _input),
                                _output);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionRule",
                    new java.lang.String[] {"Input", "Output"},
                    new java.lang.Object[] {_input, _output});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _DecisionRuleConcrete extends _DecisionRule__Base__ implements DecisionRule {

        private _DecisionRuleConcrete() {
            super();
        }

        private _DecisionRuleConcrete(
                java.util.List<schemarise.alfa.runtime.model.DecisionExpression> _input,
                schemarise.alfa.runtime.model.IExpression _output) {
            super(_input, _output);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _DecisionRule__Base__ {
        public java.util.List<schemarise.alfa.runtime.model.DecisionExpression> _input;
        public schemarise.alfa.runtime.model.IExpression _output;

        public _DecisionRule__Base__() {}

        public _DecisionRule__Base__(
                java.util.List<schemarise.alfa.runtime.model.DecisionExpression> _input,
                schemarise.alfa.runtime.model.IExpression _output) {
            this._input = _input;
            this._output = _output;
        }

        public java.util.List<schemarise.alfa.runtime.model.DecisionExpression> getInput() {
            return _input;
        }

        public schemarise.alfa.runtime.model.IExpression getOutput() {
            return _output;
        }

        public int hashCode() {
            return java.util.Objects.hash(_input, _output);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionRule",
                    new java.lang.String[] {"Input", "Output"},
                    new java.lang.Object[] {_input, _output});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.DecisionRule._DecisionRuleConcrete))
                return false;
            schemarise.alfa.runtime.model.DecisionRule._DecisionRuleConcrete rhs =
                    (schemarise.alfa.runtime.model.DecisionRule._DecisionRuleConcrete) o;
            return java.util.Objects.equals(_input, rhs._input)
                    && java.util.Objects.equals(_output, rhs._output);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Input":
                    return _input;
                case "Output":
                    return _output;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            java.util.stream.IntStream.range(0, getInput().size())
                    .forEach(
                            e0 -> {
                                getInput().get(e0).validate(__builderConfig);
                            });

            getOutput().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionRuleDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.DecisionRule";
        public static schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.DecisionRule.DecisionRuleDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_INPUT = 0;
        public static final String FIELD_INPUT = "Input";

        public static final short FIELD_ID_OUTPUT = 1;
        public static final String FIELD_OUTPUT = "Output";

        private schemarise.alfa.runtime.model.ListDataType _inputType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.DecisionExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _outputType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        /* -- Consumer list< schemarise.alfa.runtime.model.DecisionExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.DecisionExpression>>
                _inputConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.DecisionExpression>
                                    _inputConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _inputType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _inputType),
                                    _inputConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _inputConsumer =
                        (builder, supplier) -> {
                            builder.addAllInput(_inputConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _outputConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _outputType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _outputConsumer =
                        (builder, supplier) -> {
                            builder.setOutput(_outputConsumerInner1.apply(supplier));
                        };

        /* -- Supplier list< schemarise.alfa.runtime.model.DecisionExpression > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.DecisionExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inputSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.DecisionExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _inputSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _inputType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _inputType),
                                    pInner1,
                                    _inputSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionRule,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inputSupplier =
                        (p, consumer) -> {
                            _inputSupplierInner1.accept(p.getInput(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _outputSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _outputType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionRule,
                        com.schemarise.alfa.runtime.DataConsumer>
                _outputSupplier =
                        (p, consumer) -> {
                            _outputSupplierInner1.accept(p.getOutput(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionRule, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta inputMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_inputSupplier),
                        java.util.Optional.of(_inputConsumer),
                        java.util.Optional.of(_inputSupplierInner1),
                        java.util.Optional.of(_inputConsumerInner1),
                        _inputType,
                        FIELD_INPUT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta outputMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_outputSupplier),
                        java.util.Optional.of(_outputConsumer),
                        java.util.Optional.of(_outputSupplierInner1),
                        java.util.Optional.of(_outputConsumerInner1),
                        _outputType,
                        FIELD_OUTPUT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionRuleBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl();
        }

        @Override
        public DecisionRuleBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionRule._DecisionRuleBuilderImpl(cc);
        }

        public DecisionRuleDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionRule>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_INPUT, inputMeta);
                                        put(FIELD_OUTPUT, outputMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionRule>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_INPUT:
                    return FIELD_INPUT;
                case FIELD_ID_OUTPUT:
                    return FIELD_OUTPUT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionRule{Input:list<schemarise.alfa.runtime.model.DecisionExpression[d5fc0406]>;Output:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            schemarise.alfa.runtime.model.DecisionRule{Input:list<schemarise.alfa.runtime.model.DecisionExpression[d5fc0406]>;Output:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            */
            return "c33acaa5:";
        }
    }
    // </editor-fold>

}
