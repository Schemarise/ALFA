// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface UdtVersionedName extends com.schemarise.alfa.runtime.Record {

    java.lang.String getFullyQualifiedName();

    schemarise.alfa.runtime.model.UdtMetaType getUdtType();

    java.util.Optional<java.lang.Boolean> getIsSynthetic();

    java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
            getAssociatedNonSyntheticUdt();

    java.util.Optional<java.lang.Integer> getVersion();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
            getTypeParameters();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtVersionedNameBuilder builder() {
        return new schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl();
    }

    public static UdtVersionedNameBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.UdtVersionedName
                                    .UdtVersionedNameDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl(
                    bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtVersionedNameBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        UdtVersionedNameBuilder setFullyQualifiedName(java.lang.String v);

        java.lang.String getFullyQualifiedName();

        UdtVersionedNameBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v);

        schemarise.alfa.runtime.model.UdtMetaType getUdtType();

        UdtVersionedNameBuilder setIsSynthetic(java.util.Optional<java.lang.Boolean> v);

        UdtVersionedNameBuilder setIsSynthetic(boolean v);

        java.util.Optional<java.lang.Boolean> getIsSynthetic();

        UdtVersionedNameBuilder setAssociatedNonSyntheticUdt(
                java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName> v);

        UdtVersionedNameBuilder setAssociatedNonSyntheticUdt(
                schemarise.alfa.runtime.model.UdtVersionedName v);

        java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
                getAssociatedNonSyntheticUdt();

        UdtVersionedNameBuilder setVersion(java.util.Optional<java.lang.Integer> v);

        UdtVersionedNameBuilder setVersion(int v);

        java.util.Optional<java.lang.Integer> getVersion();

        UdtVersionedNameBuilder setTypeParameters(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>> v);

        UdtVersionedNameBuilder setTypeParameters(
                java.util.List<schemarise.alfa.runtime.model.TypeParameter> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
                getTypeParameters();

        UdtVersionedName build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtVersionedNameBuilderImpl extends _UdtVersionedName__Base__
            implements UdtVersionedNameBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtVersionedNameBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtVersionedNameBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setIsSynthetic(java.util.Optional.empty());
            setAssociatedNonSyntheticUdt(java.util.Optional.empty());
            setVersion(java.util.Optional.empty());
            setTypeParameters(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                    .INSTANCE;
        }

        public UdtVersionedNameBuilder setFullyQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FullyQualifiedName", v);
            this._fullyQualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_FULLYQUALIFIEDNAME);
            return this;
        }

        public UdtVersionedNameBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtType", v);
            this._udtType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_UDTTYPE);
            return this;
        }

        public UdtVersionedNameBuilder setIsSynthetic(java.util.Optional<java.lang.Boolean> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsSynthetic", v);
            this._isSynthetic = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_ISSYNTHETIC);
            return this;
        }

        public UdtVersionedNameBuilder setIsSynthetic(boolean v) {
            this._isSynthetic = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_ISSYNTHETIC);
            return this;
        }

        public UdtVersionedNameBuilder setAssociatedNonSyntheticUdt(
                java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AssociatedNonSyntheticUdt", v);
            this._associatedNonSyntheticUdt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_ASSOCIATEDNONSYNTHETICUDT);
            return this;
        }

        public UdtVersionedNameBuilder setAssociatedNonSyntheticUdt(
                schemarise.alfa.runtime.model.UdtVersionedName v) {
            this._associatedNonSyntheticUdt = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_ASSOCIATEDNONSYNTHETICUDT);
            return this;
        }

        public UdtVersionedNameBuilder setVersion(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Version", v);
            this._version = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_VERSION);
            return this;
        }

        public UdtVersionedNameBuilder setVersion(int v) {
            this._version = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_VERSION);
            return this;
        }

        public UdtVersionedNameBuilder setTypeParameters(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeParameters", v);
            this._typeParameters = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_TYPEPARAMETERS);
            return this;
        }

        public UdtVersionedNameBuilder setTypeParameters(
                java.util.List<schemarise.alfa.runtime.model.TypeParameter> v) {
            this._typeParameters = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .FIELD_ID_TYPEPARAMETERS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "FullyQualifiedName":
                    setFullyQualifiedName((java.lang.String) val);
                    break;
                case "UdtType":
                    setUdtType((schemarise.alfa.runtime.model.UdtMetaType) val);
                    break;
                case "IsSynthetic":
                    setIsSynthetic((java.util.Optional<java.lang.Boolean>) val);
                    break;
                case "AssociatedNonSyntheticUdt":
                    setAssociatedNonSyntheticUdt(
                            (java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>)
                                    val);
                    break;
                case "Version":
                    setVersion((java.util.Optional<java.lang.Integer>) val);
                    break;
                case "TypeParameters":
                    setTypeParameters(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.TypeParameter>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtVersionedName build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                            .INSTANCE);

            UdtVersionedName obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtVersionedName)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _fullyQualifiedName,
                                                _udtType,
                                                _isSynthetic,
                                                _associatedNonSyntheticUdt,
                                                _version,
                                                _typeParameters);
            else
                obj =
                        new schemarise.alfa.runtime.model.UdtVersionedName
                                ._UdtVersionedNameConcrete(
                                _fullyQualifiedName,
                                _udtType,
                                _isSynthetic,
                                _associatedNonSyntheticUdt,
                                _version,
                                _typeParameters);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtVersionedName",
                    new java.lang.String[] {
                        "FullyQualifiedName",
                        "UdtType",
                        "IsSynthetic",
                        "AssociatedNonSyntheticUdt",
                        "Version",
                        "TypeParameters"
                    },
                    new java.lang.Object[] {
                        _fullyQualifiedName,
                        _udtType,
                        _isSynthetic,
                        _associatedNonSyntheticUdt,
                        _version,
                        _typeParameters
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtVersionedNameConcrete extends _UdtVersionedName__Base__
            implements UdtVersionedName {

        private _UdtVersionedNameConcrete() {
            super();
        }

        private _UdtVersionedNameConcrete(
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Boolean> _isSynthetic,
                java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
                        _associatedNonSyntheticUdt,
                java.util.Optional<java.lang.Integer> _version,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
                        _typeParameters) {
            super(
                    _fullyQualifiedName,
                    _udtType,
                    _isSynthetic,
                    _associatedNonSyntheticUdt,
                    _version,
                    _typeParameters);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtVersionedName__Base__ {
        public java.lang.String _fullyQualifiedName;
        public schemarise.alfa.runtime.model.UdtMetaType _udtType;
        public java.util.Optional<java.lang.Boolean> _isSynthetic;
        public java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
                _associatedNonSyntheticUdt;
        public java.util.Optional<java.lang.Integer> _version;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
                _typeParameters;

        public _UdtVersionedName__Base__() {}

        public _UdtVersionedName__Base__(
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Boolean> _isSynthetic,
                java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
                        _associatedNonSyntheticUdt,
                java.util.Optional<java.lang.Integer> _version,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
                        _typeParameters) {
            this._fullyQualifiedName = _fullyQualifiedName;
            this._udtType = _udtType;
            this._isSynthetic = _isSynthetic;
            this._associatedNonSyntheticUdt = _associatedNonSyntheticUdt;
            this._version = _version;
            this._typeParameters = _typeParameters;
        }

        public java.lang.String getFullyQualifiedName() {
            return _fullyQualifiedName;
        }

        public schemarise.alfa.runtime.model.UdtMetaType getUdtType() {
            return _udtType;
        }

        public java.util.Optional<java.lang.Boolean> getIsSynthetic() {
            return _isSynthetic;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>
                getAssociatedNonSyntheticUdt() {
            return _associatedNonSyntheticUdt;
        }

        public java.util.Optional<java.lang.Integer> getVersion() {
            return _version;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.TypeParameter>>
                getTypeParameters() {
            return _typeParameters;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _fullyQualifiedName,
                    _udtType,
                    _isSynthetic,
                    _associatedNonSyntheticUdt,
                    _version,
                    _typeParameters);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtVersionedName",
                    new java.lang.String[] {
                        "FullyQualifiedName",
                        "UdtType",
                        "IsSynthetic",
                        "AssociatedNonSyntheticUdt",
                        "Version",
                        "TypeParameters"
                    },
                    new java.lang.Object[] {
                        _fullyQualifiedName,
                        _udtType,
                        _isSynthetic,
                        _associatedNonSyntheticUdt,
                        _version,
                        _typeParameters
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameConcrete))
                return false;
            schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameConcrete rhs =
                    (schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameConcrete) o;
            return java.util.Objects.equals(_fullyQualifiedName, rhs._fullyQualifiedName)
                    && java.util.Objects.equals(_udtType, rhs._udtType)
                    && java.util.Objects.equals(_isSynthetic, rhs._isSynthetic)
                    && java.util.Objects.equals(
                            _associatedNonSyntheticUdt, rhs._associatedNonSyntheticUdt)
                    && java.util.Objects.equals(_version, rhs._version)
                    && java.util.Objects.equals(_typeParameters, rhs._typeParameters);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "FullyQualifiedName":
                    return _fullyQualifiedName;
                case "UdtType":
                    return _udtType;
                case "IsSynthetic":
                    return _isSynthetic;
                case "AssociatedNonSyntheticUdt":
                    return _associatedNonSyntheticUdt;
                case "Version":
                    return _version;
                case "TypeParameters":
                    return _typeParameters;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getUdtType().validate(__builderConfig);

            if (getAssociatedNonSyntheticUdt().isPresent()) {
                getAssociatedNonSyntheticUdt().get().validate(__builderConfig);
            }

            if (getTypeParameters().isPresent()) {
                java.util.stream.IntStream.range(0, getTypeParameters().get().size())
                        .forEach(
                                e0 -> {
                                    getTypeParameters().get().get(e0).validate(__builderConfig);
                                });
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtVersionedNameDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.UdtVersionedName";
        public static schemarise.alfa.runtime.model.UdtVersionedName.UdtVersionedNameDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.UdtVersionedName
                                .UdtVersionedNameDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_FULLYQUALIFIEDNAME = 0;
        public static final String FIELD_FULLYQUALIFIEDNAME = "FullyQualifiedName";

        public static final short FIELD_ID_UDTTYPE = 1;
        public static final String FIELD_UDTTYPE = "UdtType";

        public static final short FIELD_ID_ISSYNTHETIC = 2;
        public static final String FIELD_ISSYNTHETIC = "IsSynthetic";

        public static final short FIELD_ID_ASSOCIATEDNONSYNTHETICUDT = 3;
        public static final String FIELD_ASSOCIATEDNONSYNTHETICUDT = "AssociatedNonSyntheticUdt";

        public static final short FIELD_ID_VERSION = 4;
        public static final String FIELD_VERSION = "Version";

        public static final short FIELD_ID_TYPEPARAMETERS = 5;
        public static final String FIELD_TYPEPARAMETERS = "TypeParameters";

        private schemarise.alfa.runtime.model.ScalarDataType _fullyQualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _udtTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtMetaType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _isSyntheticType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.booleanType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _associatedNonSyntheticUdtType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _versionType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeParametersType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.TypeParameter")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _fullyQualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fullyQualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setFullyQualifiedName(
                                    _fullyQualifiedNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtMetaType>
                _udtTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtTypeConsumer =
                        (builder, supplier) -> {
                            builder.setUdtType(_udtTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Boolean>>
                _isSyntheticConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                                    _isSyntheticConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.booleanValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isSyntheticType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isSyntheticType),
                                    _isSyntheticConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isSyntheticConsumer =
                        (builder, supplier) -> {
                            builder.setIsSynthetic(_isSyntheticConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtVersionedName ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>>
                _associatedNonSyntheticUdtConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtVersionedName>
                                    _associatedNonSyntheticUdtConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _associatedNonSyntheticUdtType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _associatedNonSyntheticUdtType),
                                    _associatedNonSyntheticUdtConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _associatedNonSyntheticUdtConsumer =
                        (builder, supplier) -> {
                            builder.setAssociatedNonSyntheticUdt(
                                    _associatedNonSyntheticUdtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _versionConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _versionConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    _versionConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _versionConsumer =
                        (builder, supplier) -> {
                            builder.setVersion(_versionConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.TypeParameter > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.TypeParameter>>>
                _typeParametersConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.TypeParameter>>
                                    _typeParametersConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .TypeParameter>
                                                        _typeParametersConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _typeParametersType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeParametersType)
                                                                        .getComponentType()),
                                                        _typeParametersConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeParametersType),
                                    _typeParametersConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeParametersConsumer =
                        (builder, supplier) -> {
                            builder.setTypeParameters(
                                    _typeParametersConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplier =
                        (p, consumer) -> {
                            _fullyQualifiedNameSupplierInner1.accept(
                                    p.getFullyQualifiedName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtMetaType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplier =
                        (p, consumer) -> {
                            _udtTypeSupplierInner1.accept(p.getUdtType(), consumer);
                        };
        /* -- Supplier boolean ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Boolean>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Boolean,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _isSyntheticSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isSyntheticType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isSyntheticType),
                                    pInner1,
                                    _isSyntheticSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplier =
                        (p, consumer) -> {
                            _isSyntheticSupplierInner1.accept(p.getIsSynthetic(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtVersionedName ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.UdtVersionedName>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _associatedNonSyntheticUdtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtVersionedName,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _associatedNonSyntheticUdtSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _associatedNonSyntheticUdtType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _associatedNonSyntheticUdtType),
                                    pInner1,
                                    _associatedNonSyntheticUdtSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _associatedNonSyntheticUdtSupplier =
                        (p, consumer) -> {
                            _associatedNonSyntheticUdtSupplierInner1.accept(
                                    p.getAssociatedNonSyntheticUdt(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _versionSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    pInner1,
                                    _versionSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplier =
                        (p, consumer) -> {
                            _versionSupplierInner1.accept(p.getVersion(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.TypeParameter > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.TypeParameter>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeParametersSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.TypeParameter>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeParametersSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .TypeParameter,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _typeParametersSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _typeParametersType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeParametersType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _typeParametersSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _typeParametersType),
                                    pInner1,
                                    _typeParametersSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeParametersSupplier =
                        (p, consumer) -> {
                            _typeParametersSupplierInner1.accept(p.getTypeParameters(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtVersionedName, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta fullyQualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fullyQualifiedNameSupplier),
                        java.util.Optional.of(_fullyQualifiedNameConsumer),
                        java.util.Optional.of(_fullyQualifiedNameSupplierInner1),
                        java.util.Optional.of(_fullyQualifiedNameConsumerInner1),
                        _fullyQualifiedNameType,
                        FIELD_FULLYQUALIFIEDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtTypeSupplier),
                        java.util.Optional.of(_udtTypeConsumer),
                        java.util.Optional.of(_udtTypeSupplierInner1),
                        java.util.Optional.of(_udtTypeConsumerInner1),
                        _udtTypeType,
                        FIELD_UDTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isSyntheticMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isSyntheticSupplier),
                        java.util.Optional.of(_isSyntheticConsumer),
                        java.util.Optional.of(_isSyntheticSupplierInner1),
                        java.util.Optional.of(_isSyntheticConsumerInner1),
                        _isSyntheticType,
                        FIELD_ISSYNTHETIC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta associatedNonSyntheticUdtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_associatedNonSyntheticUdtSupplier),
                        java.util.Optional.of(_associatedNonSyntheticUdtConsumer),
                        java.util.Optional.of(_associatedNonSyntheticUdtSupplierInner1),
                        java.util.Optional.of(_associatedNonSyntheticUdtConsumerInner1),
                        _associatedNonSyntheticUdtType,
                        FIELD_ASSOCIATEDNONSYNTHETICUDT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta versionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_versionSupplier),
                        java.util.Optional.of(_versionConsumer),
                        java.util.Optional.of(_versionSupplierInner1),
                        java.util.Optional.of(_versionConsumerInner1),
                        _versionType,
                        FIELD_VERSION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeParametersMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeParametersSupplier),
                        java.util.Optional.of(_typeParametersConsumer),
                        java.util.Optional.of(_typeParametersSupplierInner1),
                        java.util.Optional.of(_typeParametersConsumerInner1),
                        _typeParametersType,
                        FIELD_TYPEPARAMETERS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtVersionedNameBuilder builder() {
            return new schemarise.alfa.runtime.model.UdtVersionedName
                    ._UdtVersionedNameBuilderImpl();
        }

        @Override
        public UdtVersionedNameBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.UdtVersionedName._UdtVersionedNameBuilderImpl(
                    cc);
        }

        public UdtVersionedNameDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtVersionedName>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_FULLYQUALIFIEDNAME, fullyQualifiedNameMeta);
                                        put(FIELD_UDTTYPE, udtTypeMeta);
                                        put(FIELD_ISSYNTHETIC, isSyntheticMeta);
                                        put(
                                                FIELD_ASSOCIATEDNONSYNTHETICUDT,
                                                associatedNonSyntheticUdtMeta);
                                        put(FIELD_VERSION, versionMeta);
                                        put(FIELD_TYPEPARAMETERS, typeParametersMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtVersionedName>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_FULLYQUALIFIEDNAME:
                    return FIELD_FULLYQUALIFIEDNAME;
                case FIELD_ID_UDTTYPE:
                    return FIELD_UDTTYPE;
                case FIELD_ID_ISSYNTHETIC:
                    return FIELD_ISSYNTHETIC;
                case FIELD_ID_ASSOCIATEDNONSYNTHETICUDT:
                    return FIELD_ASSOCIATEDNONSYNTHETICUDT;
                case FIELD_ID_VERSION:
                    return FIELD_VERSION;
                case FIELD_ID_TYPEPARAMETERS:
                    return FIELD_TYPEPARAMETERS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.UdtVersionedName{AssociatedNonSyntheticUdt:optional<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725];>;FullyQualifiedName:string;IsSynthetic:optional<boolean;>;TypeParameters:optional<list<schemarise.alfa.runtime.model.TypeParameter[da83cb12]>;>;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];Version:optional<int;>;}
            schemarise.alfa.runtime.model.UdtVersionedName{FullyQualifiedName:string;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];}
            */
            return "dd07c725:4c83e4bb";
        }
    }
    // </editor-fold>

}
