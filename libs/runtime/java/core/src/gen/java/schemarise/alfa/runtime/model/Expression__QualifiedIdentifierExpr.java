// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__QualifiedIdentifierExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.IDataType getExprType();

    java.util.List<java.lang.String> getPath();

    schemarise.alfa.runtime.model.QualifiedIdentifierType getIdentifierType();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__QualifiedIdentifierExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                ._Expression__QualifiedIdentifierExprBuilderImpl();
    }

    public static Expression__QualifiedIdentifierExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                    .Expression__QualifiedIdentifierExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                    ._Expression__QualifiedIdentifierExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__QualifiedIdentifierExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__QualifiedIdentifierExprBuilder setExprType(
                schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getExprType();

        Expression__QualifiedIdentifierExprBuilder addPath(java.lang.String e);

        Expression__QualifiedIdentifierExprBuilder addAllPath(java.util.List<java.lang.String> all);

        java.util.List<java.lang.String> getPath();

        Expression__QualifiedIdentifierExprBuilder setIdentifierType(
                schemarise.alfa.runtime.model.QualifiedIdentifierType v);

        schemarise.alfa.runtime.model.QualifiedIdentifierType getIdentifierType();

        Expression__QualifiedIdentifierExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__QualifiedIdentifierExprBuilderImpl
            extends _Expression__QualifiedIdentifierExpr__Base__
            implements Expression__QualifiedIdentifierExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__QualifiedIdentifierExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__QualifiedIdentifierExprBuilderImpl(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                    .Expression__QualifiedIdentifierExprDescriptor.INSTANCE;
        }

        public Expression__QualifiedIdentifierExprBuilder setExprType(
                schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExprType", v);
            this._exprType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_EXPRTYPE);
            return this;
        }

        private void createPath() {
            this._path = new java.util.ArrayList<>();
        }

        public Expression__QualifiedIdentifierExprBuilder addPath(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Path", e);
            if (this._path == null) createPath();
            this._path.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_PATH);
            return this;
        }

        public Expression__QualifiedIdentifierExprBuilder setPath(int index, java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Path", e);
            if (this._path == null) createPath();
            this._path.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_PATH);
            return this;
        }

        public Expression__QualifiedIdentifierExprBuilder addAllPath(
                java.util.List<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Path", all);
            if (this._path == null) createPath();
            this._path.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_PATH);
            return this;
        }

        private Expression__QualifiedIdentifierExprBuilder setPath(
                java.util.List<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Path", all);
            this._path = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_PATH);
            return this;
        }

        public Expression__QualifiedIdentifierExprBuilder setIdentifierType(
                schemarise.alfa.runtime.model.QualifiedIdentifierType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IdentifierType", v);
            this._identifierType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.FIELD_ID_IDENTIFIERTYPE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExprType":
                    setExprType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "path":
                    setPath((java.util.List<java.lang.String>) val);
                    break;
                case "IdentifierType":
                    setIdentifierType((schemarise.alfa.runtime.model.QualifiedIdentifierType) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__QualifiedIdentifierExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            .Expression__QualifiedIdentifierExprDescriptor.INSTANCE);

            Expression__QualifiedIdentifierExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__QualifiedIdentifierExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _exprType,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Expression__QualifiedIdentifierExpr
                                                                        .Expression__QualifiedIdentifierExprDescriptor
                                                                        .INSTANCE
                                                                        ._pathSupplierInner1,
                                                                _path),
                                                _identifierType);
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                ._Expression__QualifiedIdentifierExprConcrete(
                                _exprType,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model
                                                .Expression__QualifiedIdentifierExpr
                                                .Expression__QualifiedIdentifierExprDescriptor
                                                .INSTANCE
                                                ._pathSupplierInner1,
                                        _path),
                                _identifierType);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr",
                    new java.lang.String[] {"ExprType", "path", "IdentifierType"},
                    new java.lang.Object[] {_exprType, _path, _identifierType});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__QualifiedIdentifierExprConcrete
            extends _Expression__QualifiedIdentifierExpr__Base__
            implements Expression__QualifiedIdentifierExpr {

        private _Expression__QualifiedIdentifierExprConcrete() {
            super();
        }

        private _Expression__QualifiedIdentifierExprConcrete(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.util.List<java.lang.String> _path,
                schemarise.alfa.runtime.model.QualifiedIdentifierType _identifierType) {
            super(_exprType, _path, _identifierType);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__QualifiedIdentifierExpr__Base__ {
        public schemarise.alfa.runtime.model.IDataType _exprType;
        public java.util.List<java.lang.String> _path;
        public schemarise.alfa.runtime.model.QualifiedIdentifierType _identifierType;

        public _Expression__QualifiedIdentifierExpr__Base__() {}

        public _Expression__QualifiedIdentifierExpr__Base__(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.util.List<java.lang.String> _path,
                schemarise.alfa.runtime.model.QualifiedIdentifierType _identifierType) {
            this._exprType = _exprType;
            this._path = _path;
            this._identifierType = _identifierType;
        }

        public schemarise.alfa.runtime.model.IDataType getExprType() {
            return _exprType;
        }

        public java.util.List<java.lang.String> getPath() {
            return _path;
        }

        public schemarise.alfa.runtime.model.QualifiedIdentifierType getIdentifierType() {
            return _identifierType;
        }

        public int hashCode() {
            return java.util.Objects.hash(_exprType, _path, _identifierType);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr",
                    new java.lang.String[] {"ExprType", "path", "IdentifierType"},
                    new java.lang.Object[] {_exprType, _path, _identifierType});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            ._Expression__QualifiedIdentifierExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                            ._Expression__QualifiedIdentifierExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                            ._Expression__QualifiedIdentifierExprConcrete)
                                    o;
            return java.util.Objects.equals(_exprType, rhs._exprType)
                    && java.util.Objects.equals(_path, rhs._path)
                    && java.util.Objects.equals(_identifierType, rhs._identifierType);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                    .Expression__QualifiedIdentifierExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExprType":
                    return _exprType;
                case "path":
                    return _path;
                case "IdentifierType":
                    return _identifierType;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getExprType().validate(__builderConfig);

            getIdentifierType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__QualifiedIdentifierExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr";
        public static schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                        .Expression__QualifiedIdentifierExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                .Expression__QualifiedIdentifierExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXPRTYPE = 0;
        public static final String FIELD_EXPRTYPE = "ExprType";

        public static final short FIELD_ID_PATH = 1;
        public static final String FIELD_PATH = "path";

        public static final short FIELD_ID_IDENTIFIERTYPE = 2;
        public static final String FIELD_IDENTIFIERTYPE = "IdentifierType";

        private schemarise.alfa.runtime.model.UdtDataType _exprTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _pathType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _identifierTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName(
                                "schemarise.alfa.runtime.model.QualifiedIdentifierType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _exprTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                ._Expression__QualifiedIdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exprTypeConsumer =
                        (builder, supplier) -> {
                            builder.setExprType(_exprTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.List<java.lang.String>>
                _pathConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _pathConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _pathType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _pathType),
                                    _pathConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                ._Expression__QualifiedIdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _pathConsumer =
                        (builder, supplier) -> {
                            builder.addAllPath(_pathConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.QualifiedIdentifierType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.QualifiedIdentifierType>
                _identifierTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _identifierTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                ._Expression__QualifiedIdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _identifierTypeConsumer =
                        (builder, supplier) -> {
                            builder.setIdentifierType(
                                    _identifierTypeConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplier =
                        (p, consumer) -> {
                            _exprTypeSupplierInner1.accept(p.getExprType(), consumer);
                        };
        /* -- Supplier list< string > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _pathSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _pathSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _pathType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _pathType),
                                    pInner1,
                                    _pathSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _pathSupplier =
                        (p, consumer) -> {
                            _pathSupplierInner1.accept(p.getPath(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.QualifiedIdentifierType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.QualifiedIdentifierType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identifierTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _identifierTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identifierTypeSupplier =
                        (p, consumer) -> {
                            _identifierTypeSupplierInner1.accept(p.getIdentifierType(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__QualifiedIdentifierExpr,
                                com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta exprTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exprTypeSupplier),
                        java.util.Optional.of(_exprTypeConsumer),
                        java.util.Optional.of(_exprTypeSupplierInner1),
                        java.util.Optional.of(_exprTypeConsumerInner1),
                        _exprTypeType,
                        FIELD_EXPRTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta pathMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_pathSupplier),
                        java.util.Optional.of(_pathConsumer),
                        java.util.Optional.of(_pathSupplierInner1),
                        java.util.Optional.of(_pathConsumerInner1),
                        _pathType,
                        FIELD_PATH,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta identifierTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_identifierTypeSupplier),
                        java.util.Optional.of(_identifierTypeConsumer),
                        java.util.Optional.of(_identifierTypeSupplierInner1),
                        java.util.Optional.of(_identifierTypeConsumerInner1),
                        _identifierTypeType,
                        FIELD_IDENTIFIERTYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__QualifiedIdentifierExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                    ._Expression__QualifiedIdentifierExprBuilderImpl();
        }

        @Override
        public Expression__QualifiedIdentifierExprBuilder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                    ._Expression__QualifiedIdentifierExprBuilderImpl(cc);
        }

        public Expression__QualifiedIdentifierExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__QualifiedIdentifierExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXPRTYPE, exprTypeMeta);
                                        put(FIELD_PATH, pathMeta);
                                        put(FIELD_IDENTIFIERTYPE, identifierTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__QualifiedIdentifierExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXPRTYPE:
                    return FIELD_EXPRTYPE;
                case FIELD_ID_PATH:
                    return FIELD_PATH;
                case FIELD_ID_IDENTIFIERTYPE:
                    return FIELD_IDENTIFIERTYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr{ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];IdentifierType:schemarise.alfa.runtime.model.QualifiedIdentifierType[61ca4596];path:list<string>;}
            schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr{ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];IdentifierType:schemarise.alfa.runtime.model.QualifiedIdentifierType[61ca4596];path:list<string>;}
            */
            return "634fe037:789b5ed0";
        }
    }
    // </editor-fold>

}
