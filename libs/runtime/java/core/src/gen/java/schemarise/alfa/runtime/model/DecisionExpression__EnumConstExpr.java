// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionExpression__EnumConstExpr extends com.schemarise.alfa.runtime.Record {

    java.lang.String getEnumType();

    java.lang.String getEnumField();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionExpression__EnumConstExprBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                ._DecisionExpression__EnumConstExprBuilderImpl();
    }

    public static DecisionExpression__EnumConstExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                    .DecisionExpression__EnumConstExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                    ._DecisionExpression__EnumConstExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionExpression__EnumConstExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        DecisionExpression__EnumConstExprBuilder setEnumType(java.lang.String v);

        java.lang.String getEnumType();

        DecisionExpression__EnumConstExprBuilder setEnumField(java.lang.String v);

        java.lang.String getEnumField();

        DecisionExpression__EnumConstExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionExpression__EnumConstExprBuilderImpl
            extends _DecisionExpression__EnumConstExpr__Base__
            implements DecisionExpression__EnumConstExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _DecisionExpression__EnumConstExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionExpression__EnumConstExprBuilderImpl(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                    .DecisionExpression__EnumConstExprDescriptor.INSTANCE;
        }

        public DecisionExpression__EnumConstExprBuilder setEnumType(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EnumType", v);
            this._enumType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                            .DecisionExpression__EnumConstExprDescriptor.FIELD_ID_ENUMTYPE);
            return this;
        }

        public DecisionExpression__EnumConstExprBuilder setEnumField(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EnumField", v);
            this._enumField = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                            .DecisionExpression__EnumConstExprDescriptor.FIELD_ID_ENUMFIELD);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "EnumType":
                    setEnumType((java.lang.String) val);
                    break;
                case "EnumField":
                    setEnumField((java.lang.String) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionExpression__EnumConstExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                            .DecisionExpression__EnumConstExprDescriptor.INSTANCE);

            DecisionExpression__EnumConstExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (DecisionExpression__EnumConstExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _enumType,
                                                _enumField);
            else
                obj =
                        new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                ._DecisionExpression__EnumConstExprConcrete(_enumType, _enumField);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr",
                    new java.lang.String[] {"EnumType", "EnumField"},
                    new java.lang.Object[] {_enumType, _enumField});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _DecisionExpression__EnumConstExprConcrete
            extends _DecisionExpression__EnumConstExpr__Base__
            implements DecisionExpression__EnumConstExpr {

        private _DecisionExpression__EnumConstExprConcrete() {
            super();
        }

        private _DecisionExpression__EnumConstExprConcrete(
                java.lang.String _enumType, java.lang.String _enumField) {
            super(_enumType, _enumField);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _DecisionExpression__EnumConstExpr__Base__ {
        public java.lang.String _enumType;
        public java.lang.String _enumField;

        public _DecisionExpression__EnumConstExpr__Base__() {}

        public _DecisionExpression__EnumConstExpr__Base__(
                java.lang.String _enumType, java.lang.String _enumField) {
            this._enumType = _enumType;
            this._enumField = _enumField;
        }

        public java.lang.String getEnumType() {
            return _enumType;
        }

        public java.lang.String getEnumField() {
            return _enumField;
        }

        public int hashCode() {
            return java.util.Objects.hash(_enumType, _enumField);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr",
                    new java.lang.String[] {"EnumType", "EnumField"},
                    new java.lang.Object[] {_enumType, _enumField});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                            ._DecisionExpression__EnumConstExprConcrete)) return false;
            schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                            ._DecisionExpression__EnumConstExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                            ._DecisionExpression__EnumConstExprConcrete)
                                    o;
            return java.util.Objects.equals(_enumType, rhs._enumType)
                    && java.util.Objects.equals(_enumField, rhs._enumField);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                    .DecisionExpression__EnumConstExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "EnumType":
                    return _enumType;
                case "EnumField":
                    return _enumField;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionExpression__EnumConstExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr";
        public static schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                        .DecisionExpression__EnumConstExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                .DecisionExpression__EnumConstExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ENUMTYPE = 0;
        public static final String FIELD_ENUMTYPE = "EnumType";

        public static final short FIELD_ID_ENUMFIELD = 1;
        public static final String FIELD_ENUMFIELD = "EnumField";

        private schemarise.alfa.runtime.model.ScalarDataType _enumTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _enumFieldType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _enumTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _enumTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                ._DecisionExpression__EnumConstExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _enumTypeConsumer =
                        (builder, supplier) -> {
                            builder.setEnumType(_enumTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _enumFieldConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _enumFieldType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                ._DecisionExpression__EnumConstExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _enumFieldConsumer =
                        (builder, supplier) -> {
                            builder.setEnumField(_enumFieldConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _enumTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _enumTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _enumTypeSupplier =
                        (p, consumer) -> {
                            _enumTypeSupplierInner1.accept(p.getEnumType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _enumFieldSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _enumFieldType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _enumFieldSupplier =
                        (p, consumer) -> {
                            _enumFieldSupplierInner1.accept(p.getEnumField(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionExpression__EnumConstExpr,
                                com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta enumTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_enumTypeSupplier),
                        java.util.Optional.of(_enumTypeConsumer),
                        java.util.Optional.of(_enumTypeSupplierInner1),
                        java.util.Optional.of(_enumTypeConsumerInner1),
                        _enumTypeType,
                        FIELD_ENUMTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta enumFieldMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_enumFieldSupplier),
                        java.util.Optional.of(_enumFieldConsumer),
                        java.util.Optional.of(_enumFieldSupplierInner1),
                        java.util.Optional.of(_enumFieldConsumerInner1),
                        _enumFieldType,
                        FIELD_ENUMFIELD,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionExpression__EnumConstExprBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                    ._DecisionExpression__EnumConstExprBuilderImpl();
        }

        @Override
        public DecisionExpression__EnumConstExprBuilder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                    ._DecisionExpression__EnumConstExprBuilderImpl(cc);
        }

        public DecisionExpression__EnumConstExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__EnumConstExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ENUMTYPE, enumTypeMeta);
                                        put(FIELD_ENUMFIELD, enumFieldMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__EnumConstExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ENUMTYPE:
                    return FIELD_ENUMTYPE;
                case FIELD_ID_ENUMFIELD:
                    return FIELD_ENUMFIELD;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr{EnumField:string;EnumType:string;}
            schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr{EnumField:string;EnumType:string;}
            */
            return "46bbbd92:";
        }
    }
    // </editor-fold>

}
