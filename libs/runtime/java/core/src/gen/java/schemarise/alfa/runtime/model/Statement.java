// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Statement extends com.schemarise.alfa.runtime.Union {

    public default schemarise.alfa.runtime.model.Statement__LetStmt getLetStmt() {
        throw new IllegalStateException(
                "Accessing field LetStmt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLetStmt() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Statement__VarStmt getVarStmt() {
        throw new IllegalStateException(
                "Accessing field VarStmt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isVarStmt() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Statement__AssignStmt getAssignStmt() {
        throw new IllegalStateException(
                "Accessing field AssignStmt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isAssignStmt() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Statement__ReturnStmt getReturnStmt() {
        throw new IllegalStateException(
                "Accessing field ReturnStmt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isReturnStmt() {
        return false;
    }

    public default schemarise.alfa.runtime.model.IExpression getExpressionStmt() {
        throw new IllegalStateException(
                "Accessing field ExpressionStmt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isExpressionStmt() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt
            getTripleQuestionmarkStmt() {
        throw new IllegalStateException(
                "Accessing field TripleQuestionmarkStmt is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isTripleQuestionmarkStmt() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseLetStmt">
    static final class CaseLetStmt implements Statement {
        private schemarise.alfa.runtime.model.Statement__LetStmt _letStmt;

        private CaseLetStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Statement__LetStmt v) {
            this._letStmt = v;
            getLetStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Statement__LetStmt getLetStmt() {
            return this._letStmt;
        }

        public boolean isLetStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "LetStmt";
        }

        public java.lang.Object caseValue() {
            return _letStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("LetStmt")) return _letStmt;
            else throw new IllegalStateException("Cannot access LetStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseVarStmt">
    static final class CaseVarStmt implements Statement {
        private schemarise.alfa.runtime.model.Statement__VarStmt _varStmt;

        private CaseVarStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Statement__VarStmt v) {
            this._varStmt = v;
            getVarStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Statement__VarStmt getVarStmt() {
            return this._varStmt;
        }

        public boolean isVarStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "VarStmt";
        }

        public java.lang.Object caseValue() {
            return _varStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("VarStmt")) return _varStmt;
            else throw new IllegalStateException("Cannot access VarStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseAssignStmt">
    static final class CaseAssignStmt implements Statement {
        private schemarise.alfa.runtime.model.Statement__AssignStmt _assignStmt;

        private CaseAssignStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Statement__AssignStmt v) {
            this._assignStmt = v;
            getAssignStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Statement__AssignStmt getAssignStmt() {
            return this._assignStmt;
        }

        public boolean isAssignStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "AssignStmt";
        }

        public java.lang.Object caseValue() {
            return _assignStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("AssignStmt")) return _assignStmt;
            else throw new IllegalStateException("Cannot access AssignStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseReturnStmt">
    static final class CaseReturnStmt implements Statement {
        private schemarise.alfa.runtime.model.Statement__ReturnStmt _returnStmt;

        private CaseReturnStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Statement__ReturnStmt v) {
            this._returnStmt = v;
            getReturnStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Statement__ReturnStmt getReturnStmt() {
            return this._returnStmt;
        }

        public boolean isReturnStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "ReturnStmt";
        }

        public java.lang.Object caseValue() {
            return _returnStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ReturnStmt")) return _returnStmt;
            else throw new IllegalStateException("Cannot access ReturnStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseExpressionStmt">
    static final class CaseExpressionStmt implements Statement {
        private schemarise.alfa.runtime.model.IExpression _expressionStmt;

        private CaseExpressionStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.IExpression v) {
            this._expressionStmt = v;
            getExpressionStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.IExpression getExpressionStmt() {
            return this._expressionStmt;
        }

        public boolean isExpressionStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "ExpressionStmt";
        }

        public java.lang.Object caseValue() {
            return _expressionStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ExpressionStmt")) return _expressionStmt;
            else throw new IllegalStateException("Cannot access ExpressionStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseTripleQuestionmarkStmt">
    static final class CaseTripleQuestionmarkStmt implements Statement {
        private schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt
                _tripleQuestionmarkStmt;

        private CaseTripleQuestionmarkStmt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt v) {
            this._tripleQuestionmarkStmt = v;
            getTripleQuestionmarkStmt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt
                getTripleQuestionmarkStmt() {
            return this._tripleQuestionmarkStmt;
        }

        public boolean isTripleQuestionmarkStmt() {
            return true;
        }

        public java.lang.String caseName() {
            return "TripleQuestionmarkStmt";
        }

        public java.lang.Object caseValue() {
            return _tripleQuestionmarkStmt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("TripleQuestionmarkStmt")) return _tripleQuestionmarkStmt;
            else throw new IllegalStateException("Cannot access TripleQuestionmarkStmt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static StatementBuilder builder() {
        return new schemarise.alfa.runtime.model.Statement._StatementBuilderImpl();
    }

    public static StatementBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Statement._StatementBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface StatementBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        StatementBuilder setLetStmt(schemarise.alfa.runtime.model.Statement__LetStmt v);

        StatementBuilder setVarStmt(schemarise.alfa.runtime.model.Statement__VarStmt v);

        StatementBuilder setAssignStmt(schemarise.alfa.runtime.model.Statement__AssignStmt v);

        StatementBuilder setReturnStmt(schemarise.alfa.runtime.model.Statement__ReturnStmt v);

        StatementBuilder setExpressionStmt(schemarise.alfa.runtime.model.IExpression v);

        StatementBuilder setTripleQuestionmarkStmt(
                schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt v);

        Statement build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _StatementBuilderImpl implements StatementBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private schemarise.alfa.runtime.model.Statement__LetStmt _letStmt;
        private schemarise.alfa.runtime.model.Statement__VarStmt _varStmt;
        private schemarise.alfa.runtime.model.Statement__AssignStmt _assignStmt;
        private schemarise.alfa.runtime.model.Statement__ReturnStmt _returnStmt;
        private schemarise.alfa.runtime.model.IExpression _expressionStmt;
        private schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt
                _tripleQuestionmarkStmt;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "LetStmt":
                    return _letStmt;
                case "VarStmt":
                    return _varStmt;
                case "AssignStmt":
                    return _assignStmt;
                case "ReturnStmt":
                    return _returnStmt;
                case "ExpressionStmt":
                    return _expressionStmt;
                case "TripleQuestionmarkStmt":
                    return _tripleQuestionmarkStmt;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _StatementBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _StatementBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE;
        }

        public StatementBuilder setLetStmt(schemarise.alfa.runtime.model.Statement__LetStmt v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LetStmt", v);
            this._letStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor.FIELD_ID_LETSTMT);
            return this;
        }

        public StatementBuilder setVarStmt(schemarise.alfa.runtime.model.Statement__VarStmt v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("VarStmt", v);
            this._varStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor.FIELD_ID_VARSTMT);
            return this;
        }

        public StatementBuilder setAssignStmt(
                schemarise.alfa.runtime.model.Statement__AssignStmt v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AssignStmt", v);
            this._assignStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_ASSIGNSTMT);
            return this;
        }

        public StatementBuilder setReturnStmt(
                schemarise.alfa.runtime.model.Statement__ReturnStmt v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReturnStmt", v);
            this._returnStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_RETURNSTMT);
            return this;
        }

        public StatementBuilder setExpressionStmt(schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExpressionStmt", v);
            this._expressionStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_EXPRESSIONSTMT);
            return this;
        }

        public StatementBuilder setTripleQuestionmarkStmt(
                schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TripleQuestionmarkStmt", v);
            this._tripleQuestionmarkStmt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_TRIPLEQUESTIONMARKSTMT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "LetStmt":
                    setLetStmt((schemarise.alfa.runtime.model.Statement__LetStmt) val);
                    break;
                case "VarStmt":
                    setVarStmt((schemarise.alfa.runtime.model.Statement__VarStmt) val);
                    break;
                case "AssignStmt":
                    setAssignStmt((schemarise.alfa.runtime.model.Statement__AssignStmt) val);
                    break;
                case "ReturnStmt":
                    setReturnStmt((schemarise.alfa.runtime.model.Statement__ReturnStmt) val);
                    break;
                case "ExpressionStmt":
                    setExpressionStmt((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                case "TripleQuestionmarkStmt":
                    setTripleQuestionmarkStmt(
                            (schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Statement build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor.FIELD_ID_LETSTMT))
                return new CaseLetStmt(__builderConfig, _letStmt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor.FIELD_ID_VARSTMT))
                return new CaseVarStmt(__builderConfig, _varStmt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_ASSIGNSTMT))
                return new CaseAssignStmt(__builderConfig, _assignStmt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_RETURNSTMT))
                return new CaseReturnStmt(__builderConfig, _returnStmt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_EXPRESSIONSTMT))
                return new CaseExpressionStmt(__builderConfig, _expressionStmt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor
                            .FIELD_ID_TRIPLEQUESTIONMARKSTMT))
                return new CaseTripleQuestionmarkStmt(__builderConfig, _tripleQuestionmarkStmt);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.Statement.StatementDescriptor.INSTANCE,
                    6,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Statement",
                    new java.lang.String[] {
                        "LetStmt",
                        "VarStmt",
                        "AssignStmt",
                        "ReturnStmt",
                        "ExpressionStmt",
                        "TripleQuestionmarkStmt"
                    },
                    new java.lang.Object[] {
                        _letStmt,
                        _varStmt,
                        _assignStmt,
                        _returnStmt,
                        _expressionStmt,
                        _tripleQuestionmarkStmt
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class StatementDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Statement";
        public static schemarise.alfa.runtime.model.Statement.StatementDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Statement.StatementDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_LETSTMT = 0;
        public static final String FIELD_LETSTMT = "LetStmt";

        public static final short FIELD_ID_VARSTMT = 1;
        public static final String FIELD_VARSTMT = "VarStmt";

        public static final short FIELD_ID_ASSIGNSTMT = 2;
        public static final String FIELD_ASSIGNSTMT = "AssignStmt";

        public static final short FIELD_ID_RETURNSTMT = 3;
        public static final String FIELD_RETURNSTMT = "ReturnStmt";

        public static final short FIELD_ID_EXPRESSIONSTMT = 4;
        public static final String FIELD_EXPRESSIONSTMT = "ExpressionStmt";

        public static final short FIELD_ID_TRIPLEQUESTIONMARKSTMT = 5;
        public static final String FIELD_TRIPLEQUESTIONMARKSTMT = "TripleQuestionmarkStmt";

        private schemarise.alfa.runtime.model.TupleDataType _letStmtType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Statement__LetStmt")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Statement__LetStmt
                                        .Statement__LetStmtDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _varStmtType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Statement__VarStmt")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Statement__VarStmt
                                        .Statement__VarStmtDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _assignStmtType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Statement__AssignStmt")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Statement__AssignStmt
                                        .Statement__AssignStmtDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _returnStmtType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Statement__ReturnStmt")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Statement__ReturnStmt
                                        .Statement__ReturnStmtDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _expressionStmtType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _tripleQuestionmarkStmtType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt
                                        .Statement__TripleQuestionmarkStmtDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        /* -- Consumer tuple<
            Name : string,
            dataType : schemarise.alfa.runtime.model.IDataType,
            Expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Statement__LetStmt>
                _letStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _letStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _letStmtConsumer =
                        (builder, supplier) -> {
                            builder.setLetStmt(_letStmtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            Name : string,
            dataType : schemarise.alfa.runtime.model.IDataType
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Statement__VarStmt>
                _varStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _varStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _varStmtConsumer =
                        (builder, supplier) -> {
                            builder.setVarStmt(_varStmtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            QualifiedIdentifier : schemarise.alfa.runtime.model.IExpression,
            Expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Statement__AssignStmt>
                _assignStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _assignStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _assignStmtConsumer =
                        (builder, supplier) -> {
                            builder.setAssignStmt(_assignStmtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            expr : schemarise.alfa.runtime.model.IExpression,
            dataType : schemarise.alfa.runtime.model.IDataType
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Statement__ReturnStmt>
                _returnStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _returnStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _returnStmtConsumer =
                        (builder, supplier) -> {
                            builder.setReturnStmt(_returnStmtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _expressionStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _expressionStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _expressionStmtConsumer =
                        (builder, supplier) -> {
                            builder.setExpressionStmt(
                                    _expressionStmtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<     > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt>
                _tripleQuestionmarkStmtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _tripleQuestionmarkStmtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement._StatementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _tripleQuestionmarkStmtConsumer =
                        (builder, supplier) -> {
                            builder.setTripleQuestionmarkStmt(
                                    _tripleQuestionmarkStmtConsumerInner1.apply(supplier));
                        };

        /* -- Supplier tuple<
            Name : string,
            dataType : schemarise.alfa.runtime.model.IDataType,
            Expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__LetStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _letStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _letStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _letStmtSupplier =
                        (p, consumer) -> {
                            _letStmtSupplierInner1.accept(p.getLetStmt(), consumer);
                        };
        /* -- Supplier tuple<
            Name : string,
            dataType : schemarise.alfa.runtime.model.IDataType
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__VarStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _varStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _varStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _varStmtSupplier =
                        (p, consumer) -> {
                            _varStmtSupplierInner1.accept(p.getVarStmt(), consumer);
                        };
        /* -- Supplier tuple<
            QualifiedIdentifier : schemarise.alfa.runtime.model.IExpression,
            Expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__AssignStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assignStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _assignStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assignStmtSupplier =
                        (p, consumer) -> {
                            _assignStmtSupplierInner1.accept(p.getAssignStmt(), consumer);
                        };
        /* -- Supplier tuple<
            expr : schemarise.alfa.runtime.model.IExpression,
            dataType : schemarise.alfa.runtime.model.IDataType
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__ReturnStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _returnStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _returnStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _returnStmtSupplier =
                        (p, consumer) -> {
                            _returnStmtSupplierInner1.accept(p.getReturnStmt(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _expressionStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _expressionStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _expressionStmtSupplier =
                        (p, consumer) -> {
                            _expressionStmtSupplierInner1.accept(p.getExpressionStmt(), consumer);
                        };
        /* -- Supplier tuple<     > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__TripleQuestionmarkStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _tripleQuestionmarkStmtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _tripleQuestionmarkStmtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _tripleQuestionmarkStmtSupplier =
                        (p, consumer) -> {
                            _tripleQuestionmarkStmtSupplierInner1.accept(
                                    p.getTripleQuestionmarkStmt(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Statement, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta letStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_letStmtSupplier),
                        java.util.Optional.of(_letStmtConsumer),
                        java.util.Optional.of(_letStmtSupplierInner1),
                        java.util.Optional.of(_letStmtConsumerInner1),
                        _letStmtType,
                        FIELD_LETSTMT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta varStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_varStmtSupplier),
                        java.util.Optional.of(_varStmtConsumer),
                        java.util.Optional.of(_varStmtSupplierInner1),
                        java.util.Optional.of(_varStmtConsumerInner1),
                        _varStmtType,
                        FIELD_VARSTMT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta assignStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_assignStmtSupplier),
                        java.util.Optional.of(_assignStmtConsumer),
                        java.util.Optional.of(_assignStmtSupplierInner1),
                        java.util.Optional.of(_assignStmtConsumerInner1),
                        _assignStmtType,
                        FIELD_ASSIGNSTMT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta returnStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_returnStmtSupplier),
                        java.util.Optional.of(_returnStmtConsumer),
                        java.util.Optional.of(_returnStmtSupplierInner1),
                        java.util.Optional.of(_returnStmtConsumerInner1),
                        _returnStmtType,
                        FIELD_RETURNSTMT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta expressionStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_expressionStmtSupplier),
                        java.util.Optional.of(_expressionStmtConsumer),
                        java.util.Optional.of(_expressionStmtSupplierInner1),
                        java.util.Optional.of(_expressionStmtConsumerInner1),
                        _expressionStmtType,
                        FIELD_EXPRESSIONSTMT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta tripleQuestionmarkStmtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_tripleQuestionmarkStmtSupplier),
                        java.util.Optional.of(_tripleQuestionmarkStmtConsumer),
                        java.util.Optional.of(_tripleQuestionmarkStmtSupplierInner1),
                        java.util.Optional.of(_tripleQuestionmarkStmtConsumerInner1),
                        _tripleQuestionmarkStmtType,
                        FIELD_TRIPLEQUESTIONMARKSTMT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public StatementBuilder builder() {
            return new schemarise.alfa.runtime.model.Statement._StatementBuilderImpl();
        }

        @Override
        public StatementBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Statement._StatementBuilderImpl(cc);
        }

        public StatementDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Statement>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_LETSTMT, letStmtMeta);
                                        put(FIELD_VARSTMT, varStmtMeta);
                                        put(FIELD_ASSIGNSTMT, assignStmtMeta);
                                        put(FIELD_RETURNSTMT, returnStmtMeta);
                                        put(FIELD_EXPRESSIONSTMT, expressionStmtMeta);
                                        put(
                                                FIELD_TRIPLEQUESTIONMARKSTMT,
                                                tripleQuestionmarkStmtMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Statement>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_LETSTMT:
                    return FIELD_LETSTMT;
                case FIELD_ID_VARSTMT:
                    return FIELD_VARSTMT;
                case FIELD_ID_ASSIGNSTMT:
                    return FIELD_ASSIGNSTMT;
                case FIELD_ID_RETURNSTMT:
                    return FIELD_RETURNSTMT;
                case FIELD_ID_EXPRESSIONSTMT:
                    return FIELD_EXPRESSIONSTMT;
                case FIELD_ID_TRIPLEQUESTIONMARKSTMT:
                    return FIELD_TRIPLEQUESTIONMARKSTMT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Statement{AssignStmt:tuple<Expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];QualifiedIdentifier:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;ExpressionStmt:schemarise.alfa.runtime.model.IExpression[5fb330b3];LetStmt:tuple<Expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];Name:string;dataType:schemarise.alfa.runtime.model.IDataType[4404d6a0];>;ReturnStmt:tuple<dataType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;TripleQuestionmarkStmt:tuple<>;VarStmt:tuple<Name:string;dataType:schemarise.alfa.runtime.model.IDataType[4404d6a0];>;}
            schemarise.alfa.runtime.model.Statement{AssignStmt:tuple<Expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];QualifiedIdentifier:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;ExpressionStmt:schemarise.alfa.runtime.model.IExpression[5fb330b3];LetStmt:tuple<Expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];Name:string;dataType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];>;ReturnStmt:tuple<dataType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;TripleQuestionmarkStmt:tuple<>;VarStmt:tuple<Name:string;dataType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];>;}
            */
            return "d43aa7d0:7dbb6c5d";
        }
    }
    // </editor-fold>

}
