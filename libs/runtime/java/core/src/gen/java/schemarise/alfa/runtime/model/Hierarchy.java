// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Hierarchy extends com.schemarise.alfa.runtime.Record {

    java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getNsHierarchy();

    java.util.Map<java.lang.String, java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
            getNsUdts();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static HierarchyBuilder builder() {
        return new schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl();
    }

    public static HierarchyBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface HierarchyBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        HierarchyBuilder putNsHierarchy(java.lang.String k, java.util.Set<java.lang.String> v);

        HierarchyBuilder putAllNsHierarchy(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all);

        java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getNsHierarchy();

        HierarchyBuilder putNsUdts(
                java.lang.String k,
                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo> v);

        HierarchyBuilder putAllNsUdts(
                java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                        all);

        java.util.Map<
                        java.lang.String,
                        java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                getNsUdts();

        Hierarchy build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _HierarchyBuilderImpl extends _Hierarchy__Base__ implements HierarchyBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _HierarchyBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _HierarchyBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.INSTANCE;
        }

        private void createNsHierarchy() {
            this._nsHierarchy = new java.util.LinkedHashMap<>();
        }

        public HierarchyBuilder putNsHierarchy(
                java.lang.String k, java.util.Set<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key NsHierarchy", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value NsHierarchy", v);
            if (this._nsHierarchy == null) createNsHierarchy();
            this._nsHierarchy.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor
                            .FIELD_ID_NSHIERARCHY);
            return this;
        }

        public HierarchyBuilder putAllNsHierarchy(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NsHierarchy", all);
            if (this._nsHierarchy == null) createNsHierarchy();
            this._nsHierarchy.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor
                            .FIELD_ID_NSHIERARCHY);
            return this;
        }

        private HierarchyBuilder setNsHierarchy(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NsHierarchy", all);
            _nsHierarchy = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor
                            .FIELD_ID_NSHIERARCHY);
            return this;
        }

        private void createNsUdts() {
            this._nsUdts = new java.util.LinkedHashMap<>();
        }

        public HierarchyBuilder putNsUdts(
                java.lang.String k,
                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key NsUdts", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value NsUdts", v);
            if (this._nsUdts == null) createNsUdts();
            this._nsUdts.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.FIELD_ID_NSUDTS);
            return this;
        }

        public HierarchyBuilder putAllNsUdts(
                java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NsUdts", all);
            if (this._nsUdts == null) createNsUdts();
            this._nsUdts.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.FIELD_ID_NSUDTS);
            return this;
        }

        private HierarchyBuilder setNsUdts(
                java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NsUdts", all);
            _nsUdts = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.FIELD_ID_NSUDTS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "NsHierarchy":
                    setNsHierarchy(
                            (java.util.Map<java.lang.String, java.util.Set<java.lang.String>>) val);
                    break;
                case "NsUdts":
                    setNsUdts(
                            (java.util.Map<
                                            java.lang.String,
                                            java.util.Set<
                                                    schemarise.alfa.runtime.model
                                                            .HierarchyUdtInfo>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Hierarchy build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.INSTANCE);

            Hierarchy obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Hierarchy)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Hierarchy
                                                                        .HierarchyDescriptor
                                                                        .INSTANCE
                                                                        ._nsHierarchySupplierInner1,
                                                                _nsHierarchy),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Hierarchy
                                                                        .HierarchyDescriptor
                                                                        .INSTANCE
                                                                        ._nsUdtsSupplierInner1,
                                                                _nsUdts));
            else
                obj =
                        new schemarise.alfa.runtime.model.Hierarchy._HierarchyConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor
                                                .INSTANCE
                                                ._nsHierarchySupplierInner1,
                                        _nsHierarchy),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor
                                                .INSTANCE
                                                ._nsUdtsSupplierInner1,
                                        _nsUdts));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Hierarchy",
                    new java.lang.String[] {"NsHierarchy", "NsUdts"},
                    new java.lang.Object[] {_nsHierarchy, _nsUdts});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _HierarchyConcrete extends _Hierarchy__Base__ implements Hierarchy {

        private _HierarchyConcrete() {
            super();
        }

        private _HierarchyConcrete(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _nsHierarchy,
                java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                        _nsUdts) {
            super(_nsHierarchy, _nsUdts);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Hierarchy__Base__ {
        public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _nsHierarchy;
        public java.util.Map<
                        java.lang.String,
                        java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                _nsUdts;

        public _Hierarchy__Base__() {}

        public _Hierarchy__Base__(
                java.util.Map<java.lang.String, java.util.Set<java.lang.String>> _nsHierarchy,
                java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                        _nsUdts) {
            this._nsHierarchy = _nsHierarchy;
            this._nsUdts = _nsUdts;
        }

        public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getNsHierarchy() {
            return _nsHierarchy;
        }

        public java.util.Map<
                        java.lang.String,
                        java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                getNsUdts() {
            return _nsUdts;
        }

        public int hashCode() {
            return java.util.Objects.hash(_nsHierarchy, _nsUdts);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Hierarchy",
                    new java.lang.String[] {"NsHierarchy", "NsUdts"},
                    new java.lang.Object[] {_nsHierarchy, _nsUdts});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Hierarchy._HierarchyConcrete))
                return false;
            schemarise.alfa.runtime.model.Hierarchy._HierarchyConcrete rhs =
                    (schemarise.alfa.runtime.model.Hierarchy._HierarchyConcrete) o;
            return java.util.Objects.equals(_nsHierarchy, rhs._nsHierarchy)
                    && java.util.Objects.equals(_nsUdts, rhs._nsUdts);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "NsHierarchy":
                    return _nsHierarchy;
                case "NsUdts":
                    return _nsUdts;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getNsUdts()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue()
                                        .forEach(
                                                e1 -> {
                                                    e1.validate(__builderConfig);
                                                });
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class HierarchyDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Hierarchy";
        public static schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Hierarchy.HierarchyDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NSHIERARCHY = 0;
        public static final String FIELD_NSHIERARCHY = "NsHierarchy";

        public static final short FIELD_ID_NSUDTS = 1;
        public static final String FIELD_NSUDTS = "NsUdts";

        private schemarise.alfa.runtime.model.MapDataType _nsHierarchyType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setKeyName(java.util.Optional.of("NS"))
                        .setValueType(
                                schemarise.alfa.runtime.model.SetDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .setValueName(java.util.Optional.of("NSChildren"))
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _nsUdtsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setKeyName(java.util.Optional.of("NS"))
                        .setValueType(
                                schemarise.alfa.runtime.model.SetDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.HierarchyUdtInfo")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .setValueName(java.util.Optional.of("Udts"))
                        .build();

        /* -- Consumer map< NS : string , NSChildren : set< string > > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>
                _nsHierarchyConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _nsHierarchyConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsHierarchyType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Set<java.lang.String>>
                                    _nsHierarchyConsumerInner2Val =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _nsHierarchyConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .SetDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _nsHierarchyType)
                                                                                                                    .getValueType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.setValue(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsHierarchyType)
                                                                        .getValueType()),
                                                        _nsHierarchyConsumerInner3);
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _nsHierarchyType),
                                    _nsHierarchyConsumerInner2Key,
                                    _nsHierarchyConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nsHierarchyConsumer =
                        (builder, supplier) -> {
                            builder.putAllNsHierarchy(_nsHierarchyConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< NS : string , Udts : set< schemarise.alfa.runtime.model.HierarchyUdtInfo > > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>>
                _nsUdtsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _nsUdtsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsUdtsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Set<
                                                    schemarise.alfa.runtime.model.HierarchyUdtInfo>>
                                    _nsUdtsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .HierarchyUdtInfo>
                                                        _nsUdtsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .SetDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _nsUdtsType)
                                                                                                                    .getValueType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.setValue(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsUdtsType)
                                                                        .getValueType()),
                                                        _nsUdtsConsumerInner3);
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _nsUdtsType),
                                    _nsUdtsConsumerInner2Key,
                                    _nsUdtsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nsUdtsConsumer =
                        (builder, supplier) -> {
                            builder.putAllNsUdts(_nsUdtsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< NS : string , NSChildren : set< string > > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, java.util.Set<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nsHierarchySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nsHierarchySupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsHierarchyType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            java.util.Set<java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nsHierarchySupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _nsHierarchySupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .SetDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _nsHierarchyType)
                                                                                                            .getValueType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsHierarchyType)
                                                                        .getValueType()),
                                                        pInner2,
                                                        _nsHierarchySupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _nsHierarchyType),
                                    pInner1,
                                    _nsHierarchySupplierInner2Key,
                                    _nsHierarchySupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Hierarchy,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nsHierarchySupplier =
                        (p, consumer) -> {
                            _nsHierarchySupplierInner1.accept(p.getNsHierarchy(), consumer);
                        };
        /* -- Supplier map< NS : string , Udts : set< schemarise.alfa.runtime.model.HierarchyUdtInfo > > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String,
                                java.util.Set<schemarise.alfa.runtime.model.HierarchyUdtInfo>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nsUdtsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nsUdtsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsUdtsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            java.util.Set<
                                                    schemarise.alfa.runtime.model.HierarchyUdtInfo>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nsUdtsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .HierarchyUdtInfo,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _nsUdtsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .SetDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _nsUdtsType)
                                                                                                            .getValueType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.SetDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _nsUdtsType)
                                                                        .getValueType()),
                                                        pInner2,
                                                        _nsUdtsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _nsUdtsType),
                                    pInner1,
                                    _nsUdtsSupplierInner2Key,
                                    _nsUdtsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Hierarchy,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nsUdtsSupplier =
                        (p, consumer) -> {
                            _nsUdtsSupplierInner1.accept(p.getNsUdts(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Hierarchy, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta nsHierarchyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nsHierarchySupplier),
                        java.util.Optional.of(_nsHierarchyConsumer),
                        java.util.Optional.of(_nsHierarchySupplierInner1),
                        java.util.Optional.of(_nsHierarchyConsumerInner1),
                        _nsHierarchyType,
                        FIELD_NSHIERARCHY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nsUdtsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nsUdtsSupplier),
                        java.util.Optional.of(_nsUdtsConsumer),
                        java.util.Optional.of(_nsUdtsSupplierInner1),
                        java.util.Optional.of(_nsUdtsConsumerInner1),
                        _nsUdtsType,
                        FIELD_NSUDTS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public HierarchyBuilder builder() {
            return new schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl();
        }

        @Override
        public HierarchyBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Hierarchy._HierarchyBuilderImpl(cc);
        }

        public HierarchyDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Hierarchy>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NSHIERARCHY, nsHierarchyMeta);
                                        put(FIELD_NSUDTS, nsUdtsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Hierarchy>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NSHIERARCHY:
                    return FIELD_NSHIERARCHY;
                case FIELD_ID_NSUDTS:
                    return FIELD_NSUDTS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Hierarchy{NsHierarchy:map<string,string>;NsUdts:map<string,string>;}
            schemarise.alfa.runtime.model.Hierarchy{NsHierarchy:map<string,string>;NsUdts:map<string,string>;}
            */
            return "672b69dc:";
        }
    }
    // </editor-fold>

}
