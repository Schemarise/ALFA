// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ScalarDataType
        extends com.schemarise.alfa.runtime.Record,
                schemarise.alfa.runtime.model.IDataType,
                schemarise.alfa.runtime.model.ScalarConstraints {

    java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMin();

    java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMax();

    java.util.Optional<java.lang.String> getStrPattern();

    java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> getPrecision();

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    schemarise.alfa.runtime.model.ScalarType getScalarType();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ScalarDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl();
    }

    public static ScalarDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ScalarDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDataType.IDataTypeBuilder,
                    schemarise.alfa.runtime.model.ScalarConstraints.ScalarConstraintsBuilder {
        ScalarDataTypeBuilder setMin(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> v);

        ScalarDataTypeBuilder setMin(schemarise.alfa.runtime.model.RangeValue v);

        java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMin();

        ScalarDataTypeBuilder setMax(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> v);

        ScalarDataTypeBuilder setMax(schemarise.alfa.runtime.model.RangeValue v);

        java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMax();

        ScalarDataTypeBuilder setStrPattern(java.util.Optional<java.lang.String> v);

        ScalarDataTypeBuilder setStrPattern(java.lang.String v);

        java.util.Optional<java.lang.String> getStrPattern();

        ScalarDataTypeBuilder setPrecision(
                java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> v);

        ScalarDataTypeBuilder setPrecision(schemarise.alfa.runtime.model.DecimalPrecision v);

        java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> getPrecision();

        ScalarDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        ScalarDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        ScalarDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        ScalarDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        ScalarDataTypeBuilder setScalarType(schemarise.alfa.runtime.model.ScalarType v);

        schemarise.alfa.runtime.model.ScalarType getScalarType();

        ScalarDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ScalarDataTypeBuilderImpl extends _ScalarDataType__Base__
            implements ScalarDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ScalarDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ScalarDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(7);
            __missingFields.set(0, 7);
            setMin(java.util.Optional.empty());
            setMax(java.util.Optional.empty());
            setStrPattern(java.util.Optional.empty());
            setPrecision(java.util.Optional.empty());
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor.INSTANCE;
        }

        public ScalarDataTypeBuilder setMin(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Min", v);
            this._min = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_MIN);
            return this;
        }

        public ScalarDataTypeBuilder setMin(schemarise.alfa.runtime.model.RangeValue v) {
            this._min = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_MIN);
            return this;
        }

        public ScalarDataTypeBuilder setMax(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Max", v);
            this._max = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_MAX);
            return this;
        }

        public ScalarDataTypeBuilder setMax(schemarise.alfa.runtime.model.RangeValue v) {
            this._max = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_MAX);
            return this;
        }

        public ScalarDataTypeBuilder setStrPattern(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("StrPattern", v);
            this._strPattern = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_STRPATTERN);
            return this;
        }

        public ScalarDataTypeBuilder setStrPattern(java.lang.String v) {
            this._strPattern = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_STRPATTERN);
            return this;
        }

        public ScalarDataTypeBuilder setPrecision(
                java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Precision", v);
            this._precision = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_PRECISION);
            return this;
        }

        public ScalarDataTypeBuilder setPrecision(
                schemarise.alfa.runtime.model.DecimalPrecision v) {
            this._precision = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_PRECISION);
            return this;
        }

        public ScalarDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public ScalarDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public ScalarDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public ScalarDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public ScalarDataTypeBuilder setScalarType(schemarise.alfa.runtime.model.ScalarType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ScalarType", v);
            this._scalarType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                            .FIELD_ID_SCALARTYPE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "min":
                    setMin((java.util.Optional<schemarise.alfa.runtime.model.RangeValue>) val);
                    break;
                case "max":
                    setMax((java.util.Optional<schemarise.alfa.runtime.model.RangeValue>) val);
                    break;
                case "strPattern":
                    setStrPattern((java.util.Optional<java.lang.String>) val);
                    break;
                case "precision":
                    setPrecision(
                            (java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision>)
                                    val);
                    break;
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "ScalarType":
                    setScalarType((schemarise.alfa.runtime.model.ScalarType) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ScalarDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    7,
                    schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor.INSTANCE);

            ScalarDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ScalarDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _min,
                                                _max,
                                                _strPattern,
                                                _precision,
                                                _extendedAttribs,
                                                _typeDefName,
                                                _scalarType);
            else
                obj =
                        new schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeConcrete(
                                _min,
                                _max,
                                _strPattern,
                                _precision,
                                _extendedAttribs,
                                _typeDefName,
                                _scalarType);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ScalarDataType",
                    new java.lang.String[] {
                        "min",
                        "max",
                        "strPattern",
                        "precision",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "ScalarType"
                    },
                    new java.lang.Object[] {
                        _min,
                        _max,
                        _strPattern,
                        _precision,
                        _extendedAttribs,
                        _typeDefName,
                        _scalarType
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ScalarDataTypeConcrete extends _ScalarDataType__Base__ implements ScalarDataType {

        private _ScalarDataTypeConcrete() {
            super();
        }

        private _ScalarDataTypeConcrete(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _min,
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _max,
                java.util.Optional<java.lang.String> _strPattern,
                java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> _precision,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                schemarise.alfa.runtime.model.ScalarType _scalarType) {
            super(_min, _max, _strPattern, _precision, _extendedAttribs, _typeDefName, _scalarType);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ScalarDataType__Base__ {
        public java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _min;
        public java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _max;
        public java.util.Optional<java.lang.String> _strPattern;
        public java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> _precision;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public schemarise.alfa.runtime.model.ScalarType _scalarType;

        public _ScalarDataType__Base__() {}

        public _ScalarDataType__Base__(
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _min,
                java.util.Optional<schemarise.alfa.runtime.model.RangeValue> _max,
                java.util.Optional<java.lang.String> _strPattern,
                java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> _precision,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                schemarise.alfa.runtime.model.ScalarType _scalarType) {
            this._min = _min;
            this._max = _max;
            this._strPattern = _strPattern;
            this._precision = _precision;
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._scalarType = _scalarType;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMin() {
            return _min;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.RangeValue> getMax() {
            return _max;
        }

        public java.util.Optional<java.lang.String> getStrPattern() {
            return _strPattern;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision> getPrecision() {
            return _precision;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public schemarise.alfa.runtime.model.ScalarType getScalarType() {
            return _scalarType;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _min,
                    _max,
                    _strPattern,
                    _precision,
                    _extendedAttribs,
                    _typeDefName,
                    _scalarType);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ScalarDataType",
                    new java.lang.String[] {
                        "min",
                        "max",
                        "strPattern",
                        "precision",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "ScalarType"
                    },
                    new java.lang.Object[] {
                        _min,
                        _max,
                        _strPattern,
                        _precision,
                        _extendedAttribs,
                        _typeDefName,
                        _scalarType
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeConcrete) o;
            return java.util.Objects.equals(_min, rhs._min)
                    && java.util.Objects.equals(_max, rhs._max)
                    && java.util.Objects.equals(_strPattern, rhs._strPattern)
                    && java.util.Objects.equals(_precision, rhs._precision)
                    && java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(_scalarType, rhs._scalarType);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "min":
                    return _min;
                case "max":
                    return _max;
                case "strPattern":
                    return _strPattern;
                case "precision":
                    return _precision;
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "ScalarType":
                    return _scalarType;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            if (getMin().isPresent()) {
                getMin().get().validate(__builderConfig);
            }
            if (getMax().isPresent()) {
                getMax().get().validate(__builderConfig);
            }

            if (getPrecision().isPresent()) {
                getPrecision().get().validate(__builderConfig);
            }

            getScalarType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ScalarDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.ScalarDataType";
        public static schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.ScalarDataType.ScalarDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_MIN = 0;
        public static final String FIELD_MIN = "min";

        public static final short FIELD_ID_MAX = 1;
        public static final String FIELD_MAX = "max";

        public static final short FIELD_ID_STRPATTERN = 2;
        public static final String FIELD_STRPATTERN = "strPattern";

        public static final short FIELD_ID_PRECISION = 3;
        public static final String FIELD_PRECISION = "precision";

        public static final short FIELD_ID_EXTENDEDATTRIBS = 4;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 5;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_SCALARTYPE = 6;
        public static final String FIELD_SCALARTYPE = "ScalarType";

        private schemarise.alfa.runtime.model.OptionalDataType _minType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.RangeValue")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _maxType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.RangeValue")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _strPatternType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _precisionType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.DecimalPrecision")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _scalarTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.ScalarType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.RangeValue ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.RangeValue>>
                _minConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.RangeValue>
                                    _minConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _minType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _minType),
                                    _minConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _minConsumer =
                        (builder, supplier) -> {
                            builder.setMin(_minConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.RangeValue ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.RangeValue>>
                _maxConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.RangeValue>
                                    _maxConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _maxType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _maxType),
                                    _maxConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _maxConsumer =
                        (builder, supplier) -> {
                            builder.setMax(_maxConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _strPatternConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _strPatternConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _strPatternType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _strPatternType),
                                    _strPatternConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _strPatternConsumer =
                        (builder, supplier) -> {
                            builder.setStrPattern(_strPatternConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.DecimalPrecision ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision>>
                _precisionConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.DecimalPrecision>
                                    _precisionConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _precisionType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _precisionType),
                                    _precisionConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _precisionConsumer =
                        (builder, supplier) -> {
                            builder.setPrecision(_precisionConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.ScalarType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.ScalarType>
                _scalarTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _scalarTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _scalarTypeConsumer =
                        (builder, supplier) -> {
                            builder.setScalarType(_scalarTypeConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.RangeValue ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.RangeValue>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _minSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.RangeValue,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _minSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _minType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _minType),
                                    pInner1,
                                    _minSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _minSupplier =
                        (p, consumer) -> {
                            _minSupplierInner1.accept(p.getMin(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.RangeValue ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.RangeValue>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _maxSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.RangeValue,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _maxSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _maxType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _maxType),
                                    pInner1,
                                    _maxSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _maxSupplier =
                        (p, consumer) -> {
                            _maxSupplierInner1.accept(p.getMax(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _strPatternSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _strPatternSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _strPatternType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _strPatternType),
                                    pInner1,
                                    _strPatternSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _strPatternSupplier =
                        (p, consumer) -> {
                            _strPatternSupplierInner1.accept(p.getStrPattern(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.DecimalPrecision ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.DecimalPrecision>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _precisionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.DecimalPrecision,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _precisionSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _precisionType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _precisionType),
                                    pInner1,
                                    _precisionSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _precisionSupplier =
                        (p, consumer) -> {
                            _precisionSupplierInner1.accept(p.getPrecision(), consumer);
                        };
        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.ScalarType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _scalarTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _scalarTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _scalarTypeSupplier =
                        (p, consumer) -> {
                            _scalarTypeSupplierInner1.accept(p.getScalarType(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ScalarDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta minMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_minSupplier),
                        java.util.Optional.of(_minConsumer),
                        java.util.Optional.of(_minSupplierInner1),
                        java.util.Optional.of(_minConsumerInner1),
                        _minType,
                        FIELD_MIN,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta maxMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_maxSupplier),
                        java.util.Optional.of(_maxConsumer),
                        java.util.Optional.of(_maxSupplierInner1),
                        java.util.Optional.of(_maxConsumerInner1),
                        _maxType,
                        FIELD_MAX,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta strPatternMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_strPatternSupplier),
                        java.util.Optional.of(_strPatternConsumer),
                        java.util.Optional.of(_strPatternSupplierInner1),
                        java.util.Optional.of(_strPatternConsumerInner1),
                        _strPatternType,
                        FIELD_STRPATTERN,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta precisionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_precisionSupplier),
                        java.util.Optional.of(_precisionConsumer),
                        java.util.Optional.of(_precisionSupplierInner1),
                        java.util.Optional.of(_precisionConsumerInner1),
                        _precisionType,
                        FIELD_PRECISION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta scalarTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_scalarTypeSupplier),
                        java.util.Optional.of(_scalarTypeConsumer),
                        java.util.Optional.of(_scalarTypeSupplierInner1),
                        java.util.Optional.of(_scalarTypeConsumerInner1),
                        _scalarTypeType,
                        FIELD_SCALARTYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ScalarDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl();
        }

        @Override
        public ScalarDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.ScalarDataType._ScalarDataTypeBuilderImpl(cc);
        }

        public ScalarDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ScalarDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_MIN, minMeta);
                                        put(FIELD_MAX, maxMeta);
                                        put(FIELD_STRPATTERN, strPatternMeta);
                                        put(FIELD_PRECISION, precisionMeta);
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(FIELD_SCALARTYPE, scalarTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ScalarDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_MIN:
                    return FIELD_MIN;
                case FIELD_ID_MAX:
                    return FIELD_MAX;
                case FIELD_ID_STRPATTERN:
                    return FIELD_STRPATTERN;
                case FIELD_ID_PRECISION:
                    return FIELD_PRECISION;
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_SCALARTYPE:
                    return FIELD_SCALARTYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.ScalarDataType{ExtendedAttribs:optional<map<string,string>;>;ScalarType:schemarise.alfa.runtime.model.ScalarType[a20ec375];TypeDefName:optional<string;>;max:optional<schemarise.alfa.runtime.model.RangeValue[4896a1e];>;min:optional<schemarise.alfa.runtime.model.RangeValue[4896a1e];>;precision:optional<schemarise.alfa.runtime.model.DecimalPrecision[4fb9a62f];>;strPattern:optional<string;>;}
            schemarise.alfa.runtime.model.ScalarDataType{ScalarType:schemarise.alfa.runtime.model.ScalarType[a20ec375];}
            */
            return "ef043735:fd34056e";
        }
    }
    // </editor-fold>

}
