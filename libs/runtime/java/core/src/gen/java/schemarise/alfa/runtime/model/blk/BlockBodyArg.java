// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.blk;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface BlockBodyArg extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.blk.ArgType getType();

    java.lang.String getName();

    java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> getCheck();

    java.util.Optional<java.lang.String> getText();

    java.util.Optional<java.lang.Boolean> getSpellcheck();

    java.util.Optional<java.util.List<java.util.List<java.lang.String>>> getOptions();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static BlockBodyArgBuilder builder() {
        return new schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl();
    }

    public static BlockBodyArgBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface BlockBodyArgBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        BlockBodyArgBuilder setType(schemarise.alfa.runtime.model.blk.ArgType v);

        schemarise.alfa.runtime.model.blk.ArgType getType();

        BlockBodyArgBuilder setName(java.lang.String v);

        java.lang.String getName();

        BlockBodyArgBuilder setCheck(
                java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> v);

        BlockBodyArgBuilder setCheck(schemarise.alfa.runtime.model.blk.CheckType v);

        java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> getCheck();

        BlockBodyArgBuilder setText(java.util.Optional<java.lang.String> v);

        BlockBodyArgBuilder setText(java.lang.String v);

        java.util.Optional<java.lang.String> getText();

        BlockBodyArgBuilder setSpellcheck(java.util.Optional<java.lang.Boolean> v);

        BlockBodyArgBuilder setSpellcheck(boolean v);

        java.util.Optional<java.lang.Boolean> getSpellcheck();

        BlockBodyArgBuilder setOptions(
                java.util.Optional<java.util.List<java.util.List<java.lang.String>>> v);

        BlockBodyArgBuilder setOptions(java.util.List<java.util.List<java.lang.String>> v);

        java.util.Optional<java.util.List<java.util.List<java.lang.String>>> getOptions();

        BlockBodyArg build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _BlockBodyArgBuilderImpl extends _BlockBodyArg__Base__
            implements BlockBodyArgBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _BlockBodyArgBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _BlockBodyArgBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setCheck(java.util.Optional.empty());
            setText(java.util.Optional.empty());
            setSpellcheck(java.util.Optional.empty());
            setOptions(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor.INSTANCE;
        }

        public BlockBodyArgBuilder setType(schemarise.alfa.runtime.model.blk.ArgType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Type", v);
            this._type = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_TYPE);
            return this;
        }

        public BlockBodyArgBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_NAME);
            return this;
        }

        public BlockBodyArgBuilder setCheck(
                java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Check", v);
            this._check = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_CHECK);
            return this;
        }

        public BlockBodyArgBuilder setCheck(schemarise.alfa.runtime.model.blk.CheckType v) {
            this._check = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_CHECK);
            return this;
        }

        public BlockBodyArgBuilder setText(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Text", v);
            this._text = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_TEXT);
            return this;
        }

        public BlockBodyArgBuilder setText(java.lang.String v) {
            this._text = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_TEXT);
            return this;
        }

        public BlockBodyArgBuilder setSpellcheck(java.util.Optional<java.lang.Boolean> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Spellcheck", v);
            this._spellcheck = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_SPELLCHECK);
            return this;
        }

        public BlockBodyArgBuilder setSpellcheck(boolean v) {
            this._spellcheck = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_SPELLCHECK);
            return this;
        }

        public BlockBodyArgBuilder setOptions(
                java.util.Optional<java.util.List<java.util.List<java.lang.String>>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Options", v);
            this._options = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_OPTIONS);
            return this;
        }

        public BlockBodyArgBuilder setOptions(java.util.List<java.util.List<java.lang.String>> v) {
            this._options = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                            .FIELD_ID_OPTIONS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "type":
                    setType((schemarise.alfa.runtime.model.blk.ArgType) val);
                    break;
                case "name":
                    setName((java.lang.String) val);
                    break;
                case "check":
                    setCheck((java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType>) val);
                    break;
                case "text":
                    setText((java.util.Optional<java.lang.String>) val);
                    break;
                case "spellcheck":
                    setSpellcheck((java.util.Optional<java.lang.Boolean>) val);
                    break;
                case "options":
                    setOptions(
                            (java.util.Optional<java.util.List<java.util.List<java.lang.String>>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public BlockBodyArg build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor.INSTANCE);

            BlockBodyArg obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (BlockBodyArg)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _type,
                                                _name,
                                                _check,
                                                _text,
                                                _spellcheck,
                                                _options);
            else
                obj =
                        new schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgConcrete(
                                _type, _name, _check, _text, _spellcheck, _options);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.BlockBodyArg",
                    new java.lang.String[] {
                        "type", "name", "check", "text", "spellcheck", "options"
                    },
                    new java.lang.Object[] {_type, _name, _check, _text, _spellcheck, _options});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _BlockBodyArgConcrete extends _BlockBodyArg__Base__ implements BlockBodyArg {

        private _BlockBodyArgConcrete() {
            super();
        }

        private _BlockBodyArgConcrete(
                schemarise.alfa.runtime.model.blk.ArgType _type,
                java.lang.String _name,
                java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> _check,
                java.util.Optional<java.lang.String> _text,
                java.util.Optional<java.lang.Boolean> _spellcheck,
                java.util.Optional<java.util.List<java.util.List<java.lang.String>>> _options) {
            super(_type, _name, _check, _text, _spellcheck, _options);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _BlockBodyArg__Base__ {
        public schemarise.alfa.runtime.model.blk.ArgType _type;
        public java.lang.String _name;
        public java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> _check;
        public java.util.Optional<java.lang.String> _text;
        public java.util.Optional<java.lang.Boolean> _spellcheck;
        public java.util.Optional<java.util.List<java.util.List<java.lang.String>>> _options;

        public _BlockBodyArg__Base__() {}

        public _BlockBodyArg__Base__(
                schemarise.alfa.runtime.model.blk.ArgType _type,
                java.lang.String _name,
                java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> _check,
                java.util.Optional<java.lang.String> _text,
                java.util.Optional<java.lang.Boolean> _spellcheck,
                java.util.Optional<java.util.List<java.util.List<java.lang.String>>> _options) {
            this._type = _type;
            this._name = _name;
            this._check = _check;
            this._text = _text;
            this._spellcheck = _spellcheck;
            this._options = _options;
        }

        public schemarise.alfa.runtime.model.blk.ArgType getType() {
            return _type;
        }

        public java.lang.String getName() {
            return _name;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType> getCheck() {
            return _check;
        }

        public java.util.Optional<java.lang.String> getText() {
            return _text;
        }

        public java.util.Optional<java.lang.Boolean> getSpellcheck() {
            return _spellcheck;
        }

        public java.util.Optional<java.util.List<java.util.List<java.lang.String>>> getOptions() {
            return _options;
        }

        public int hashCode() {
            return java.util.Objects.hash(_type, _name, _check, _text, _spellcheck, _options);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.BlockBodyArg",
                    new java.lang.String[] {
                        "type", "name", "check", "text", "spellcheck", "options"
                    },
                    new java.lang.Object[] {_type, _name, _check, _text, _spellcheck, _options});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgConcrete))
                return false;
            schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgConcrete rhs =
                    (schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgConcrete) o;
            return java.util.Objects.equals(_type, rhs._type)
                    && java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_check, rhs._check)
                    && java.util.Objects.equals(_text, rhs._text)
                    && java.util.Objects.equals(_spellcheck, rhs._spellcheck)
                    && java.util.Objects.equals(_options, rhs._options);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "type":
                    return _type;
                case "name":
                    return _name;
                case "check":
                    return _check;
                case "text":
                    return _text;
                case "spellcheck":
                    return _spellcheck;
                case "options":
                    return _options;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getType().validate(__builderConfig);

            if (getCheck().isPresent()) {
                getCheck().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class BlockBodyArgDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.blk.BlockBodyArg";
        public static schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.blk.BlockBodyArg.BlockBodyArgDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TYPE = 0;
        public static final String FIELD_TYPE = "type";

        public static final short FIELD_ID_NAME = 1;
        public static final String FIELD_NAME = "name";

        public static final short FIELD_ID_CHECK = 2;
        public static final String FIELD_CHECK = "check";

        public static final short FIELD_ID_TEXT = 3;
        public static final String FIELD_TEXT = "text";

        public static final short FIELD_ID_SPELLCHECK = 4;
        public static final String FIELD_SPELLCHECK = "spellcheck";

        public static final short FIELD_ID_OPTIONS = 5;
        public static final String FIELD_OPTIONS = "options";

        private schemarise.alfa.runtime.model.UdtDataType _typeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.blk.ArgType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _checkType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.blk.CheckType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _textType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _spellcheckType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.booleanType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _optionsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ListDataType.builder()
                                                        .setComponentType(
                                                                schemarise.alfa.runtime.model
                                                                        .ScalarDataType.builder()
                                                                        .setScalarType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .ScalarType
                                                                                        .stringType)
                                                                        .build())
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.blk.ArgType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.blk.ArgType>
                _typeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _typeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeConsumer =
                        (builder, supplier) -> {
                            builder.setType(_typeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.blk.CheckType ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType>>
                _checkConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.blk.CheckType>
                                    _checkConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _checkType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _checkType),
                                    _checkConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _checkConsumer =
                        (builder, supplier) -> {
                            builder.setCheck(_checkConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _textConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _textConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _textType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _textType),
                                    _textConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _textConsumer =
                        (builder, supplier) -> {
                            builder.setText(_textConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Boolean>>
                _spellcheckConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                                    _spellcheckConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.booleanValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _spellcheckType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _spellcheckType),
                                    _spellcheckConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _spellcheckConsumer =
                        (builder, supplier) -> {
                            builder.setSpellcheck(_spellcheckConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< list< string > > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.List<java.util.List<java.lang.String>>>>
                _optionsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<java.util.List<java.lang.String>>>
                                    _optionsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime
                                                                        .DataSupplier,
                                                                java.util.List<java.lang.String>>
                                                        _optionsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    java.lang
                                                                                            .String>
                                                                            _optionsConsumerInner4 =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .stringValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .ListDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .ListDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _optionsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getComponentType())
                                                                                                                        .getComponentType()));
                                                                                    };
                                                                    return supplierInner3.listValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ListDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _optionsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            _optionsConsumerInner4);
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _optionsType)
                                                                        .getComponentType()),
                                                        _optionsConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _optionsType),
                                    _optionsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _optionsConsumer =
                        (builder, supplier) -> {
                            builder.setOptions(_optionsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.blk.ArgType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.ArgType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _typeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplier =
                        (p, consumer) -> {
                            _typeSupplierInner1.accept(p.getType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.blk.CheckType ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.blk.CheckType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _checkSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.blk.CheckType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _checkSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _checkType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _checkType),
                                    pInner1,
                                    _checkSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _checkSupplier =
                        (p, consumer) -> {
                            _checkSupplierInner1.accept(p.getCheck(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _textSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _textSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _textType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _textType),
                                    pInner1,
                                    _textSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _textSupplier =
                        (p, consumer) -> {
                            _textSupplierInner1.accept(p.getText(), consumer);
                        };
        /* -- Supplier boolean ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Boolean>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _spellcheckSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Boolean,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _spellcheckSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _spellcheckType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _spellcheckType),
                                    pInner1,
                                    _spellcheckSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _spellcheckSupplier =
                        (p, consumer) -> {
                            _spellcheckSupplierInner1.accept(p.getSpellcheck(), consumer);
                        };
        /* -- Supplier list< list< string > > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.List<java.util.List<java.lang.String>>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _optionsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<java.util.List<java.lang.String>>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _optionsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.util.List<java.lang.String>,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _optionsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    java.util.function.BiConsumer<
                                                                                    java.lang
                                                                                            .String,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _optionsSupplierInner4 =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .ListDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .ListDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _optionsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getComponentType())
                                                                                                                        .getComponentType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ListDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _optionsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3,
                                                                            _optionsSupplierInner4);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _optionsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _optionsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _optionsType),
                                    pInner1,
                                    _optionsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.BlockBodyArg,
                        com.schemarise.alfa.runtime.DataConsumer>
                _optionsSupplier =
                        (p, consumer) -> {
                            _optionsSupplierInner1.accept(p.getOptions(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                BlockBodyArg, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta typeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeSupplier),
                        java.util.Optional.of(_typeConsumer),
                        java.util.Optional.of(_typeSupplierInner1),
                        java.util.Optional.of(_typeConsumerInner1),
                        _typeType,
                        FIELD_TYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta checkMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_checkSupplier),
                        java.util.Optional.of(_checkConsumer),
                        java.util.Optional.of(_checkSupplierInner1),
                        java.util.Optional.of(_checkConsumerInner1),
                        _checkType,
                        FIELD_CHECK,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta textMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_textSupplier),
                        java.util.Optional.of(_textConsumer),
                        java.util.Optional.of(_textSupplierInner1),
                        java.util.Optional.of(_textConsumerInner1),
                        _textType,
                        FIELD_TEXT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta spellcheckMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_spellcheckSupplier),
                        java.util.Optional.of(_spellcheckConsumer),
                        java.util.Optional.of(_spellcheckSupplierInner1),
                        java.util.Optional.of(_spellcheckConsumerInner1),
                        _spellcheckType,
                        FIELD_SPELLCHECK,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta optionsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_optionsSupplier),
                        java.util.Optional.of(_optionsConsumer),
                        java.util.Optional.of(_optionsSupplierInner1),
                        java.util.Optional.of(_optionsConsumerInner1),
                        _optionsType,
                        FIELD_OPTIONS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public BlockBodyArgBuilder builder() {
            return new schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl();
        }

        @Override
        public BlockBodyArgBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.blk.BlockBodyArg._BlockBodyArgBuilderImpl(cc);
        }

        public BlockBodyArgDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<BlockBodyArg>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TYPE, typeMeta);
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_CHECK, checkMeta);
                                        put(FIELD_TEXT, textMeta);
                                        put(FIELD_SPELLCHECK, spellcheckMeta);
                                        put(FIELD_OPTIONS, optionsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<BlockBodyArg>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TYPE:
                    return FIELD_TYPE;
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_CHECK:
                    return FIELD_CHECK;
                case FIELD_ID_TEXT:
                    return FIELD_TEXT;
                case FIELD_ID_SPELLCHECK:
                    return FIELD_SPELLCHECK;
                case FIELD_ID_OPTIONS:
                    return FIELD_OPTIONS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.blk.BlockBodyArg{check:optional<schemarise.alfa.runtime.model.blk.CheckType[465bdc5c];>;name:string;options:optional<list<list<string>>;>;spellcheck:optional<boolean;>;text:optional<string;>;type:schemarise.alfa.runtime.model.blk.ArgType[88618ddf];}
            schemarise.alfa.runtime.model.blk.BlockBodyArg{name:string;type:schemarise.alfa.runtime.model.blk.ArgType[88618ddf];}
            */
            return "b83e9cda:a17e6091";
        }
    }
    // </editor-fold>

}
