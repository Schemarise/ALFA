// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TableDef extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.UdtVersionedName getUdtName();

    java.util.List<schemarise.alfa.runtime.model.ColumnDef> getColumns();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TableDefBuilder builder() {
        return new schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl();
    }

    public static TableDefBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc, schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TableDefBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TableDefBuilder setUdtName(schemarise.alfa.runtime.model.UdtVersionedName v);

        schemarise.alfa.runtime.model.UdtVersionedName getUdtName();

        TableDefBuilder addColumns(schemarise.alfa.runtime.model.ColumnDef e);

        TableDefBuilder addAllColumns(java.util.List<schemarise.alfa.runtime.model.ColumnDef> all);

        java.util.List<schemarise.alfa.runtime.model.ColumnDef> getColumns();

        TableDef build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TableDefBuilderImpl extends _TableDef__Base__ implements TableDefBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TableDefBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TableDefBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.INSTANCE;
        }

        public TableDefBuilder setUdtName(schemarise.alfa.runtime.model.UdtVersionedName v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtName", v);
            this._udtName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.FIELD_ID_UDTNAME);
            return this;
        }

        private void createColumns() {
            this._columns = new java.util.ArrayList<>();
        }

        public TableDefBuilder addColumns(schemarise.alfa.runtime.model.ColumnDef e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Columns", e);
            if (this._columns == null) createColumns();
            this._columns.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.FIELD_ID_COLUMNS);
            return this;
        }

        public TableDefBuilder setColumns(int index, schemarise.alfa.runtime.model.ColumnDef e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Columns", e);
            if (this._columns == null) createColumns();
            this._columns.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.FIELD_ID_COLUMNS);
            return this;
        }

        public TableDefBuilder addAllColumns(
                java.util.List<schemarise.alfa.runtime.model.ColumnDef> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Columns", all);
            if (this._columns == null) createColumns();
            this._columns.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.FIELD_ID_COLUMNS);
            return this;
        }

        private TableDefBuilder setColumns(
                java.util.List<schemarise.alfa.runtime.model.ColumnDef> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Columns", all);
            this._columns = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.FIELD_ID_COLUMNS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "UdtName":
                    setUdtName((schemarise.alfa.runtime.model.UdtVersionedName) val);
                    break;
                case "Columns":
                    setColumns((java.util.List<schemarise.alfa.runtime.model.ColumnDef>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TableDef build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.INSTANCE);

            TableDef obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TableDef)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _udtName,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .TableDef.TableDefDescriptor
                                                                        .INSTANCE
                                                                        ._columnsSupplierInner1,
                                                                _columns));
            else
                obj =
                        new schemarise.alfa.runtime.model.TableDef._TableDefConcrete(
                                _udtName,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.TableDef.TableDefDescriptor
                                                .INSTANCE
                                                ._columnsSupplierInner1,
                                        _columns));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TableDef",
                    new java.lang.String[] {"UdtName", "Columns"},
                    new java.lang.Object[] {_udtName, _columns});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TableDefConcrete extends _TableDef__Base__ implements TableDef {

        private _TableDefConcrete() {
            super();
        }

        private _TableDefConcrete(
                schemarise.alfa.runtime.model.UdtVersionedName _udtName,
                java.util.List<schemarise.alfa.runtime.model.ColumnDef> _columns) {
            super(_udtName, _columns);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TableDef__Base__ {
        public schemarise.alfa.runtime.model.UdtVersionedName _udtName;
        public java.util.List<schemarise.alfa.runtime.model.ColumnDef> _columns;

        public _TableDef__Base__() {}

        public _TableDef__Base__(
                schemarise.alfa.runtime.model.UdtVersionedName _udtName,
                java.util.List<schemarise.alfa.runtime.model.ColumnDef> _columns) {
            this._udtName = _udtName;
            this._columns = _columns;
        }

        public schemarise.alfa.runtime.model.UdtVersionedName getUdtName() {
            return _udtName;
        }

        public java.util.List<schemarise.alfa.runtime.model.ColumnDef> getColumns() {
            return _columns;
        }

        public int hashCode() {
            return java.util.Objects.hash(_udtName, _columns);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TableDef",
                    new java.lang.String[] {"UdtName", "Columns"},
                    new java.lang.Object[] {_udtName, _columns});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.TableDef._TableDefConcrete))
                return false;
            schemarise.alfa.runtime.model.TableDef._TableDefConcrete rhs =
                    (schemarise.alfa.runtime.model.TableDef._TableDefConcrete) o;
            return java.util.Objects.equals(_udtName, rhs._udtName)
                    && java.util.Objects.equals(_columns, rhs._columns);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TableDef.TableDefDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "UdtName":
                    return _udtName;
                case "Columns":
                    return _columns;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getUdtName().validate(__builderConfig);
            java.util.stream.IntStream.range(0, getColumns().size())
                    .forEach(
                            e0 -> {
                                getColumns().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TableDefDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TableDef";
        public static schemarise.alfa.runtime.model.TableDef.TableDefDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.TableDef.TableDefDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_UDTNAME = 0;
        public static final String FIELD_UDTNAME = "UdtName";

        public static final short FIELD_ID_COLUMNS = 1;
        public static final String FIELD_COLUMNS = "Columns";

        private schemarise.alfa.runtime.model.UdtDataType _udtNameType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtVersionedName")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _columnsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.ColumnDef")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtVersionedName>
                _udtNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtNameConsumer =
                        (builder, supplier) -> {
                            builder.setUdtName(_udtNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.ColumnDef > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.ColumnDef>>
                _columnsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.ColumnDef>
                                    _columnsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _columnsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _columnsType),
                                    _columnsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _columnsConsumer =
                        (builder, supplier) -> {
                            builder.addAllColumns(_columnsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtNameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplier =
                        (p, consumer) -> {
                            _udtNameSupplierInner1.accept(p.getUdtName(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.ColumnDef > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.ColumnDef>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _columnsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.ColumnDef,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _columnsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _columnsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _columnsType),
                                    pInner1,
                                    _columnsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _columnsSupplier =
                        (p, consumer) -> {
                            _columnsSupplierInner1.accept(p.getColumns(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TableDef, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta udtNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtNameSupplier),
                        java.util.Optional.of(_udtNameConsumer),
                        java.util.Optional.of(_udtNameSupplierInner1),
                        java.util.Optional.of(_udtNameConsumerInner1),
                        _udtNameType,
                        FIELD_UDTNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta columnsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_columnsSupplier),
                        java.util.Optional.of(_columnsConsumer),
                        java.util.Optional.of(_columnsSupplierInner1),
                        java.util.Optional.of(_columnsConsumerInner1),
                        _columnsType,
                        FIELD_COLUMNS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TableDefBuilder builder() {
            return new schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl();
        }

        @Override
        public TableDefBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TableDef._TableDefBuilderImpl(cc);
        }

        public TableDefDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TableDef>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_UDTNAME, udtNameMeta);
                                        put(FIELD_COLUMNS, columnsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TableDef>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_UDTNAME:
                    return FIELD_UDTNAME;
                case FIELD_ID_COLUMNS:
                    return FIELD_COLUMNS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TableDef{Columns:list<schemarise.alfa.runtime.model.ColumnDef[6ae82630]>;UdtName:schemarise.alfa.runtime.model.UdtVersionedName[dd07c725];}
            schemarise.alfa.runtime.model.TableDef{Columns:list<schemarise.alfa.runtime.model.ColumnDef[ebaf30fc]>;UdtName:schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb];}
            */
            return "c59d9793:7caf1935";
        }
    }
    // </editor-fold>

}
