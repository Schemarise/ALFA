// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionExpression__RangeExpr extends com.schemarise.alfa.runtime.Record {

    boolean getNotIn();

    schemarise.alfa.runtime.model.RangeValue getStart();

    schemarise.alfa.runtime.model.RangeValue getEnd();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionExpression__RangeExprBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                ._DecisionExpression__RangeExprBuilderImpl();
    }

    public static DecisionExpression__RangeExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                    .DecisionExpression__RangeExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                    ._DecisionExpression__RangeExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionExpression__RangeExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        DecisionExpression__RangeExprBuilder setNotIn(boolean v);

        boolean getNotIn();

        DecisionExpression__RangeExprBuilder setStart(schemarise.alfa.runtime.model.RangeValue v);

        schemarise.alfa.runtime.model.RangeValue getStart();

        DecisionExpression__RangeExprBuilder setEnd(schemarise.alfa.runtime.model.RangeValue v);

        schemarise.alfa.runtime.model.RangeValue getEnd();

        DecisionExpression__RangeExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionExpression__RangeExprBuilderImpl
            extends _DecisionExpression__RangeExpr__Base__
            implements DecisionExpression__RangeExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _DecisionExpression__RangeExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionExpression__RangeExprBuilderImpl(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                    .DecisionExpression__RangeExprDescriptor.INSTANCE;
        }

        public DecisionExpression__RangeExprBuilder setNotIn(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NotIn", v);
            this._notIn = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            .DecisionExpression__RangeExprDescriptor.FIELD_ID_NOTIN);
            return this;
        }

        public DecisionExpression__RangeExprBuilder setStart(
                schemarise.alfa.runtime.model.RangeValue v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Start", v);
            this._start = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            .DecisionExpression__RangeExprDescriptor.FIELD_ID_START);
            return this;
        }

        public DecisionExpression__RangeExprBuilder setEnd(
                schemarise.alfa.runtime.model.RangeValue v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("End", v);
            this._end = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            .DecisionExpression__RangeExprDescriptor.FIELD_ID_END);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "NotIn":
                    setNotIn((boolean) val);
                    break;
                case "Start":
                    setStart((schemarise.alfa.runtime.model.RangeValue) val);
                    break;
                case "End":
                    setEnd((schemarise.alfa.runtime.model.RangeValue) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionExpression__RangeExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            .DecisionExpression__RangeExprDescriptor.INSTANCE);

            DecisionExpression__RangeExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (DecisionExpression__RangeExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _notIn,
                                                _start,
                                                _end);
            else
                obj =
                        new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                ._DecisionExpression__RangeExprConcrete(_notIn, _start, _end);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__RangeExpr",
                    new java.lang.String[] {"NotIn", "Start", "End"},
                    new java.lang.Object[] {_notIn, _start, _end});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _DecisionExpression__RangeExprConcrete
            extends _DecisionExpression__RangeExpr__Base__
            implements DecisionExpression__RangeExpr {

        private _DecisionExpression__RangeExprConcrete() {
            super();
        }

        private _DecisionExpression__RangeExprConcrete(
                boolean _notIn,
                schemarise.alfa.runtime.model.RangeValue _start,
                schemarise.alfa.runtime.model.RangeValue _end) {
            super(_notIn, _start, _end);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _DecisionExpression__RangeExpr__Base__ {
        public boolean _notIn;
        public schemarise.alfa.runtime.model.RangeValue _start;
        public schemarise.alfa.runtime.model.RangeValue _end;

        public _DecisionExpression__RangeExpr__Base__() {}

        public _DecisionExpression__RangeExpr__Base__(
                boolean _notIn,
                schemarise.alfa.runtime.model.RangeValue _start,
                schemarise.alfa.runtime.model.RangeValue _end) {
            this._notIn = _notIn;
            this._start = _start;
            this._end = _end;
        }

        public boolean getNotIn() {
            return _notIn;
        }

        public schemarise.alfa.runtime.model.RangeValue getStart() {
            return _start;
        }

        public schemarise.alfa.runtime.model.RangeValue getEnd() {
            return _end;
        }

        public int hashCode() {
            return java.util.Objects.hash(_notIn, _start, _end);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__RangeExpr",
                    new java.lang.String[] {"NotIn", "Start", "End"},
                    new java.lang.Object[] {_notIn, _start, _end});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            ._DecisionExpression__RangeExprConcrete)) return false;
            schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                            ._DecisionExpression__RangeExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                            ._DecisionExpression__RangeExprConcrete)
                                    o;
            return _notIn == rhs._notIn
                    && java.util.Objects.equals(_start, rhs._start)
                    && java.util.Objects.equals(_end, rhs._end);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                    .DecisionExpression__RangeExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "NotIn":
                    return _notIn;
                case "Start":
                    return _start;
                case "End":
                    return _end;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getStart().validate(__builderConfig);
            getEnd().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionExpression__RangeExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.DecisionExpression__RangeExpr";
        public static schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                        .DecisionExpression__RangeExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                .DecisionExpression__RangeExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NOTIN = 0;
        public static final String FIELD_NOTIN = "NotIn";

        public static final short FIELD_ID_START = 1;
        public static final String FIELD_START = "Start";

        public static final short FIELD_ID_END = 2;
        public static final String FIELD_END = "End";

        private schemarise.alfa.runtime.model.ScalarDataType _notInType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _startType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.RangeValue")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _endType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.RangeValue")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .build();

        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _notInConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _notInType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                ._DecisionExpression__RangeExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _notInConsumer =
                        (builder, supplier) -> {
                            builder.setNotIn(_notInConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.RangeValue -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.RangeValue>
                _startConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _startType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                ._DecisionExpression__RangeExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _startConsumer =
                        (builder, supplier) -> {
                            builder.setStart(_startConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.RangeValue -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.RangeValue>
                _endConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _endType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                ._DecisionExpression__RangeExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _endConsumer =
                        (builder, supplier) -> {
                            builder.setEnd(_endConsumerInner1.apply(supplier));
                        };

        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _notInSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _notInType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _notInSupplier =
                        (p, consumer) -> {
                            _notInSupplierInner1.accept(p.getNotIn(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.RangeValue -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _startSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _startType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _startSupplier =
                        (p, consumer) -> {
                            _startSupplierInner1.accept(p.getStart(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.RangeValue -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _endSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _endType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _endSupplier =
                        (p, consumer) -> {
                            _endSupplierInner1.accept(p.getEnd(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionExpression__RangeExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta notInMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_notInSupplier),
                        java.util.Optional.of(_notInConsumer),
                        java.util.Optional.of(_notInSupplierInner1),
                        java.util.Optional.of(_notInConsumerInner1),
                        _notInType,
                        FIELD_NOTIN,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta startMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_startSupplier),
                        java.util.Optional.of(_startConsumer),
                        java.util.Optional.of(_startSupplierInner1),
                        java.util.Optional.of(_startConsumerInner1),
                        _startType,
                        FIELD_START,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta endMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_endSupplier),
                        java.util.Optional.of(_endConsumer),
                        java.util.Optional.of(_endSupplierInner1),
                        java.util.Optional.of(_endConsumerInner1),
                        _endType,
                        FIELD_END,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionExpression__RangeExprBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                    ._DecisionExpression__RangeExprBuilderImpl();
        }

        @Override
        public DecisionExpression__RangeExprBuilder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                    ._DecisionExpression__RangeExprBuilderImpl(cc);
        }

        public DecisionExpression__RangeExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__RangeExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NOTIN, notInMeta);
                                        put(FIELD_START, startMeta);
                                        put(FIELD_END, endMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__RangeExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NOTIN:
                    return FIELD_NOTIN;
                case FIELD_ID_START:
                    return FIELD_START;
                case FIELD_ID_END:
                    return FIELD_END;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionExpression__RangeExpr{End:schemarise.alfa.runtime.model.RangeValue[4896a1e];NotIn:boolean;Start:schemarise.alfa.runtime.model.RangeValue[4896a1e];}
            schemarise.alfa.runtime.model.DecisionExpression__RangeExpr{End:schemarise.alfa.runtime.model.RangeValue[4896a1e];NotIn:boolean;Start:schemarise.alfa.runtime.model.RangeValue[4896a1e];}
            */
            return "14312142:";
        }
    }
    // </editor-fold>

}
