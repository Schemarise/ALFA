// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression
        extends com.schemarise.alfa.runtime.Union, schemarise.alfa.runtime.model.IExpression {

    public default schemarise.alfa.runtime.model.Expression__NewExpr getNewExpr() {
        throw new IllegalStateException(
                "Accessing field NewExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isNewExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__RaiseExpr getRaiseExpr() {
        throw new IllegalStateException(
                "Accessing field RaiseExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isRaiseExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__FragmentExpr getFragmentExpr() {
        throw new IllegalStateException(
                "Accessing field FragmentExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isFragmentExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__MethodCallExpr getMethodCallExpr() {
        throw new IllegalStateException(
                "Accessing field MethodCallExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isMethodCallExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__MathExpr getMathExpr() {
        throw new IllegalStateException(
                "Accessing field MathExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isMathExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__RelativeExpr getRelativeExpr() {
        throw new IllegalStateException(
                "Accessing field RelativeExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isRelativeExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__EqualityExpr getEqualityExpr() {
        throw new IllegalStateException(
                "Accessing field EqualityExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isEqualityExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__LogicalExpr getLogicalExpr() {
        throw new IllegalStateException(
                "Accessing field LogicalExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLogicalExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__IfElseExpr getIfElseExpr() {
        throw new IllegalStateException(
                "Accessing field IfElseExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isIfElseExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.IDataType getNoneExpr() {
        throw new IllegalStateException(
                "Accessing field NoneExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isNoneExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.IDataType getThisExpr() {
        throw new IllegalStateException(
                "Accessing field ThisExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isThisExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__LiteralExpr getLiteralExpr() {
        throw new IllegalStateException(
                "Accessing field LiteralExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLiteralExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__IdentifierExpr getIdentifierExpr() {
        throw new IllegalStateException(
                "Accessing field IdentifierExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isIdentifierExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
            getQualifiedIdentifierExpr() {
        throw new IllegalStateException(
                "Accessing field QualifiedIdentifierExpr is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isQualifiedIdentifierExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr
            getOptionalQualifiedIdentifierExpr() {
        throw new IllegalStateException(
                "Accessing field OptionalQualifiedIdentifierExpr is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isOptionalQualifiedIdentifierExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__ParenthesisExpr getParenthesisExpr() {
        throw new IllegalStateException(
                "Accessing field ParenthesisExpr is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isParenthesisExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__ListExpr getListExpr() {
        throw new IllegalStateException(
                "Accessing field ListExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isListExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__TupleExpr getTupleExpr() {
        throw new IllegalStateException(
                "Accessing field TupleExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isTupleExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__SetExpr getSetExpr() {
        throw new IllegalStateException(
                "Accessing field SetExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isSetExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__MapExpr getMapExpr() {
        throw new IllegalStateException(
                "Accessing field MapExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isMapExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__ObjectExpr getObjectExpr() {
        throw new IllegalStateException(
                "Accessing field ObjectExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isObjectExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.IExpression getNotExpr() {
        throw new IllegalStateException(
                "Accessing field NotExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isNotExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.Expression__LambdaExpr getLambdaExpr() {
        throw new IllegalStateException(
                "Accessing field LambdaExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLambdaExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.DecisionTable getDecisionTableExpr() {
        throw new IllegalStateException(
                "Accessing field DecisionTableExpr is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isDecisionTableExpr() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseNewExpr">
    static final class CaseNewExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__NewExpr _newExpr;

        private CaseNewExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__NewExpr v) {
            this._newExpr = v;
            getNewExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__NewExpr getNewExpr() {
            return this._newExpr;
        }

        public boolean isNewExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "NewExpr";
        }

        public java.lang.Object caseValue() {
            return _newExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("NewExpr")) return _newExpr;
            else throw new IllegalStateException("Cannot access NewExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseRaiseExpr">
    static final class CaseRaiseExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__RaiseExpr _raiseExpr;

        private CaseRaiseExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__RaiseExpr v) {
            this._raiseExpr = v;
            getRaiseExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__RaiseExpr getRaiseExpr() {
            return this._raiseExpr;
        }

        public boolean isRaiseExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "RaiseExpr";
        }

        public java.lang.Object caseValue() {
            return _raiseExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("RaiseExpr")) return _raiseExpr;
            else throw new IllegalStateException("Cannot access RaiseExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseFragmentExpr">
    static final class CaseFragmentExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__FragmentExpr _fragmentExpr;

        private CaseFragmentExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__FragmentExpr v) {
            this._fragmentExpr = v;
            getFragmentExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__FragmentExpr getFragmentExpr() {
            return this._fragmentExpr;
        }

        public boolean isFragmentExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "FragmentExpr";
        }

        public java.lang.Object caseValue() {
            return _fragmentExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("FragmentExpr")) return _fragmentExpr;
            else throw new IllegalStateException("Cannot access FragmentExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseMethodCallExpr">
    static final class CaseMethodCallExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__MethodCallExpr _methodCallExpr;

        private CaseMethodCallExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__MethodCallExpr v) {
            this._methodCallExpr = v;
            getMethodCallExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__MethodCallExpr getMethodCallExpr() {
            return this._methodCallExpr;
        }

        public boolean isMethodCallExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "MethodCallExpr";
        }

        public java.lang.Object caseValue() {
            return _methodCallExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("MethodCallExpr")) return _methodCallExpr;
            else throw new IllegalStateException("Cannot access MethodCallExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseMathExpr">
    static final class CaseMathExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__MathExpr _mathExpr;

        private CaseMathExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__MathExpr v) {
            this._mathExpr = v;
            getMathExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__MathExpr getMathExpr() {
            return this._mathExpr;
        }

        public boolean isMathExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "MathExpr";
        }

        public java.lang.Object caseValue() {
            return _mathExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("MathExpr")) return _mathExpr;
            else throw new IllegalStateException("Cannot access MathExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseRelativeExpr">
    static final class CaseRelativeExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__RelativeExpr _relativeExpr;

        private CaseRelativeExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__RelativeExpr v) {
            this._relativeExpr = v;
            getRelativeExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__RelativeExpr getRelativeExpr() {
            return this._relativeExpr;
        }

        public boolean isRelativeExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "RelativeExpr";
        }

        public java.lang.Object caseValue() {
            return _relativeExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("RelativeExpr")) return _relativeExpr;
            else throw new IllegalStateException("Cannot access RelativeExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseEqualityExpr">
    static final class CaseEqualityExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__EqualityExpr _equalityExpr;

        private CaseEqualityExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__EqualityExpr v) {
            this._equalityExpr = v;
            getEqualityExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__EqualityExpr getEqualityExpr() {
            return this._equalityExpr;
        }

        public boolean isEqualityExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "EqualityExpr";
        }

        public java.lang.Object caseValue() {
            return _equalityExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("EqualityExpr")) return _equalityExpr;
            else throw new IllegalStateException("Cannot access EqualityExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseLogicalExpr">
    static final class CaseLogicalExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__LogicalExpr _logicalExpr;

        private CaseLogicalExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__LogicalExpr v) {
            this._logicalExpr = v;
            getLogicalExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__LogicalExpr getLogicalExpr() {
            return this._logicalExpr;
        }

        public boolean isLogicalExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "LogicalExpr";
        }

        public java.lang.Object caseValue() {
            return _logicalExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("LogicalExpr")) return _logicalExpr;
            else throw new IllegalStateException("Cannot access LogicalExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseIfElseExpr">
    static final class CaseIfElseExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__IfElseExpr _ifElseExpr;

        private CaseIfElseExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__IfElseExpr v) {
            this._ifElseExpr = v;
            getIfElseExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__IfElseExpr getIfElseExpr() {
            return this._ifElseExpr;
        }

        public boolean isIfElseExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "IfElseExpr";
        }

        public java.lang.Object caseValue() {
            return _ifElseExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("IfElseExpr")) return _ifElseExpr;
            else throw new IllegalStateException("Cannot access IfElseExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseNoneExpr">
    static final class CaseNoneExpr implements Expression {
        private schemarise.alfa.runtime.model.IDataType _noneExpr;

        private CaseNoneExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.IDataType v) {
            this._noneExpr = v;
            getNoneExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.IDataType getNoneExpr() {
            return this._noneExpr;
        }

        public boolean isNoneExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "NoneExpr";
        }

        public java.lang.Object caseValue() {
            return _noneExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("NoneExpr")) return _noneExpr;
            else throw new IllegalStateException("Cannot access NoneExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseThisExpr">
    static final class CaseThisExpr implements Expression {
        private schemarise.alfa.runtime.model.IDataType _thisExpr;

        private CaseThisExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.IDataType v) {
            this._thisExpr = v;
            getThisExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.IDataType getThisExpr() {
            return this._thisExpr;
        }

        public boolean isThisExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "ThisExpr";
        }

        public java.lang.Object caseValue() {
            return _thisExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ThisExpr")) return _thisExpr;
            else throw new IllegalStateException("Cannot access ThisExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseLiteralExpr">
    static final class CaseLiteralExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__LiteralExpr _literalExpr;

        private CaseLiteralExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__LiteralExpr v) {
            this._literalExpr = v;
            getLiteralExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__LiteralExpr getLiteralExpr() {
            return this._literalExpr;
        }

        public boolean isLiteralExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "LiteralExpr";
        }

        public java.lang.Object caseValue() {
            return _literalExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("LiteralExpr")) return _literalExpr;
            else throw new IllegalStateException("Cannot access LiteralExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseIdentifierExpr">
    static final class CaseIdentifierExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__IdentifierExpr _identifierExpr;

        private CaseIdentifierExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__IdentifierExpr v) {
            this._identifierExpr = v;
            getIdentifierExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__IdentifierExpr getIdentifierExpr() {
            return this._identifierExpr;
        }

        public boolean isIdentifierExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "IdentifierExpr";
        }

        public java.lang.Object caseValue() {
            return _identifierExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("IdentifierExpr")) return _identifierExpr;
            else throw new IllegalStateException("Cannot access IdentifierExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseQualifiedIdentifierExpr">
    static final class CaseQualifiedIdentifierExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                _qualifiedIdentifierExpr;

        private CaseQualifiedIdentifierExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr v) {
            this._qualifiedIdentifierExpr = v;
            getQualifiedIdentifierExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                getQualifiedIdentifierExpr() {
            return this._qualifiedIdentifierExpr;
        }

        public boolean isQualifiedIdentifierExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "QualifiedIdentifierExpr";
        }

        public java.lang.Object caseValue() {
            return _qualifiedIdentifierExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("QualifiedIdentifierExpr")) return _qualifiedIdentifierExpr;
            else throw new IllegalStateException("Cannot access QualifiedIdentifierExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseOptionalQualifiedIdentifierExpr">
    static final class CaseOptionalQualifiedIdentifierExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr
                _optionalQualifiedIdentifierExpr;

        private CaseOptionalQualifiedIdentifierExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr v) {
            this._optionalQualifiedIdentifierExpr = v;
            getOptionalQualifiedIdentifierExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr
                getOptionalQualifiedIdentifierExpr() {
            return this._optionalQualifiedIdentifierExpr;
        }

        public boolean isOptionalQualifiedIdentifierExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "OptionalQualifiedIdentifierExpr";
        }

        public java.lang.Object caseValue() {
            return _optionalQualifiedIdentifierExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("OptionalQualifiedIdentifierExpr"))
                return _optionalQualifiedIdentifierExpr;
            else throw new IllegalStateException("Cannot access OptionalQualifiedIdentifierExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseParenthesisExpr">
    static final class CaseParenthesisExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__ParenthesisExpr _parenthesisExpr;

        private CaseParenthesisExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__ParenthesisExpr v) {
            this._parenthesisExpr = v;
            getParenthesisExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__ParenthesisExpr getParenthesisExpr() {
            return this._parenthesisExpr;
        }

        public boolean isParenthesisExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "ParenthesisExpr";
        }

        public java.lang.Object caseValue() {
            return _parenthesisExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ParenthesisExpr")) return _parenthesisExpr;
            else throw new IllegalStateException("Cannot access ParenthesisExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseListExpr">
    static final class CaseListExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__ListExpr _listExpr;

        private CaseListExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__ListExpr v) {
            this._listExpr = v;
            getListExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__ListExpr getListExpr() {
            return this._listExpr;
        }

        public boolean isListExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "ListExpr";
        }

        public java.lang.Object caseValue() {
            return _listExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ListExpr")) return _listExpr;
            else throw new IllegalStateException("Cannot access ListExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseTupleExpr">
    static final class CaseTupleExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__TupleExpr _tupleExpr;

        private CaseTupleExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__TupleExpr v) {
            this._tupleExpr = v;
            getTupleExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__TupleExpr getTupleExpr() {
            return this._tupleExpr;
        }

        public boolean isTupleExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "TupleExpr";
        }

        public java.lang.Object caseValue() {
            return _tupleExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("TupleExpr")) return _tupleExpr;
            else throw new IllegalStateException("Cannot access TupleExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseSetExpr">
    static final class CaseSetExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__SetExpr _setExpr;

        private CaseSetExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__SetExpr v) {
            this._setExpr = v;
            getSetExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__SetExpr getSetExpr() {
            return this._setExpr;
        }

        public boolean isSetExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "SetExpr";
        }

        public java.lang.Object caseValue() {
            return _setExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("SetExpr")) return _setExpr;
            else throw new IllegalStateException("Cannot access SetExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseMapExpr">
    static final class CaseMapExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__MapExpr _mapExpr;

        private CaseMapExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__MapExpr v) {
            this._mapExpr = v;
            getMapExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__MapExpr getMapExpr() {
            return this._mapExpr;
        }

        public boolean isMapExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "MapExpr";
        }

        public java.lang.Object caseValue() {
            return _mapExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("MapExpr")) return _mapExpr;
            else throw new IllegalStateException("Cannot access MapExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseObjectExpr">
    static final class CaseObjectExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__ObjectExpr _objectExpr;

        private CaseObjectExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__ObjectExpr v) {
            this._objectExpr = v;
            getObjectExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__ObjectExpr getObjectExpr() {
            return this._objectExpr;
        }

        public boolean isObjectExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "ObjectExpr";
        }

        public java.lang.Object caseValue() {
            return _objectExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ObjectExpr")) return _objectExpr;
            else throw new IllegalStateException("Cannot access ObjectExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseNotExpr">
    static final class CaseNotExpr implements Expression {
        private schemarise.alfa.runtime.model.IExpression _notExpr;

        private CaseNotExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.IExpression v) {
            this._notExpr = v;
            getNotExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.IExpression getNotExpr() {
            return this._notExpr;
        }

        public boolean isNotExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "NotExpr";
        }

        public java.lang.Object caseValue() {
            return _notExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("NotExpr")) return _notExpr;
            else throw new IllegalStateException("Cannot access NotExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseLambdaExpr">
    static final class CaseLambdaExpr implements Expression {
        private schemarise.alfa.runtime.model.Expression__LambdaExpr _lambdaExpr;

        private CaseLambdaExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.Expression__LambdaExpr v) {
            this._lambdaExpr = v;
            getLambdaExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.Expression__LambdaExpr getLambdaExpr() {
            return this._lambdaExpr;
        }

        public boolean isLambdaExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "LambdaExpr";
        }

        public java.lang.Object caseValue() {
            return _lambdaExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("LambdaExpr")) return _lambdaExpr;
            else throw new IllegalStateException("Cannot access LambdaExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseDecisionTableExpr">
    static final class CaseDecisionTableExpr implements Expression {
        private schemarise.alfa.runtime.model.DecisionTable _decisionTableExpr;

        private CaseDecisionTableExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionTable v) {
            this._decisionTableExpr = v;
            getDecisionTableExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionTable getDecisionTableExpr() {
            return this._decisionTableExpr;
        }

        public boolean isDecisionTableExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "DecisionTableExpr";
        }

        public java.lang.Object caseValue() {
            return _decisionTableExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("DecisionTableExpr")) return _decisionTableExpr;
            else throw new IllegalStateException("Cannot access DecisionTableExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ExpressionBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl();
    }

    public static ExpressionBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ExpressionBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IExpression.IExpressionBuilder {
        ExpressionBuilder setNewExpr(schemarise.alfa.runtime.model.Expression__NewExpr v);

        ExpressionBuilder setRaiseExpr(schemarise.alfa.runtime.model.Expression__RaiseExpr v);

        ExpressionBuilder setFragmentExpr(schemarise.alfa.runtime.model.Expression__FragmentExpr v);

        ExpressionBuilder setMethodCallExpr(
                schemarise.alfa.runtime.model.Expression__MethodCallExpr v);

        ExpressionBuilder setMathExpr(schemarise.alfa.runtime.model.Expression__MathExpr v);

        ExpressionBuilder setRelativeExpr(schemarise.alfa.runtime.model.Expression__RelativeExpr v);

        ExpressionBuilder setEqualityExpr(schemarise.alfa.runtime.model.Expression__EqualityExpr v);

        ExpressionBuilder setLogicalExpr(schemarise.alfa.runtime.model.Expression__LogicalExpr v);

        ExpressionBuilder setIfElseExpr(schemarise.alfa.runtime.model.Expression__IfElseExpr v);

        ExpressionBuilder setNoneExpr(schemarise.alfa.runtime.model.IDataType v);

        ExpressionBuilder setThisExpr(schemarise.alfa.runtime.model.IDataType v);

        ExpressionBuilder setLiteralExpr(schemarise.alfa.runtime.model.Expression__LiteralExpr v);

        ExpressionBuilder setIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__IdentifierExpr v);

        ExpressionBuilder setQualifiedIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr v);

        ExpressionBuilder setOptionalQualifiedIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr v);

        ExpressionBuilder setParenthesisExpr(
                schemarise.alfa.runtime.model.Expression__ParenthesisExpr v);

        ExpressionBuilder setListExpr(schemarise.alfa.runtime.model.Expression__ListExpr v);

        ExpressionBuilder setTupleExpr(schemarise.alfa.runtime.model.Expression__TupleExpr v);

        ExpressionBuilder setSetExpr(schemarise.alfa.runtime.model.Expression__SetExpr v);

        ExpressionBuilder setMapExpr(schemarise.alfa.runtime.model.Expression__MapExpr v);

        ExpressionBuilder setObjectExpr(schemarise.alfa.runtime.model.Expression__ObjectExpr v);

        ExpressionBuilder setNotExpr(schemarise.alfa.runtime.model.IExpression v);

        ExpressionBuilder setLambdaExpr(schemarise.alfa.runtime.model.Expression__LambdaExpr v);

        ExpressionBuilder setDecisionTableExpr(schemarise.alfa.runtime.model.DecisionTable v);

        Expression build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ExpressionBuilderImpl implements ExpressionBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private schemarise.alfa.runtime.model.Expression__NewExpr _newExpr;
        private schemarise.alfa.runtime.model.Expression__RaiseExpr _raiseExpr;
        private schemarise.alfa.runtime.model.Expression__FragmentExpr _fragmentExpr;
        private schemarise.alfa.runtime.model.Expression__MethodCallExpr _methodCallExpr;
        private schemarise.alfa.runtime.model.Expression__MathExpr _mathExpr;
        private schemarise.alfa.runtime.model.Expression__RelativeExpr _relativeExpr;
        private schemarise.alfa.runtime.model.Expression__EqualityExpr _equalityExpr;
        private schemarise.alfa.runtime.model.Expression__LogicalExpr _logicalExpr;
        private schemarise.alfa.runtime.model.Expression__IfElseExpr _ifElseExpr;
        private schemarise.alfa.runtime.model.IDataType _noneExpr;
        private schemarise.alfa.runtime.model.IDataType _thisExpr;
        private schemarise.alfa.runtime.model.Expression__LiteralExpr _literalExpr;
        private schemarise.alfa.runtime.model.Expression__IdentifierExpr _identifierExpr;
        private schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                _qualifiedIdentifierExpr;
        private schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr
                _optionalQualifiedIdentifierExpr;
        private schemarise.alfa.runtime.model.Expression__ParenthesisExpr _parenthesisExpr;
        private schemarise.alfa.runtime.model.Expression__ListExpr _listExpr;
        private schemarise.alfa.runtime.model.Expression__TupleExpr _tupleExpr;
        private schemarise.alfa.runtime.model.Expression__SetExpr _setExpr;
        private schemarise.alfa.runtime.model.Expression__MapExpr _mapExpr;
        private schemarise.alfa.runtime.model.Expression__ObjectExpr _objectExpr;
        private schemarise.alfa.runtime.model.IExpression _notExpr;
        private schemarise.alfa.runtime.model.Expression__LambdaExpr _lambdaExpr;
        private schemarise.alfa.runtime.model.DecisionTable _decisionTableExpr;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "NewExpr":
                    return _newExpr;
                case "RaiseExpr":
                    return _raiseExpr;
                case "FragmentExpr":
                    return _fragmentExpr;
                case "MethodCallExpr":
                    return _methodCallExpr;
                case "MathExpr":
                    return _mathExpr;
                case "RelativeExpr":
                    return _relativeExpr;
                case "EqualityExpr":
                    return _equalityExpr;
                case "LogicalExpr":
                    return _logicalExpr;
                case "IfElseExpr":
                    return _ifElseExpr;
                case "NoneExpr":
                    return _noneExpr;
                case "ThisExpr":
                    return _thisExpr;
                case "LiteralExpr":
                    return _literalExpr;
                case "IdentifierExpr":
                    return _identifierExpr;
                case "QualifiedIdentifierExpr":
                    return _qualifiedIdentifierExpr;
                case "OptionalQualifiedIdentifierExpr":
                    return _optionalQualifiedIdentifierExpr;
                case "ParenthesisExpr":
                    return _parenthesisExpr;
                case "ListExpr":
                    return _listExpr;
                case "TupleExpr":
                    return _tupleExpr;
                case "SetExpr":
                    return _setExpr;
                case "MapExpr":
                    return _mapExpr;
                case "ObjectExpr":
                    return _objectExpr;
                case "NotExpr":
                    return _notExpr;
                case "LambdaExpr":
                    return _lambdaExpr;
                case "DecisionTableExpr":
                    return _decisionTableExpr;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _ExpressionBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ExpressionBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(24);
            __missingFields.set(0, 24);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE;
        }

        public ExpressionBuilder setNewExpr(schemarise.alfa.runtime.model.Expression__NewExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NewExpr", v);
            this._newExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_NEWEXPR);
            return this;
        }

        public ExpressionBuilder setRaiseExpr(
                schemarise.alfa.runtime.model.Expression__RaiseExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RaiseExpr", v);
            this._raiseExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_RAISEEXPR);
            return this;
        }

        public ExpressionBuilder setFragmentExpr(
                schemarise.alfa.runtime.model.Expression__FragmentExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FragmentExpr", v);
            this._fragmentExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_FRAGMENTEXPR);
            return this;
        }

        public ExpressionBuilder setMethodCallExpr(
                schemarise.alfa.runtime.model.Expression__MethodCallExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MethodCallExpr", v);
            this._methodCallExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_METHODCALLEXPR);
            return this;
        }

        public ExpressionBuilder setMathExpr(schemarise.alfa.runtime.model.Expression__MathExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MathExpr", v);
            this._mathExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_MATHEXPR);
            return this;
        }

        public ExpressionBuilder setRelativeExpr(
                schemarise.alfa.runtime.model.Expression__RelativeExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RelativeExpr", v);
            this._relativeExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_RELATIVEEXPR);
            return this;
        }

        public ExpressionBuilder setEqualityExpr(
                schemarise.alfa.runtime.model.Expression__EqualityExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EqualityExpr", v);
            this._equalityExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_EQUALITYEXPR);
            return this;
        }

        public ExpressionBuilder setLogicalExpr(
                schemarise.alfa.runtime.model.Expression__LogicalExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LogicalExpr", v);
            this._logicalExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LOGICALEXPR);
            return this;
        }

        public ExpressionBuilder setIfElseExpr(
                schemarise.alfa.runtime.model.Expression__IfElseExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IfElseExpr", v);
            this._ifElseExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_IFELSEEXPR);
            return this;
        }

        public ExpressionBuilder setNoneExpr(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NoneExpr", v);
            this._noneExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_NONEEXPR);
            return this;
        }

        public ExpressionBuilder setThisExpr(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ThisExpr", v);
            this._thisExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_THISEXPR);
            return this;
        }

        public ExpressionBuilder setLiteralExpr(
                schemarise.alfa.runtime.model.Expression__LiteralExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LiteralExpr", v);
            this._literalExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LITERALEXPR);
            return this;
        }

        public ExpressionBuilder setIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__IdentifierExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IdentifierExpr", v);
            this._identifierExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_IDENTIFIEREXPR);
            return this;
        }

        public ExpressionBuilder setQualifiedIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("QualifiedIdentifierExpr", v);
            this._qualifiedIdentifierExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_QUALIFIEDIDENTIFIEREXPR);
            return this;
        }

        public ExpressionBuilder setOptionalQualifiedIdentifierExpr(
                schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("OptionalQualifiedIdentifierExpr", v);
            this._optionalQualifiedIdentifierExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_OPTIONALQUALIFIEDIDENTIFIEREXPR);
            return this;
        }

        public ExpressionBuilder setParenthesisExpr(
                schemarise.alfa.runtime.model.Expression__ParenthesisExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ParenthesisExpr", v);
            this._parenthesisExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_PARENTHESISEXPR);
            return this;
        }

        public ExpressionBuilder setListExpr(schemarise.alfa.runtime.model.Expression__ListExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ListExpr", v);
            this._listExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LISTEXPR);
            return this;
        }

        public ExpressionBuilder setTupleExpr(
                schemarise.alfa.runtime.model.Expression__TupleExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TupleExpr", v);
            this._tupleExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_TUPLEEXPR);
            return this;
        }

        public ExpressionBuilder setSetExpr(schemarise.alfa.runtime.model.Expression__SetExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SetExpr", v);
            this._setExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_SETEXPR);
            return this;
        }

        public ExpressionBuilder setMapExpr(schemarise.alfa.runtime.model.Expression__MapExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapExpr", v);
            this._mapExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_MAPEXPR);
            return this;
        }

        public ExpressionBuilder setObjectExpr(
                schemarise.alfa.runtime.model.Expression__ObjectExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ObjectExpr", v);
            this._objectExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_OBJECTEXPR);
            return this;
        }

        public ExpressionBuilder setNotExpr(schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NotExpr", v);
            this._notExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_NOTEXPR);
            return this;
        }

        public ExpressionBuilder setLambdaExpr(
                schemarise.alfa.runtime.model.Expression__LambdaExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LambdaExpr", v);
            this._lambdaExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LAMBDAEXPR);
            return this;
        }

        public ExpressionBuilder setDecisionTableExpr(
                schemarise.alfa.runtime.model.DecisionTable v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DecisionTableExpr", v);
            this._decisionTableExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_DECISIONTABLEEXPR);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "NewExpr":
                    setNewExpr((schemarise.alfa.runtime.model.Expression__NewExpr) val);
                    break;
                case "RaiseExpr":
                    setRaiseExpr((schemarise.alfa.runtime.model.Expression__RaiseExpr) val);
                    break;
                case "FragmentExpr":
                    setFragmentExpr((schemarise.alfa.runtime.model.Expression__FragmentExpr) val);
                    break;
                case "MethodCallExpr":
                    setMethodCallExpr(
                            (schemarise.alfa.runtime.model.Expression__MethodCallExpr) val);
                    break;
                case "MathExpr":
                    setMathExpr((schemarise.alfa.runtime.model.Expression__MathExpr) val);
                    break;
                case "RelativeExpr":
                    setRelativeExpr((schemarise.alfa.runtime.model.Expression__RelativeExpr) val);
                    break;
                case "EqualityExpr":
                    setEqualityExpr((schemarise.alfa.runtime.model.Expression__EqualityExpr) val);
                    break;
                case "LogicalExpr":
                    setLogicalExpr((schemarise.alfa.runtime.model.Expression__LogicalExpr) val);
                    break;
                case "IfElseExpr":
                    setIfElseExpr((schemarise.alfa.runtime.model.Expression__IfElseExpr) val);
                    break;
                case "NoneExpr":
                    setNoneExpr((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "ThisExpr":
                    setThisExpr((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "LiteralExpr":
                    setLiteralExpr((schemarise.alfa.runtime.model.Expression__LiteralExpr) val);
                    break;
                case "IdentifierExpr":
                    setIdentifierExpr(
                            (schemarise.alfa.runtime.model.Expression__IdentifierExpr) val);
                    break;
                case "QualifiedIdentifierExpr":
                    setQualifiedIdentifierExpr(
                            (schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr)
                                    val);
                    break;
                case "OptionalQualifiedIdentifierExpr":
                    setOptionalQualifiedIdentifierExpr(
                            (schemarise.alfa.runtime.model
                                            .Expression__OptionalQualifiedIdentifierExpr)
                                    val);
                    break;
                case "ParenthesisExpr":
                    setParenthesisExpr(
                            (schemarise.alfa.runtime.model.Expression__ParenthesisExpr) val);
                    break;
                case "ListExpr":
                    setListExpr((schemarise.alfa.runtime.model.Expression__ListExpr) val);
                    break;
                case "TupleExpr":
                    setTupleExpr((schemarise.alfa.runtime.model.Expression__TupleExpr) val);
                    break;
                case "SetExpr":
                    setSetExpr((schemarise.alfa.runtime.model.Expression__SetExpr) val);
                    break;
                case "MapExpr":
                    setMapExpr((schemarise.alfa.runtime.model.Expression__MapExpr) val);
                    break;
                case "ObjectExpr":
                    setObjectExpr((schemarise.alfa.runtime.model.Expression__ObjectExpr) val);
                    break;
                case "NotExpr":
                    setNotExpr((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                case "LambdaExpr":
                    setLambdaExpr((schemarise.alfa.runtime.model.Expression__LambdaExpr) val);
                    break;
                case "DecisionTableExpr":
                    setDecisionTableExpr((schemarise.alfa.runtime.model.DecisionTable) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_NEWEXPR))
                return new CaseNewExpr(__builderConfig, _newExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_RAISEEXPR))
                return new CaseRaiseExpr(__builderConfig, _raiseExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_FRAGMENTEXPR))
                return new CaseFragmentExpr(__builderConfig, _fragmentExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_METHODCALLEXPR))
                return new CaseMethodCallExpr(__builderConfig, _methodCallExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_MATHEXPR))
                return new CaseMathExpr(__builderConfig, _mathExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_RELATIVEEXPR))
                return new CaseRelativeExpr(__builderConfig, _relativeExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_EQUALITYEXPR))
                return new CaseEqualityExpr(__builderConfig, _equalityExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LOGICALEXPR))
                return new CaseLogicalExpr(__builderConfig, _logicalExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_IFELSEEXPR))
                return new CaseIfElseExpr(__builderConfig, _ifElseExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_NONEEXPR))
                return new CaseNoneExpr(__builderConfig, _noneExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_THISEXPR))
                return new CaseThisExpr(__builderConfig, _thisExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LITERALEXPR))
                return new CaseLiteralExpr(__builderConfig, _literalExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_IDENTIFIEREXPR))
                return new CaseIdentifierExpr(__builderConfig, _identifierExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_QUALIFIEDIDENTIFIEREXPR))
                return new CaseQualifiedIdentifierExpr(__builderConfig, _qualifiedIdentifierExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_OPTIONALQUALIFIEDIDENTIFIEREXPR))
                return new CaseOptionalQualifiedIdentifierExpr(
                        __builderConfig, _optionalQualifiedIdentifierExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_PARENTHESISEXPR))
                return new CaseParenthesisExpr(__builderConfig, _parenthesisExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LISTEXPR))
                return new CaseListExpr(__builderConfig, _listExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_TUPLEEXPR))
                return new CaseTupleExpr(__builderConfig, _tupleExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_SETEXPR))
                return new CaseSetExpr(__builderConfig, _setExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_MAPEXPR))
                return new CaseMapExpr(__builderConfig, _mapExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_OBJECTEXPR))
                return new CaseObjectExpr(__builderConfig, _objectExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.FIELD_ID_NOTEXPR))
                return new CaseNotExpr(__builderConfig, _notExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_LAMBDAEXPR))
                return new CaseLambdaExpr(__builderConfig, _lambdaExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor
                            .FIELD_ID_DECISIONTABLEEXPR))
                return new CaseDecisionTableExpr(__builderConfig, _decisionTableExpr);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.Expression.ExpressionDescriptor.INSTANCE,
                    24,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression",
                    new java.lang.String[] {
                        "NewExpr",
                        "RaiseExpr",
                        "FragmentExpr",
                        "MethodCallExpr",
                        "MathExpr",
                        "RelativeExpr",
                        "EqualityExpr",
                        "LogicalExpr",
                        "IfElseExpr",
                        "NoneExpr",
                        "ThisExpr",
                        "LiteralExpr",
                        "IdentifierExpr",
                        "QualifiedIdentifierExpr",
                        "OptionalQualifiedIdentifierExpr",
                        "ParenthesisExpr",
                        "ListExpr",
                        "TupleExpr",
                        "SetExpr",
                        "MapExpr",
                        "ObjectExpr",
                        "NotExpr",
                        "LambdaExpr",
                        "DecisionTableExpr"
                    },
                    new java.lang.Object[] {
                        _newExpr,
                        _raiseExpr,
                        _fragmentExpr,
                        _methodCallExpr,
                        _mathExpr,
                        _relativeExpr,
                        _equalityExpr,
                        _logicalExpr,
                        _ifElseExpr,
                        _noneExpr,
                        _thisExpr,
                        _literalExpr,
                        _identifierExpr,
                        _qualifiedIdentifierExpr,
                        _optionalQualifiedIdentifierExpr,
                        _parenthesisExpr,
                        _listExpr,
                        _tupleExpr,
                        _setExpr,
                        _mapExpr,
                        _objectExpr,
                        _notExpr,
                        _lambdaExpr,
                        _decisionTableExpr
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ExpressionDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Expression";
        public static schemarise.alfa.runtime.model.Expression.ExpressionDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Expression.ExpressionDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NEWEXPR = 0;
        public static final String FIELD_NEWEXPR = "NewExpr";

        public static final short FIELD_ID_RAISEEXPR = 1;
        public static final String FIELD_RAISEEXPR = "RaiseExpr";

        public static final short FIELD_ID_FRAGMENTEXPR = 2;
        public static final String FIELD_FRAGMENTEXPR = "FragmentExpr";

        public static final short FIELD_ID_METHODCALLEXPR = 3;
        public static final String FIELD_METHODCALLEXPR = "MethodCallExpr";

        public static final short FIELD_ID_MATHEXPR = 4;
        public static final String FIELD_MATHEXPR = "MathExpr";

        public static final short FIELD_ID_RELATIVEEXPR = 5;
        public static final String FIELD_RELATIVEEXPR = "RelativeExpr";

        public static final short FIELD_ID_EQUALITYEXPR = 6;
        public static final String FIELD_EQUALITYEXPR = "EqualityExpr";

        public static final short FIELD_ID_LOGICALEXPR = 7;
        public static final String FIELD_LOGICALEXPR = "LogicalExpr";

        public static final short FIELD_ID_IFELSEEXPR = 8;
        public static final String FIELD_IFELSEEXPR = "IfElseExpr";

        public static final short FIELD_ID_NONEEXPR = 9;
        public static final String FIELD_NONEEXPR = "NoneExpr";

        public static final short FIELD_ID_THISEXPR = 10;
        public static final String FIELD_THISEXPR = "ThisExpr";

        public static final short FIELD_ID_LITERALEXPR = 11;
        public static final String FIELD_LITERALEXPR = "LiteralExpr";

        public static final short FIELD_ID_IDENTIFIEREXPR = 12;
        public static final String FIELD_IDENTIFIEREXPR = "IdentifierExpr";

        public static final short FIELD_ID_QUALIFIEDIDENTIFIEREXPR = 13;
        public static final String FIELD_QUALIFIEDIDENTIFIEREXPR = "QualifiedIdentifierExpr";

        public static final short FIELD_ID_OPTIONALQUALIFIEDIDENTIFIEREXPR = 14;
        public static final String FIELD_OPTIONALQUALIFIEDIDENTIFIEREXPR =
                "OptionalQualifiedIdentifierExpr";

        public static final short FIELD_ID_PARENTHESISEXPR = 15;
        public static final String FIELD_PARENTHESISEXPR = "ParenthesisExpr";

        public static final short FIELD_ID_LISTEXPR = 16;
        public static final String FIELD_LISTEXPR = "ListExpr";

        public static final short FIELD_ID_TUPLEEXPR = 17;
        public static final String FIELD_TUPLEEXPR = "TupleExpr";

        public static final short FIELD_ID_SETEXPR = 18;
        public static final String FIELD_SETEXPR = "SetExpr";

        public static final short FIELD_ID_MAPEXPR = 19;
        public static final String FIELD_MAPEXPR = "MapExpr";

        public static final short FIELD_ID_OBJECTEXPR = 20;
        public static final String FIELD_OBJECTEXPR = "ObjectExpr";

        public static final short FIELD_ID_NOTEXPR = 21;
        public static final String FIELD_NOTEXPR = "NotExpr";

        public static final short FIELD_ID_LAMBDAEXPR = 22;
        public static final String FIELD_LAMBDAEXPR = "LambdaExpr";

        public static final short FIELD_ID_DECISIONTABLEEXPR = 23;
        public static final String FIELD_DECISIONTABLEEXPR = "DecisionTableExpr";

        private schemarise.alfa.runtime.model.TupleDataType _newExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__NewExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__NewExpr
                                        .Expression__NewExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _raiseExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__RaiseExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__RaiseExpr
                                        .Expression__RaiseExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _fragmentExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__FragmentExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__FragmentExpr
                                        .Expression__FragmentExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _methodCallExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__MethodCallExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__MethodCallExpr
                                        .Expression__MethodCallExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _mathExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__MathExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__MathExpr
                                        .Expression__MathExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _relativeExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__RelativeExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__RelativeExpr
                                        .Expression__RelativeExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _equalityExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__EqualityExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__EqualityExpr
                                        .Expression__EqualityExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _logicalExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__LogicalExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__LogicalExpr
                                        .Expression__LogicalExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _ifElseExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__IfElseExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__IfElseExpr
                                        .Expression__IfElseExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _noneExprType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _thisExprType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _literalExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__LiteralExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__LiteralExpr
                                        .Expression__LiteralExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _identifierExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__IdentifierExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                        .Expression__IdentifierExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _qualifiedIdentifierExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr
                                        .Expression__QualifiedIdentifierExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _optionalQualifiedIdentifierExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model
                                        .Expression__OptionalQualifiedIdentifierExpr
                                        .Expression__OptionalQualifiedIdentifierExprDescriptor
                                        .INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _parenthesisExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__ParenthesisExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__ParenthesisExpr
                                        .Expression__ParenthesisExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _listExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__ListExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__ListExpr
                                        .Expression__ListExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _tupleExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__TupleExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__TupleExpr
                                        .Expression__TupleExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _setExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__SetExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__SetExpr
                                        .Expression__SetExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _mapExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__MapExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__MapExpr
                                        .Expression__MapExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _objectExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__ObjectExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__ObjectExpr
                                        .Expression__ObjectExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _notExprType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _lambdaExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Expression__LambdaExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.Expression__LambdaExpr
                                        .Expression__LambdaExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _decisionTableExprType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.DecisionTable")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            udtName : string,
            args : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__NewExpr>
                _newExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _newExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _newExprConsumer =
                        (builder, supplier) -> {
                            builder.setNewExpr(_newExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            severity : schemarise.alfa.runtime.model.asserts.SeverityType,
            dqType : schemarise.alfa.runtime.model.asserts.DataQualityType,
            constraintType : schemarise.alfa.runtime.model.asserts.ConstraintType,
            message : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__RaiseExpr>
                _raiseExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _raiseExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _raiseExprConsumer =
                        (builder, supplier) -> {
                            builder.setRaiseExpr(_raiseExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            udtName : string,
            args : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__FragmentExpr>
                _fragmentExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _fragmentExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fragmentExprConsumer =
                        (builder, supplier) -> {
                            builder.setFragmentExpr(_fragmentExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            name : string,
            builtin : boolean,
            args : list< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr>
                _methodCallExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _methodCallExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _methodCallExprConsumer =
                        (builder, supplier) -> {
                            builder.setMethodCallExpr(
                                    _methodCallExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.MathOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__MathExpr>
                _mathExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _mathExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _mathExprConsumer =
                        (builder, supplier) -> {
                            builder.setMathExpr(_mathExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.RelativeOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__RelativeExpr>
                _relativeExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _relativeExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _relativeExprConsumer =
                        (builder, supplier) -> {
                            builder.setRelativeExpr(_relativeExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.EqualityOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__EqualityExpr>
                _equalityExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _equalityExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _equalityExprConsumer =
                        (builder, supplier) -> {
                            builder.setEqualityExpr(_equalityExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.LogicalOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__LogicalExpr>
                _logicalExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _logicalExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _logicalExprConsumer =
                        (builder, supplier) -> {
                            builder.setLogicalExpr(_logicalExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            condition : schemarise.alfa.runtime.model.IExpression,
            ifExp : schemarise.alfa.runtime.model.IExpression,
            elseExp : schemarise.alfa.runtime.model.IExpression ?
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__IfElseExpr>
                _ifElseExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _ifElseExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _ifElseExprConsumer =
                        (builder, supplier) -> {
                            builder.setIfElseExpr(_ifElseExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _noneExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _noneExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _noneExprConsumer =
                        (builder, supplier) -> {
                            builder.setNoneExpr(_noneExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _thisExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _thisExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _thisExprConsumer =
                        (builder, supplier) -> {
                            builder.setThisExpr(_thisExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.ScalarType,
            Value : string
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__LiteralExpr>
                _literalExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _literalExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _literalExprConsumer =
                        (builder, supplier) -> {
                            builder.setLiteralExpr(_literalExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            parentMethod : schemarise.alfa.runtime.model.IExpression ?,
            fieldName : string
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr>
                _identifierExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _identifierExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _identifierExprConsumer =
                        (builder, supplier) -> {
                            builder.setIdentifierExpr(
                                    _identifierExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            path : list< string >,
            IdentifierType : schemarise.alfa.runtime.model.QualifiedIdentifierType
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr>
                _qualifiedIdentifierExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _qualifiedIdentifierExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _qualifiedIdentifierExprConsumer =
                        (builder, supplier) -> {
                            builder.setQualifiedIdentifierExpr(
                                    _qualifiedIdentifierExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            path : list< string >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr>
                _optionalQualifiedIdentifierExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _optionalQualifiedIdentifierExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _optionalQualifiedIdentifierExprConsumer =
                        (builder, supplier) -> {
                            builder.setOptionalQualifiedIdentifierExpr(
                                    _optionalQualifiedIdentifierExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__ParenthesisExpr>
                _parenthesisExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _parenthesisExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _parenthesisExprConsumer =
                        (builder, supplier) -> {
                            builder.setParenthesisExpr(
                                    _parenthesisExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : list< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__ListExpr>
                _listExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _listExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _listExprConsumer =
                        (builder, supplier) -> {
                            builder.setListExpr(_listExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__TupleExpr>
                _tupleExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _tupleExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _tupleExprConsumer =
                        (builder, supplier) -> {
                            builder.setTupleExpr(_tupleExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : set< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__SetExpr>
                _setExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _setExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _setExprConsumer =
                        (builder, supplier) -> {
                            builder.setSetExpr(_setExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : map< schemarise.alfa.runtime.model.IExpression , schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__MapExpr>
                _mapExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _mapExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _mapExprConsumer =
                        (builder, supplier) -> {
                            builder.setMapExpr(_mapExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            udtName : string,
            keyObject : schemarise.alfa.runtime.model.IExpression ?,
            fieldValues : map< string , schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__ObjectExpr>
                _objectExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _objectExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _objectExprConsumer =
                        (builder, supplier) -> {
                            builder.setObjectExpr(_objectExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _notExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _notExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _notExprConsumer =
                        (builder, supplier) -> {
                            builder.setNotExpr(_notExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            args : list< schemarise.alfa.runtime.model.Formal >,
            statements : list< schemarise.alfa.runtime.model.Statement >
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Expression__LambdaExpr>
                _lambdaExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _lambdaExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _lambdaExprConsumer =
                        (builder, supplier) -> {
                            builder.setLambdaExpr(_lambdaExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.DecisionTable -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionTable>
                _decisionTableExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType)
                                            _decisionTableExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _decisionTableExprConsumer =
                        (builder, supplier) -> {
                            builder.setDecisionTableExpr(
                                    _decisionTableExprConsumerInner1.apply(supplier));
                        };

        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            udtName : string,
            args : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__NewExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _newExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _newExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _newExprSupplier =
                        (p, consumer) -> {
                            _newExprSupplierInner1.accept(p.getNewExpr(), consumer);
                        };
        /* -- Supplier tuple<
            severity : schemarise.alfa.runtime.model.asserts.SeverityType,
            dqType : schemarise.alfa.runtime.model.asserts.DataQualityType,
            constraintType : schemarise.alfa.runtime.model.asserts.ConstraintType,
            message : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _raiseExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _raiseExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _raiseExprSupplier =
                        (p, consumer) -> {
                            _raiseExprSupplierInner1.accept(p.getRaiseExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            udtName : string,
            args : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__FragmentExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fragmentExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _fragmentExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fragmentExprSupplier =
                        (p, consumer) -> {
                            _fragmentExprSupplierInner1.accept(p.getFragmentExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            name : string,
            builtin : boolean,
            args : list< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MethodCallExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _methodCallExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _methodCallExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _methodCallExprSupplier =
                        (p, consumer) -> {
                            _methodCallExprSupplierInner1.accept(p.getMethodCallExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.MathOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MathExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mathExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _mathExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mathExprSupplier =
                        (p, consumer) -> {
                            _mathExprSupplierInner1.accept(p.getMathExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.RelativeOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RelativeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _relativeExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _relativeExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _relativeExprSupplier =
                        (p, consumer) -> {
                            _relativeExprSupplierInner1.accept(p.getRelativeExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.EqualityOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__EqualityExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _equalityExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _equalityExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _equalityExprSupplier =
                        (p, consumer) -> {
                            _equalityExprSupplierInner1.accept(p.getEqualityExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            lhs : schemarise.alfa.runtime.model.IExpression,
            operator : schemarise.alfa.runtime.model.LogicalOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__LogicalExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _logicalExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _logicalExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _logicalExprSupplier =
                        (p, consumer) -> {
                            _logicalExprSupplierInner1.accept(p.getLogicalExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            condition : schemarise.alfa.runtime.model.IExpression,
            ifExp : schemarise.alfa.runtime.model.IExpression,
            elseExp : schemarise.alfa.runtime.model.IExpression ?
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _ifElseExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _ifElseExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _ifElseExprSupplier =
                        (p, consumer) -> {
                            _ifElseExprSupplierInner1.accept(p.getIfElseExpr(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _noneExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _noneExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _noneExprSupplier =
                        (p, consumer) -> {
                            _noneExprSupplierInner1.accept(p.getNoneExpr(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _thisExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _thisExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _thisExprSupplier =
                        (p, consumer) -> {
                            _thisExprSupplierInner1.accept(p.getThisExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.ScalarType,
            Value : string
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__LiteralExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _literalExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _literalExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _literalExprSupplier =
                        (p, consumer) -> {
                            _literalExprSupplierInner1.accept(p.getLiteralExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            parentMethod : schemarise.alfa.runtime.model.IExpression ?,
            fieldName : string
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identifierExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _identifierExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identifierExprSupplier =
                        (p, consumer) -> {
                            _identifierExprSupplierInner1.accept(p.getIdentifierExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            path : list< string >,
            IdentifierType : schemarise.alfa.runtime.model.QualifiedIdentifierType
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _qualifiedIdentifierExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _qualifiedIdentifierExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _qualifiedIdentifierExprSupplier =
                        (p, consumer) -> {
                            _qualifiedIdentifierExprSupplierInner1.accept(
                                    p.getQualifiedIdentifierExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            path : list< string >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__OptionalQualifiedIdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _optionalQualifiedIdentifierExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType)
                                            _optionalQualifiedIdentifierExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _optionalQualifiedIdentifierExprSupplier =
                        (p, consumer) -> {
                            _optionalQualifiedIdentifierExprSupplierInner1.accept(
                                    p.getOptionalQualifiedIdentifierExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ParenthesisExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _parenthesisExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _parenthesisExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _parenthesisExprSupplier =
                        (p, consumer) -> {
                            _parenthesisExprSupplierInner1.accept(p.getParenthesisExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : list< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ListExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _listExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _listExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _listExprSupplier =
                        (p, consumer) -> {
                            _listExprSupplierInner1.accept(p.getListExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : list< schemarise.alfa.runtime.model.NamedExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__TupleExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _tupleExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _tupleExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _tupleExprSupplier =
                        (p, consumer) -> {
                            _tupleExprSupplierInner1.accept(p.getTupleExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : set< schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__SetExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _setExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _setExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _setExprSupplier =
                        (p, consumer) -> {
                            _setExprSupplierInner1.accept(p.getSetExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            expr : map< schemarise.alfa.runtime.model.IExpression , schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__MapExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _mapExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapExprSupplier =
                        (p, consumer) -> {
                            _mapExprSupplierInner1.accept(p.getMapExpr(), consumer);
                        };
        /* -- Supplier tuple<
            udtName : string,
            keyObject : schemarise.alfa.runtime.model.IExpression ?,
            fieldValues : map< string , schemarise.alfa.runtime.model.IExpression >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__ObjectExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _objectExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _objectExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _objectExprSupplier =
                        (p, consumer) -> {
                            _objectExprSupplierInner1.accept(p.getObjectExpr(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _notExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _notExprType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _notExprSupplier =
                        (p, consumer) -> {
                            _notExprSupplierInner1.accept(p.getNotExpr(), consumer);
                        };
        /* -- Supplier tuple<
            ExprType : schemarise.alfa.runtime.model.IDataType,
            args : list< schemarise.alfa.runtime.model.Formal >,
            statements : list< schemarise.alfa.runtime.model.Statement >
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__LambdaExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _lambdaExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _lambdaExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _lambdaExprSupplier =
                        (p, consumer) -> {
                            _lambdaExprSupplierInner1.accept(p.getLambdaExpr(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.DecisionTable -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decisionTableExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _decisionTableExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decisionTableExprSupplier =
                        (p, consumer) -> {
                            _decisionTableExprSupplierInner1.accept(
                                    p.getDecisionTableExpr(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta newExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_newExprSupplier),
                        java.util.Optional.of(_newExprConsumer),
                        java.util.Optional.of(_newExprSupplierInner1),
                        java.util.Optional.of(_newExprConsumerInner1),
                        _newExprType,
                        FIELD_NEWEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta raiseExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_raiseExprSupplier),
                        java.util.Optional.of(_raiseExprConsumer),
                        java.util.Optional.of(_raiseExprSupplierInner1),
                        java.util.Optional.of(_raiseExprConsumerInner1),
                        _raiseExprType,
                        FIELD_RAISEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fragmentExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fragmentExprSupplier),
                        java.util.Optional.of(_fragmentExprConsumer),
                        java.util.Optional.of(_fragmentExprSupplierInner1),
                        java.util.Optional.of(_fragmentExprConsumerInner1),
                        _fragmentExprType,
                        FIELD_FRAGMENTEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta methodCallExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_methodCallExprSupplier),
                        java.util.Optional.of(_methodCallExprConsumer),
                        java.util.Optional.of(_methodCallExprSupplierInner1),
                        java.util.Optional.of(_methodCallExprConsumerInner1),
                        _methodCallExprType,
                        FIELD_METHODCALLEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta mathExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_mathExprSupplier),
                        java.util.Optional.of(_mathExprConsumer),
                        java.util.Optional.of(_mathExprSupplierInner1),
                        java.util.Optional.of(_mathExprConsumerInner1),
                        _mathExprType,
                        FIELD_MATHEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta relativeExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_relativeExprSupplier),
                        java.util.Optional.of(_relativeExprConsumer),
                        java.util.Optional.of(_relativeExprSupplierInner1),
                        java.util.Optional.of(_relativeExprConsumerInner1),
                        _relativeExprType,
                        FIELD_RELATIVEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta equalityExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_equalityExprSupplier),
                        java.util.Optional.of(_equalityExprConsumer),
                        java.util.Optional.of(_equalityExprSupplierInner1),
                        java.util.Optional.of(_equalityExprConsumerInner1),
                        _equalityExprType,
                        FIELD_EQUALITYEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta logicalExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_logicalExprSupplier),
                        java.util.Optional.of(_logicalExprConsumer),
                        java.util.Optional.of(_logicalExprSupplierInner1),
                        java.util.Optional.of(_logicalExprConsumerInner1),
                        _logicalExprType,
                        FIELD_LOGICALEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta ifElseExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_ifElseExprSupplier),
                        java.util.Optional.of(_ifElseExprConsumer),
                        java.util.Optional.of(_ifElseExprSupplierInner1),
                        java.util.Optional.of(_ifElseExprConsumerInner1),
                        _ifElseExprType,
                        FIELD_IFELSEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta noneExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_noneExprSupplier),
                        java.util.Optional.of(_noneExprConsumer),
                        java.util.Optional.of(_noneExprSupplierInner1),
                        java.util.Optional.of(_noneExprConsumerInner1),
                        _noneExprType,
                        FIELD_NONEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta thisExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_thisExprSupplier),
                        java.util.Optional.of(_thisExprConsumer),
                        java.util.Optional.of(_thisExprSupplierInner1),
                        java.util.Optional.of(_thisExprConsumerInner1),
                        _thisExprType,
                        FIELD_THISEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta literalExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_literalExprSupplier),
                        java.util.Optional.of(_literalExprConsumer),
                        java.util.Optional.of(_literalExprSupplierInner1),
                        java.util.Optional.of(_literalExprConsumerInner1),
                        _literalExprType,
                        FIELD_LITERALEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta identifierExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_identifierExprSupplier),
                        java.util.Optional.of(_identifierExprConsumer),
                        java.util.Optional.of(_identifierExprSupplierInner1),
                        java.util.Optional.of(_identifierExprConsumerInner1),
                        _identifierExprType,
                        FIELD_IDENTIFIEREXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta qualifiedIdentifierExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_qualifiedIdentifierExprSupplier),
                        java.util.Optional.of(_qualifiedIdentifierExprConsumer),
                        java.util.Optional.of(_qualifiedIdentifierExprSupplierInner1),
                        java.util.Optional.of(_qualifiedIdentifierExprConsumerInner1),
                        _qualifiedIdentifierExprType,
                        FIELD_QUALIFIEDIDENTIFIEREXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta optionalQualifiedIdentifierExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_optionalQualifiedIdentifierExprSupplier),
                        java.util.Optional.of(_optionalQualifiedIdentifierExprConsumer),
                        java.util.Optional.of(_optionalQualifiedIdentifierExprSupplierInner1),
                        java.util.Optional.of(_optionalQualifiedIdentifierExprConsumerInner1),
                        _optionalQualifiedIdentifierExprType,
                        FIELD_OPTIONALQUALIFIEDIDENTIFIEREXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta parenthesisExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_parenthesisExprSupplier),
                        java.util.Optional.of(_parenthesisExprConsumer),
                        java.util.Optional.of(_parenthesisExprSupplierInner1),
                        java.util.Optional.of(_parenthesisExprConsumerInner1),
                        _parenthesisExprType,
                        FIELD_PARENTHESISEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta listExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_listExprSupplier),
                        java.util.Optional.of(_listExprConsumer),
                        java.util.Optional.of(_listExprSupplierInner1),
                        java.util.Optional.of(_listExprConsumerInner1),
                        _listExprType,
                        FIELD_LISTEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta tupleExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_tupleExprSupplier),
                        java.util.Optional.of(_tupleExprConsumer),
                        java.util.Optional.of(_tupleExprSupplierInner1),
                        java.util.Optional.of(_tupleExprConsumerInner1),
                        _tupleExprType,
                        FIELD_TUPLEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta setExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_setExprSupplier),
                        java.util.Optional.of(_setExprConsumer),
                        java.util.Optional.of(_setExprSupplierInner1),
                        java.util.Optional.of(_setExprConsumerInner1),
                        _setExprType,
                        FIELD_SETEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta mapExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_mapExprSupplier),
                        java.util.Optional.of(_mapExprConsumer),
                        java.util.Optional.of(_mapExprSupplierInner1),
                        java.util.Optional.of(_mapExprConsumerInner1),
                        _mapExprType,
                        FIELD_MAPEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta objectExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_objectExprSupplier),
                        java.util.Optional.of(_objectExprConsumer),
                        java.util.Optional.of(_objectExprSupplierInner1),
                        java.util.Optional.of(_objectExprConsumerInner1),
                        _objectExprType,
                        FIELD_OBJECTEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta notExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_notExprSupplier),
                        java.util.Optional.of(_notExprConsumer),
                        java.util.Optional.of(_notExprSupplierInner1),
                        java.util.Optional.of(_notExprConsumerInner1),
                        _notExprType,
                        FIELD_NOTEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta lambdaExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_lambdaExprSupplier),
                        java.util.Optional.of(_lambdaExprConsumer),
                        java.util.Optional.of(_lambdaExprSupplierInner1),
                        java.util.Optional.of(_lambdaExprConsumerInner1),
                        _lambdaExprType,
                        FIELD_LAMBDAEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta decisionTableExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_decisionTableExprSupplier),
                        java.util.Optional.of(_decisionTableExprConsumer),
                        java.util.Optional.of(_decisionTableExprSupplierInner1),
                        java.util.Optional.of(_decisionTableExprConsumerInner1),
                        _decisionTableExprType,
                        FIELD_DECISIONTABLEEXPR,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ExpressionBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl();
        }

        @Override
        public ExpressionBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression._ExpressionBuilderImpl(cc);
        }

        public ExpressionDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NEWEXPR, newExprMeta);
                                        put(FIELD_RAISEEXPR, raiseExprMeta);
                                        put(FIELD_FRAGMENTEXPR, fragmentExprMeta);
                                        put(FIELD_METHODCALLEXPR, methodCallExprMeta);
                                        put(FIELD_MATHEXPR, mathExprMeta);
                                        put(FIELD_RELATIVEEXPR, relativeExprMeta);
                                        put(FIELD_EQUALITYEXPR, equalityExprMeta);
                                        put(FIELD_LOGICALEXPR, logicalExprMeta);
                                        put(FIELD_IFELSEEXPR, ifElseExprMeta);
                                        put(FIELD_NONEEXPR, noneExprMeta);
                                        put(FIELD_THISEXPR, thisExprMeta);
                                        put(FIELD_LITERALEXPR, literalExprMeta);
                                        put(FIELD_IDENTIFIEREXPR, identifierExprMeta);
                                        put(
                                                FIELD_QUALIFIEDIDENTIFIEREXPR,
                                                qualifiedIdentifierExprMeta);
                                        put(
                                                FIELD_OPTIONALQUALIFIEDIDENTIFIEREXPR,
                                                optionalQualifiedIdentifierExprMeta);
                                        put(FIELD_PARENTHESISEXPR, parenthesisExprMeta);
                                        put(FIELD_LISTEXPR, listExprMeta);
                                        put(FIELD_TUPLEEXPR, tupleExprMeta);
                                        put(FIELD_SETEXPR, setExprMeta);
                                        put(FIELD_MAPEXPR, mapExprMeta);
                                        put(FIELD_OBJECTEXPR, objectExprMeta);
                                        put(FIELD_NOTEXPR, notExprMeta);
                                        put(FIELD_LAMBDAEXPR, lambdaExprMeta);
                                        put(FIELD_DECISIONTABLEEXPR, decisionTableExprMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NEWEXPR:
                    return FIELD_NEWEXPR;
                case FIELD_ID_RAISEEXPR:
                    return FIELD_RAISEEXPR;
                case FIELD_ID_FRAGMENTEXPR:
                    return FIELD_FRAGMENTEXPR;
                case FIELD_ID_METHODCALLEXPR:
                    return FIELD_METHODCALLEXPR;
                case FIELD_ID_MATHEXPR:
                    return FIELD_MATHEXPR;
                case FIELD_ID_RELATIVEEXPR:
                    return FIELD_RELATIVEEXPR;
                case FIELD_ID_EQUALITYEXPR:
                    return FIELD_EQUALITYEXPR;
                case FIELD_ID_LOGICALEXPR:
                    return FIELD_LOGICALEXPR;
                case FIELD_ID_IFELSEEXPR:
                    return FIELD_IFELSEEXPR;
                case FIELD_ID_NONEEXPR:
                    return FIELD_NONEEXPR;
                case FIELD_ID_THISEXPR:
                    return FIELD_THISEXPR;
                case FIELD_ID_LITERALEXPR:
                    return FIELD_LITERALEXPR;
                case FIELD_ID_IDENTIFIEREXPR:
                    return FIELD_IDENTIFIEREXPR;
                case FIELD_ID_QUALIFIEDIDENTIFIEREXPR:
                    return FIELD_QUALIFIEDIDENTIFIEREXPR;
                case FIELD_ID_OPTIONALQUALIFIEDIDENTIFIEREXPR:
                    return FIELD_OPTIONALQUALIFIEDIDENTIFIEREXPR;
                case FIELD_ID_PARENTHESISEXPR:
                    return FIELD_PARENTHESISEXPR;
                case FIELD_ID_LISTEXPR:
                    return FIELD_LISTEXPR;
                case FIELD_ID_TUPLEEXPR:
                    return FIELD_TUPLEEXPR;
                case FIELD_ID_SETEXPR:
                    return FIELD_SETEXPR;
                case FIELD_ID_MAPEXPR:
                    return FIELD_MAPEXPR;
                case FIELD_ID_OBJECTEXPR:
                    return FIELD_OBJECTEXPR;
                case FIELD_ID_NOTEXPR:
                    return FIELD_NOTEXPR;
                case FIELD_ID_LAMBDAEXPR:
                    return FIELD_LAMBDAEXPR;
                case FIELD_ID_DECISIONTABLEEXPR:
                    return FIELD_DECISIONTABLEEXPR;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression{DecisionTableExpr:schemarise.alfa.runtime.model.DecisionTable[c12c4d3a];EqualityExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.EqualityOperatorType[5dca8e5a];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;FragmentExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];args:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;udtName:string;>;IdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];fieldName:string;parentMethod:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;>;IfElseExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];condition:schemarise.alfa.runtime.model.IExpression[5fb330b3];elseExp:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;ifExp:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;LambdaExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];args:list<schemarise.alfa.runtime.model.Formal[5e1463e8]>;statements:list<schemarise.alfa.runtime.model.Statement[d43aa7d0]>;>;ListExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;LiteralExpr:tuple<ExprType:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;>;LogicalExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.LogicalOperatorType[e9e8086];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;MapExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:map<schemarise.alfa.runtime.model.IExpression[5fb330b3],schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;MathExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.MathOperatorType[c320399f];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;MethodCallExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];args:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;builtin:boolean;name:string;>;NewExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];args:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;udtName:string;>;NoneExpr:schemarise.alfa.runtime.model.IDataType[4404d6a0];NotExpr:schemarise.alfa.runtime.model.IExpression[5fb330b3];ObjectExpr:tuple<fieldValues:map<string,string>;keyObject:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;udtName:string;>;OptionalQualifiedIdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];path:list<string>;>;ParenthesisExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;QualifiedIdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];IdentifierType:schemarise.alfa.runtime.model.QualifiedIdentifierType[61ca4596];path:list<string>;>;RaiseExpr:tuple<constraintType:schemarise.alfa.runtime.model.asserts.ConstraintType[bedbd588];dqType:schemarise.alfa.runtime.model.asserts.DataQualityType[2812750d];message:schemarise.alfa.runtime.model.IExpression[5fb330b3];severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];>;RelativeExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.RelativeOperatorType[4571a072];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;SetExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:set<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;ThisExpr:schemarise.alfa.runtime.model.IDataType[4404d6a0];TupleExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;>;}
            schemarise.alfa.runtime.model.Expression{DecisionTableExpr:schemarise.alfa.runtime.model.DecisionTable[c12c4d3a];EqualityExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.EqualityOperatorType[5dca8e5a];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;FragmentExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];args:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;udtName:string;>;IdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];fieldName:string;>;IfElseExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];condition:schemarise.alfa.runtime.model.IExpression[5fb330b3];ifExp:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;LambdaExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];args:list<schemarise.alfa.runtime.model.Formal[3e9a7081]>;statements:list<schemarise.alfa.runtime.model.Statement[7dbb6c5d]>;>;ListExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;LiteralExpr:tuple<ExprType:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;>;LogicalExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.LogicalOperatorType[e9e8086];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;MapExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:map<schemarise.alfa.runtime.model.IExpression[5fb330b3],schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;MathExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.MathOperatorType[c320399f];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;MethodCallExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];args:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;builtin:boolean;name:string;>;NewExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];args:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;udtName:string;>;NoneExpr:schemarise.alfa.runtime.model.IDataType[5fbc41ae];NotExpr:schemarise.alfa.runtime.model.IExpression[5fb330b3];ObjectExpr:tuple<fieldValues:map<string,string>;udtName:string;>;OptionalQualifiedIdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];path:list<string>;>;ParenthesisExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;QualifiedIdentifierExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];IdentifierType:schemarise.alfa.runtime.model.QualifiedIdentifierType[61ca4596];path:list<string>;>;RaiseExpr:tuple<constraintType:schemarise.alfa.runtime.model.asserts.ConstraintType[bedbd588];dqType:schemarise.alfa.runtime.model.asserts.DataQualityType[2812750d];message:schemarise.alfa.runtime.model.IExpression[5fb330b3];severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];>;RelativeExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];lhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];operator:schemarise.alfa.runtime.model.RelativeOperatorType[4571a072];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;SetExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:set<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;>;ThisExpr:schemarise.alfa.runtime.model.IDataType[5fbc41ae];TupleExpr:tuple<ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:list<schemarise.alfa.runtime.model.NamedExpression[7e92a8e5]>;>;}
            */
            return "80e56cb:35e6bf4b";
        }
    }
    // </editor-fold>

}
