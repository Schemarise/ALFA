// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface UnionDataType
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IDataType {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields();

    schemarise.alfa.runtime.model.UnionType getUnionType();

    java.lang.String getSynthFullyQualifiedName();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UnionDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl();
    }

    public static UnionDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UnionDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDataType.IDataTypeBuilder {
        UnionDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        UnionDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        UnionDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        UnionDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        UnionDataTypeBuilder putFields(java.lang.String k, schemarise.alfa.runtime.model.Field v);

        UnionDataTypeBuilder putAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields();

        UnionDataTypeBuilder setUnionType(schemarise.alfa.runtime.model.UnionType v);

        schemarise.alfa.runtime.model.UnionType getUnionType();

        UnionDataTypeBuilder setSynthFullyQualifiedName(java.lang.String v);

        java.lang.String getSynthFullyQualifiedName();

        UnionDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UnionDataTypeBuilderImpl extends _UnionDataType__Base__
            implements UnionDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UnionDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UnionDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(5);
            __missingFields.set(0, 5);
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor.INSTANCE;
        }

        public UnionDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public UnionDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public UnionDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public UnionDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        private void createFields() {
            this._fields = new java.util.LinkedHashMap<>();
        }

        public UnionDataTypeBuilder putFields(
                java.lang.String k, schemarise.alfa.runtime.model.Field v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Fields", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Fields", v);
            if (this._fields == null) createFields();
            this._fields.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        public UnionDataTypeBuilder putAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Fields", all);
            if (this._fields == null) createFields();
            this._fields.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        private UnionDataTypeBuilder setFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Fields", all);
            _fields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        public UnionDataTypeBuilder setUnionType(schemarise.alfa.runtime.model.UnionType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UnionType", v);
            this._unionType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_UNIONTYPE);
            return this;
        }

        public UnionDataTypeBuilder setSynthFullyQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SynthFullyQualifiedName", v);
            this._synthFullyQualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor
                            .FIELD_ID_SYNTHFULLYQUALIFIEDNAME);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "Fields":
                    setFields(
                            (java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>)
                                    val);
                    break;
                case "UnionType":
                    setUnionType((schemarise.alfa.runtime.model.UnionType) val);
                    break;
                case "SynthFullyQualifiedName":
                    setSynthFullyQualifiedName((java.lang.String) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UnionDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    5,
                    schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor.INSTANCE);

            UnionDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UnionDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _typeDefName,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .UnionDataType
                                                                        .UnionDataTypeDescriptor
                                                                        .INSTANCE
                                                                        ._fieldsSupplierInner1,
                                                                _fields),
                                                _unionType,
                                                _synthFullyQualifiedName);
            else
                obj =
                        new schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeConcrete(
                                _extendedAttribs,
                                _typeDefName,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.UnionDataType
                                                .UnionDataTypeDescriptor.INSTANCE
                                                ._fieldsSupplierInner1,
                                        _fields),
                                _unionType,
                                _synthFullyQualifiedName);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UnionDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "Fields",
                        "UnionType",
                        "SynthFullyQualifiedName"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _fields,
                        _unionType,
                        _synthFullyQualifiedName
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UnionDataTypeConcrete extends _UnionDataType__Base__ implements UnionDataType {

        private _UnionDataTypeConcrete() {
            super();
        }

        private _UnionDataTypeConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields,
                schemarise.alfa.runtime.model.UnionType _unionType,
                java.lang.String _synthFullyQualifiedName) {
            super(_extendedAttribs, _typeDefName, _fields, _unionType, _synthFullyQualifiedName);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UnionDataType__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields;
        public schemarise.alfa.runtime.model.UnionType _unionType;
        public java.lang.String _synthFullyQualifiedName;

        public _UnionDataType__Base__() {}

        public _UnionDataType__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields,
                schemarise.alfa.runtime.model.UnionType _unionType,
                java.lang.String _synthFullyQualifiedName) {
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._fields = _fields;
            this._unionType = _unionType;
            this._synthFullyQualifiedName = _synthFullyQualifiedName;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields() {
            return _fields;
        }

        public schemarise.alfa.runtime.model.UnionType getUnionType() {
            return _unionType;
        }

        public java.lang.String getSynthFullyQualifiedName() {
            return _synthFullyQualifiedName;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _extendedAttribs, _typeDefName, _fields, _unionType, _synthFullyQualifiedName);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UnionDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "Fields",
                        "UnionType",
                        "SynthFullyQualifiedName"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _fields,
                        _unionType,
                        _synthFullyQualifiedName
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(_fields, rhs._fields)
                    && java.util.Objects.equals(_unionType, rhs._unionType)
                    && java.util.Objects.equals(
                            _synthFullyQualifiedName, rhs._synthFullyQualifiedName);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "Fields":
                    return _fields;
                case "UnionType":
                    return _unionType;
                case "SynthFullyQualifiedName":
                    return _synthFullyQualifiedName;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getFields()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            getUnionType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UnionDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.UnionDataType";
        public static schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.UnionDataType.UnionDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 1;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_FIELDS = 2;
        public static final String FIELD_FIELDS = "Fields";

        public static final short FIELD_ID_UNIONTYPE = 3;
        public static final String FIELD_UNIONTYPE = "UnionType";

        public static final short FIELD_ID_SYNTHFULLYQUALIFIEDNAME = 4;
        public static final String FIELD_SYNTHFULLYQUALIFIEDNAME = "SynthFullyQualifiedName";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _fieldsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Field")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _unionTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UnionType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _synthFullyQualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>>
                _fieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _fieldsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Field>
                                    _fieldsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldsType),
                                    _fieldsConsumerInner2Key,
                                    _fieldsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fieldsConsumer =
                        (builder, supplier) -> {
                            builder.putAllFields(_fieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UnionType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UnionType>
                _unionTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _unionTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _unionTypeConsumer =
                        (builder, supplier) -> {
                            builder.setUnionType(_unionTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _synthFullyQualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _synthFullyQualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _synthFullyQualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setSynthFullyQualifiedName(
                                    _synthFullyQualifiedNameConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Field,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldsType),
                                    pInner1,
                                    _fieldsSupplierInner2Key,
                                    _fieldsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldsSupplier =
                        (p, consumer) -> {
                            _fieldsSupplierInner1.accept(p.getFields(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UnionType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _unionTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _unionTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _unionTypeSupplier =
                        (p, consumer) -> {
                            _unionTypeSupplierInner1.accept(p.getUnionType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _synthFullyQualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _synthFullyQualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UnionDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _synthFullyQualifiedNameSupplier =
                        (p, consumer) -> {
                            _synthFullyQualifiedNameSupplierInner1.accept(
                                    p.getSynthFullyQualifiedName(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UnionDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fieldsSupplier),
                        java.util.Optional.of(_fieldsConsumer),
                        java.util.Optional.of(_fieldsSupplierInner1),
                        java.util.Optional.of(_fieldsConsumerInner1),
                        _fieldsType,
                        FIELD_FIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta unionTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_unionTypeSupplier),
                        java.util.Optional.of(_unionTypeConsumer),
                        java.util.Optional.of(_unionTypeSupplierInner1),
                        java.util.Optional.of(_unionTypeConsumerInner1),
                        _unionTypeType,
                        FIELD_UNIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta synthFullyQualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_synthFullyQualifiedNameSupplier),
                        java.util.Optional.of(_synthFullyQualifiedNameConsumer),
                        java.util.Optional.of(_synthFullyQualifiedNameSupplierInner1),
                        java.util.Optional.of(_synthFullyQualifiedNameConsumerInner1),
                        _synthFullyQualifiedNameType,
                        FIELD_SYNTHFULLYQUALIFIEDNAME,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UnionDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl();
        }

        @Override
        public UnionDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.UnionDataType._UnionDataTypeBuilderImpl(cc);
        }

        public UnionDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UnionDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(FIELD_FIELDS, fieldsMeta);
                                        put(FIELD_UNIONTYPE, unionTypeMeta);
                                        put(
                                                FIELD_SYNTHFULLYQUALIFIEDNAME,
                                                synthFullyQualifiedNameMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UnionDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_FIELDS:
                    return FIELD_FIELDS;
                case FIELD_ID_UNIONTYPE:
                    return FIELD_UNIONTYPE;
                case FIELD_ID_SYNTHFULLYQUALIFIEDNAME:
                    return FIELD_SYNTHFULLYQUALIFIEDNAME;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.UnionDataType{ExtendedAttribs:optional<map<string,string>;>;Fields:map<string,string>;SynthFullyQualifiedName:string;TypeDefName:optional<string;>;UnionType:schemarise.alfa.runtime.model.UnionType[aa1d4a20];}
            schemarise.alfa.runtime.model.UnionDataType{Fields:map<string,string>;SynthFullyQualifiedName:string;UnionType:schemarise.alfa.runtime.model.UnionType[aa1d4a20];}
            */
            return "f88ca35f:c341a62";
        }
    }
    // </editor-fold>

}
