// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Location extends com.schemarise.alfa.runtime.Record {

    java.lang.String getPath();

    int getLine();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static LocationBuilder builder() {
        return new schemarise.alfa.runtime.model.Location._LocationBuilderImpl();
    }

    public static LocationBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc, schemarise.alfa.runtime.model.Location.LocationDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Location._LocationBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface LocationBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        LocationBuilder setPath(java.lang.String v);

        java.lang.String getPath();

        LocationBuilder setLine(int v);

        int getLine();

        Location build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _LocationBuilderImpl extends _Location__Base__ implements LocationBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _LocationBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _LocationBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Location.LocationDescriptor.INSTANCE;
        }

        public LocationBuilder setPath(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Path", v);
            this._path = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Location.LocationDescriptor.FIELD_ID_PATH);
            return this;
        }

        public LocationBuilder setLine(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Line", v);
            this._line = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Location.LocationDescriptor.FIELD_ID_LINE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "path":
                    setPath((java.lang.String) val);
                    break;
                case "line":
                    setLine((int) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Location build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.Location.LocationDescriptor.INSTANCE);

            Location obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Location)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _path, _line);
            else obj = new schemarise.alfa.runtime.model.Location._LocationConcrete(_path, _line);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Location",
                    new java.lang.String[] {"path", "line"},
                    new java.lang.Object[] {_path, _line});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _LocationConcrete extends _Location__Base__ implements Location {

        private _LocationConcrete() {
            super();
        }

        private _LocationConcrete(java.lang.String _path, int _line) {
            super(_path, _line);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Location__Base__ {
        public java.lang.String _path;
        public int _line;

        public _Location__Base__() {}

        public _Location__Base__(java.lang.String _path, int _line) {
            this._path = _path;
            this._line = _line;
        }

        public java.lang.String getPath() {
            return _path;
        }

        public int getLine() {
            return _line;
        }

        public int hashCode() {
            return java.util.Objects.hash(_path, _line);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Location",
                    new java.lang.String[] {"path", "line"},
                    new java.lang.Object[] {_path, _line});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Location._LocationConcrete))
                return false;
            schemarise.alfa.runtime.model.Location._LocationConcrete rhs =
                    (schemarise.alfa.runtime.model.Location._LocationConcrete) o;
            return java.util.Objects.equals(_path, rhs._path) && _line == rhs._line;
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Location.LocationDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "path":
                    return _path;
                case "line":
                    return _line;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class LocationDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Location";
        public static schemarise.alfa.runtime.model.Location.LocationDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Location.LocationDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_PATH = 0;
        public static final String FIELD_PATH = "path";

        public static final short FIELD_ID_LINE = 1;
        public static final String FIELD_LINE = "line";

        private schemarise.alfa.runtime.model.ScalarDataType _pathType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _lineType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _pathConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _pathType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Location._LocationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _pathConsumer =
                        (builder, supplier) -> {
                            builder.setPath(_pathConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _lineConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _lineType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Location._LocationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _lineConsumer =
                        (builder, supplier) -> {
                            builder.setLine(_lineConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _pathSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _pathType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Location,
                        com.schemarise.alfa.runtime.DataConsumer>
                _pathSupplier =
                        (p, consumer) -> {
                            _pathSupplierInner1.accept(p.getPath(), consumer);
                        };
        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _lineSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _lineType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Location,
                        com.schemarise.alfa.runtime.DataConsumer>
                _lineSupplier =
                        (p, consumer) -> {
                            _lineSupplierInner1.accept(p.getLine(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Location, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta pathMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_pathSupplier),
                        java.util.Optional.of(_pathConsumer),
                        java.util.Optional.of(_pathSupplierInner1),
                        java.util.Optional.of(_pathConsumerInner1),
                        _pathType,
                        FIELD_PATH,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta lineMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_lineSupplier),
                        java.util.Optional.of(_lineConsumer),
                        java.util.Optional.of(_lineSupplierInner1),
                        java.util.Optional.of(_lineConsumerInner1),
                        _lineType,
                        FIELD_LINE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public LocationBuilder builder() {
            return new schemarise.alfa.runtime.model.Location._LocationBuilderImpl();
        }

        @Override
        public LocationBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Location._LocationBuilderImpl(cc);
        }

        public LocationDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Location>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_PATH, pathMeta);
                                        put(FIELD_LINE, lineMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Location>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_PATH:
                    return FIELD_PATH;
                case FIELD_ID_LINE:
                    return FIELD_LINE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Location{line:int;path:string;}
            schemarise.alfa.runtime.model.Location{line:int;path:string;}
            */
            return "946b249f:";
        }
    }
    // </editor-fold>

}
