// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Statement__ReturnStmt extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.IExpression getExpr();

    schemarise.alfa.runtime.model.IDataType getDataType();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Statement__ReturnStmtBuilder builder() {
        return new schemarise.alfa.runtime.model.Statement__ReturnStmt
                ._Statement__ReturnStmtBuilderImpl();
    }

    public static Statement__ReturnStmtBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Statement__ReturnStmt
                                    .Statement__ReturnStmtDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Statement__ReturnStmt
                    ._Statement__ReturnStmtBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Statement__ReturnStmtBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Statement__ReturnStmtBuilder setExpr(schemarise.alfa.runtime.model.IExpression v);

        schemarise.alfa.runtime.model.IExpression getExpr();

        Statement__ReturnStmtBuilder setDataType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getDataType();

        Statement__ReturnStmt build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Statement__ReturnStmtBuilderImpl extends _Statement__ReturnStmt__Base__
            implements Statement__ReturnStmtBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Statement__ReturnStmtBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Statement__ReturnStmtBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement__ReturnStmt
                    .Statement__ReturnStmtDescriptor.INSTANCE;
        }

        public Statement__ReturnStmtBuilder setExpr(schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Expr", v);
            this._expr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement__ReturnStmt
                            .Statement__ReturnStmtDescriptor.FIELD_ID_EXPR);
            return this;
        }

        public Statement__ReturnStmtBuilder setDataType(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DataType", v);
            this._dataType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Statement__ReturnStmt
                            .Statement__ReturnStmtDescriptor.FIELD_ID_DATATYPE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "expr":
                    setExpr((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                case "dataType":
                    setDataType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Statement__ReturnStmt build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.Statement__ReturnStmt
                            .Statement__ReturnStmtDescriptor.INSTANCE);

            Statement__ReturnStmt obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Statement__ReturnStmt)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _expr, _dataType);
            else
                obj =
                        new schemarise.alfa.runtime.model.Statement__ReturnStmt
                                ._Statement__ReturnStmtConcrete(_expr, _dataType);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Statement__ReturnStmt",
                    new java.lang.String[] {"expr", "dataType"},
                    new java.lang.Object[] {_expr, _dataType});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Statement__ReturnStmtConcrete extends _Statement__ReturnStmt__Base__
            implements Statement__ReturnStmt {

        private _Statement__ReturnStmtConcrete() {
            super();
        }

        private _Statement__ReturnStmtConcrete(
                schemarise.alfa.runtime.model.IExpression _expr,
                schemarise.alfa.runtime.model.IDataType _dataType) {
            super(_expr, _dataType);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Statement__ReturnStmt__Base__ {
        public schemarise.alfa.runtime.model.IExpression _expr;
        public schemarise.alfa.runtime.model.IDataType _dataType;

        public _Statement__ReturnStmt__Base__() {}

        public _Statement__ReturnStmt__Base__(
                schemarise.alfa.runtime.model.IExpression _expr,
                schemarise.alfa.runtime.model.IDataType _dataType) {
            this._expr = _expr;
            this._dataType = _dataType;
        }

        public schemarise.alfa.runtime.model.IExpression getExpr() {
            return _expr;
        }

        public schemarise.alfa.runtime.model.IDataType getDataType() {
            return _dataType;
        }

        public int hashCode() {
            return java.util.Objects.hash(_expr, _dataType);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Statement__ReturnStmt",
                    new java.lang.String[] {"expr", "dataType"},
                    new java.lang.Object[] {_expr, _dataType});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Statement__ReturnStmt
                            ._Statement__ReturnStmtConcrete)) return false;
            schemarise.alfa.runtime.model.Statement__ReturnStmt._Statement__ReturnStmtConcrete rhs =
                    (schemarise.alfa.runtime.model.Statement__ReturnStmt
                                    ._Statement__ReturnStmtConcrete)
                            o;
            return java.util.Objects.equals(_expr, rhs._expr)
                    && java.util.Objects.equals(_dataType, rhs._dataType);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Statement__ReturnStmt
                    .Statement__ReturnStmtDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "expr":
                    return _expr;
                case "dataType":
                    return _dataType;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getExpr().validate(__builderConfig);
            getDataType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Statement__ReturnStmtDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Statement__ReturnStmt";
        public static schemarise.alfa.runtime.model.Statement__ReturnStmt
                        .Statement__ReturnStmtDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Statement__ReturnStmt
                                .Statement__ReturnStmtDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXPR = 0;
        public static final String FIELD_EXPR = "expr";

        public static final short FIELD_ID_DATATYPE = 1;
        public static final String FIELD_DATATYPE = "dataType";

        private schemarise.alfa.runtime.model.UdtDataType _exprType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _dataTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _exprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__ReturnStmt
                                ._Statement__ReturnStmtBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exprConsumer =
                        (builder, supplier) -> {
                            builder.setExpr(_exprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _dataTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dataTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__ReturnStmt
                                ._Statement__ReturnStmtBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dataTypeConsumer =
                        (builder, supplier) -> {
                            builder.setDataType(_dataTypeConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__ReturnStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprSupplier =
                        (p, consumer) -> {
                            _exprSupplierInner1.accept(p.getExpr(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dataTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Statement__ReturnStmt,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataTypeSupplier =
                        (p, consumer) -> {
                            _dataTypeSupplierInner1.accept(p.getDataType(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Statement__ReturnStmt, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta exprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exprSupplier),
                        java.util.Optional.of(_exprConsumer),
                        java.util.Optional.of(_exprSupplierInner1),
                        java.util.Optional.of(_exprConsumerInner1),
                        _exprType,
                        FIELD_EXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dataTypeSupplier),
                        java.util.Optional.of(_dataTypeConsumer),
                        java.util.Optional.of(_dataTypeSupplierInner1),
                        java.util.Optional.of(_dataTypeConsumerInner1),
                        _dataTypeType,
                        FIELD_DATATYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Statement__ReturnStmtBuilder builder() {
            return new schemarise.alfa.runtime.model.Statement__ReturnStmt
                    ._Statement__ReturnStmtBuilderImpl();
        }

        @Override
        public Statement__ReturnStmtBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Statement__ReturnStmt
                    ._Statement__ReturnStmtBuilderImpl(cc);
        }

        public Statement__ReturnStmtDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Statement__ReturnStmt>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXPR, exprMeta);
                                        put(FIELD_DATATYPE, dataTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Statement__ReturnStmt>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXPR:
                    return FIELD_EXPR;
                case FIELD_ID_DATATYPE:
                    return FIELD_DATATYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Statement__ReturnStmt{dataType:schemarise.alfa.runtime.model.IDataType[4404d6a0];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            schemarise.alfa.runtime.model.Statement__ReturnStmt{dataType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];expr:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            */
            return "192beceb:83027075";
        }
    }
    // </editor-fold>

}
