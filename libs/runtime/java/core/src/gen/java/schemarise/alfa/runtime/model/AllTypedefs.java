// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface AllTypedefs extends com.schemarise.alfa.runtime.Record {

    java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> getDefs();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static AllTypedefsBuilder builder() {
        return new schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsBuilderImpl();
    }

    public static AllTypedefsBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface AllTypedefsBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        AllTypedefsBuilder addDefs(schemarise.alfa.runtime.model.TypeDefInfo e);

        AllTypedefsBuilder addAllDefs(
                java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> all);

        java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> getDefs();

        AllTypedefs build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _AllTypedefsBuilderImpl extends _AllTypedefs__Base__ implements AllTypedefsBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _AllTypedefsBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _AllTypedefsBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(1);
            __missingFields.set(0, 1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.INSTANCE;
        }

        private void createDefs() {
            this._defs = new java.util.ArrayList<>();
        }

        public AllTypedefsBuilder addDefs(schemarise.alfa.runtime.model.TypeDefInfo e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Defs", e);
            if (this._defs == null) createDefs();
            this._defs.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.FIELD_ID_DEFS);
            return this;
        }

        public AllTypedefsBuilder setDefs(int index, schemarise.alfa.runtime.model.TypeDefInfo e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Defs", e);
            if (this._defs == null) createDefs();
            this._defs.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.FIELD_ID_DEFS);
            return this;
        }

        public AllTypedefsBuilder addAllDefs(
                java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Defs", all);
            if (this._defs == null) createDefs();
            this._defs.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.FIELD_ID_DEFS);
            return this;
        }

        private AllTypedefsBuilder setDefs(
                java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Defs", all);
            this._defs = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.FIELD_ID_DEFS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "defs":
                    setDefs((java.util.List<schemarise.alfa.runtime.model.TypeDefInfo>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public AllTypedefs build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    1,
                    schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.INSTANCE);

            AllTypedefs obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (AllTypedefs)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AllTypedefs
                                                                        .AllTypedefsDescriptor
                                                                        .INSTANCE
                                                                        ._defsSupplierInner1,
                                                                _defs));
            else
                obj =
                        new schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AllTypedefs
                                                .AllTypedefsDescriptor.INSTANCE
                                                ._defsSupplierInner1,
                                        _defs));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllTypedefs",
                    new java.lang.String[] {"defs"},
                    new java.lang.Object[] {_defs});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _AllTypedefsConcrete extends _AllTypedefs__Base__ implements AllTypedefs {

        private _AllTypedefsConcrete() {
            super();
        }

        private _AllTypedefsConcrete(
                java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> _defs) {
            super(_defs);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _AllTypedefs__Base__ {
        public java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> _defs;

        public _AllTypedefs__Base__() {}

        public _AllTypedefs__Base__(
                java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> _defs) {
            this._defs = _defs;
        }

        public java.util.List<schemarise.alfa.runtime.model.TypeDefInfo> getDefs() {
            return _defs;
        }

        public int hashCode() {
            return java.util.Objects.hash(_defs);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AllTypedefs",
                    new java.lang.String[] {"defs"},
                    new java.lang.Object[] {_defs});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsConcrete))
                return false;
            schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsConcrete rhs =
                    (schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsConcrete) o;
            return java.util.Objects.equals(_defs, rhs._defs);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "defs":
                    return _defs;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            java.util.stream.IntStream.range(0, getDefs().size())
                    .forEach(
                            e0 -> {
                                getDefs().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class AllTypedefsDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.AllTypedefs";
        public static schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.AllTypedefs.AllTypedefsDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DEFS = 0;
        public static final String FIELD_DEFS = "defs";

        private schemarise.alfa.runtime.model.ListDataType _defsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.TypeDefInfo")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer list< schemarise.alfa.runtime.model.TypeDefInfo > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.TypeDefInfo>>
                _defsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.TypeDefInfo>
                                    _defsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _defsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _defsType),
                                    _defsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _defsConsumer =
                        (builder, supplier) -> {
                            builder.addAllDefs(_defsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier list< schemarise.alfa.runtime.model.TypeDefInfo > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.TypeDefInfo>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.TypeDefInfo,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _defsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _defsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _defsType),
                                    pInner1,
                                    _defsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AllTypedefs,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defsSupplier =
                        (p, consumer) -> {
                            _defsSupplierInner1.accept(p.getDefs(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                AllTypedefs, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta defsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_defsSupplier),
                        java.util.Optional.of(_defsConsumer),
                        java.util.Optional.of(_defsSupplierInner1),
                        java.util.Optional.of(_defsConsumerInner1),
                        _defsType,
                        FIELD_DEFS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public AllTypedefsBuilder builder() {
            return new schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsBuilderImpl();
        }

        @Override
        public AllTypedefsBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.AllTypedefs._AllTypedefsBuilderImpl(cc);
        }

        public AllTypedefsDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllTypedefs>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DEFS, defsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AllTypedefs>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DEFS:
                    return FIELD_DEFS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.AllTypedefs{defs:list<schemarise.alfa.runtime.model.TypeDefInfo[e6bd4a46]>;}
            schemarise.alfa.runtime.model.AllTypedefs{defs:list<schemarise.alfa.runtime.model.TypeDefInfo[cbebd0d8]>;}
            */
            return "f0fb8e38:b9476fbb";
        }
    }
    // </editor-fold>

}
