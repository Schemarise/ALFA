// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionTable extends com.schemarise.alfa.runtime.Record {

    java.util.List<schemarise.alfa.runtime.model.IExpression> getCriteria();

    schemarise.alfa.runtime.model.DecisionTable__HitPolicy getHitPolicy();

    java.util.List<schemarise.alfa.runtime.model.DecisionRule> getDecisionRules();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionTableBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl();
    }

    public static DecisionTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionTableBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        DecisionTableBuilder addCriteria(schemarise.alfa.runtime.model.IExpression e);

        DecisionTableBuilder addAllCriteria(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all);

        java.util.List<schemarise.alfa.runtime.model.IExpression> getCriteria();

        DecisionTableBuilder setHitPolicy(schemarise.alfa.runtime.model.DecisionTable__HitPolicy v);

        schemarise.alfa.runtime.model.DecisionTable__HitPolicy getHitPolicy();

        DecisionTableBuilder addDecisionRules(schemarise.alfa.runtime.model.DecisionRule e);

        DecisionTableBuilder addAllDecisionRules(
                java.util.List<schemarise.alfa.runtime.model.DecisionRule> all);

        java.util.List<schemarise.alfa.runtime.model.DecisionRule> getDecisionRules();

        DecisionTable build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionTableBuilderImpl extends _DecisionTable__Base__
            implements DecisionTableBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _DecisionTableBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionTableBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor.INSTANCE;
        }

        private void createCriteria() {
            this._criteria = new java.util.ArrayList<>();
        }

        public DecisionTableBuilder addCriteria(schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Criteria", e);
            if (this._criteria == null) createCriteria();
            this._criteria.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_CRITERIA);
            return this;
        }

        public DecisionTableBuilder setCriteria(
                int index, schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Criteria", e);
            if (this._criteria == null) createCriteria();
            this._criteria.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_CRITERIA);
            return this;
        }

        public DecisionTableBuilder addAllCriteria(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Criteria", all);
            if (this._criteria == null) createCriteria();
            this._criteria.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_CRITERIA);
            return this;
        }

        private DecisionTableBuilder setCriteria(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Criteria", all);
            this._criteria = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_CRITERIA);
            return this;
        }

        public DecisionTableBuilder setHitPolicy(
                schemarise.alfa.runtime.model.DecisionTable__HitPolicy v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("HitPolicy", v);
            this._hitPolicy = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_HITPOLICY);
            return this;
        }

        private void createDecisionRules() {
            this._decisionRules = new java.util.ArrayList<>();
        }

        public DecisionTableBuilder addDecisionRules(schemarise.alfa.runtime.model.DecisionRule e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DecisionRules", e);
            if (this._decisionRules == null) createDecisionRules();
            this._decisionRules.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_DECISIONRULES);
            return this;
        }

        public DecisionTableBuilder setDecisionRules(
                int index, schemarise.alfa.runtime.model.DecisionRule e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DecisionRules", e);
            if (this._decisionRules == null) createDecisionRules();
            this._decisionRules.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_DECISIONRULES);
            return this;
        }

        public DecisionTableBuilder addAllDecisionRules(
                java.util.List<schemarise.alfa.runtime.model.DecisionRule> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DecisionRules", all);
            if (this._decisionRules == null) createDecisionRules();
            this._decisionRules.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_DECISIONRULES);
            return this;
        }

        private DecisionTableBuilder setDecisionRules(
                java.util.List<schemarise.alfa.runtime.model.DecisionRule> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DecisionRules", all);
            this._decisionRules = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor
                            .FIELD_ID_DECISIONRULES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Criteria":
                    setCriteria((java.util.List<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                case "HitPolicy":
                    setHitPolicy((schemarise.alfa.runtime.model.DecisionTable__HitPolicy) val);
                    break;
                case "DecisionRules":
                    setDecisionRules(
                            (java.util.List<schemarise.alfa.runtime.model.DecisionRule>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionTable build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor.INSTANCE);

            DecisionTable obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (DecisionTable)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .DecisionTable
                                                                        .DecisionTableDescriptor
                                                                        .INSTANCE
                                                                        ._criteriaSupplierInner1,
                                                                _criteria),
                                                _hitPolicy,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .DecisionTable
                                                                        .DecisionTableDescriptor
                                                                        .INSTANCE
                                                                        ._decisionRulesSupplierInner1,
                                                                _decisionRules));
            else
                obj =
                        new schemarise.alfa.runtime.model.DecisionTable._DecisionTableConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.DecisionTable
                                                .DecisionTableDescriptor.INSTANCE
                                                ._criteriaSupplierInner1,
                                        _criteria),
                                _hitPolicy,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.DecisionTable
                                                .DecisionTableDescriptor.INSTANCE
                                                ._decisionRulesSupplierInner1,
                                        _decisionRules));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionTable",
                    new java.lang.String[] {"Criteria", "HitPolicy", "DecisionRules"},
                    new java.lang.Object[] {_criteria, _hitPolicy, _decisionRules});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _DecisionTableConcrete extends _DecisionTable__Base__ implements DecisionTable {

        private _DecisionTableConcrete() {
            super();
        }

        private _DecisionTableConcrete(
                java.util.List<schemarise.alfa.runtime.model.IExpression> _criteria,
                schemarise.alfa.runtime.model.DecisionTable__HitPolicy _hitPolicy,
                java.util.List<schemarise.alfa.runtime.model.DecisionRule> _decisionRules) {
            super(_criteria, _hitPolicy, _decisionRules);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _DecisionTable__Base__ {
        public java.util.List<schemarise.alfa.runtime.model.IExpression> _criteria;
        public schemarise.alfa.runtime.model.DecisionTable__HitPolicy _hitPolicy;
        public java.util.List<schemarise.alfa.runtime.model.DecisionRule> _decisionRules;

        public _DecisionTable__Base__() {}

        public _DecisionTable__Base__(
                java.util.List<schemarise.alfa.runtime.model.IExpression> _criteria,
                schemarise.alfa.runtime.model.DecisionTable__HitPolicy _hitPolicy,
                java.util.List<schemarise.alfa.runtime.model.DecisionRule> _decisionRules) {
            this._criteria = _criteria;
            this._hitPolicy = _hitPolicy;
            this._decisionRules = _decisionRules;
        }

        public java.util.List<schemarise.alfa.runtime.model.IExpression> getCriteria() {
            return _criteria;
        }

        public schemarise.alfa.runtime.model.DecisionTable__HitPolicy getHitPolicy() {
            return _hitPolicy;
        }

        public java.util.List<schemarise.alfa.runtime.model.DecisionRule> getDecisionRules() {
            return _decisionRules;
        }

        public int hashCode() {
            return java.util.Objects.hash(_criteria, _hitPolicy, _decisionRules);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionTable",
                    new java.lang.String[] {"Criteria", "HitPolicy", "DecisionRules"},
                    new java.lang.Object[] {_criteria, _hitPolicy, _decisionRules});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.DecisionTable._DecisionTableConcrete))
                return false;
            schemarise.alfa.runtime.model.DecisionTable._DecisionTableConcrete rhs =
                    (schemarise.alfa.runtime.model.DecisionTable._DecisionTableConcrete) o;
            return java.util.Objects.equals(_criteria, rhs._criteria)
                    && java.util.Objects.equals(_hitPolicy, rhs._hitPolicy)
                    && java.util.Objects.equals(_decisionRules, rhs._decisionRules);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Criteria":
                    return _criteria;
                case "HitPolicy":
                    return _hitPolicy;
                case "DecisionRules":
                    return _decisionRules;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            java.util.stream.IntStream.range(0, getCriteria().size())
                    .forEach(
                            e0 -> {
                                getCriteria().get(e0).validate(__builderConfig);
                            });

            java.util.stream.IntStream.range(0, getDecisionRules().size())
                    .forEach(
                            e0 -> {
                                getDecisionRules().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionTableDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.DecisionTable";
        public static schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.DecisionTable.DecisionTableDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_CRITERIA = 0;
        public static final String FIELD_CRITERIA = "Criteria";

        public static final short FIELD_ID_HITPOLICY = 1;
        public static final String FIELD_HITPOLICY = "HitPolicy";

        public static final short FIELD_ID_DECISIONRULES = 2;
        public static final String FIELD_DECISIONRULES = "DecisionRules";

        private schemarise.alfa.runtime.model.ListDataType _criteriaType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.EnumDataType _hitPolicyType =
                schemarise.alfa.runtime.model.EnumDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionTable__HitPolicy")
                        .addAllFields(
                                new java.util.ArrayList<String>(
                                        schemarise.alfa.runtime.model.DecisionTable__HitPolicy
                                                .DecisionTable__HitPolicyDescriptor.INSTANCE
                                                .getAllFieldsMeta()
                                                .keySet()))
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _decisionRulesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.DecisionRule")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.IExpression>>
                _criteriaConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _criteriaConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _criteriaType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _criteriaType),
                                    _criteriaConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _criteriaConsumer =
                        (builder, supplier) -> {
                            builder.addAllCriteria(_criteriaConsumerInner1.apply(supplier));
                        };
        /* -- Consumer enum<  unique , anyof , first , all  > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionTable__HitPolicy>
                _hitPolicyConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.enumValue(
                                    ((schemarise.alfa.runtime.model.EnumDataType) _hitPolicyType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _hitPolicyConsumer =
                        (builder, supplier) -> {
                            builder.setHitPolicy(_hitPolicyConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.DecisionRule > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.DecisionRule>>
                _decisionRulesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.DecisionRule>
                                    _decisionRulesConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _decisionRulesType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _decisionRulesType),
                                    _decisionRulesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _decisionRulesConsumer =
                        (builder, supplier) -> {
                            builder.addAllDecisionRules(
                                    _decisionRulesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _criteriaSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _criteriaSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _criteriaType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _criteriaType),
                                    pInner1,
                                    _criteriaSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _criteriaSupplier =
                        (p, consumer) -> {
                            _criteriaSupplierInner1.accept(p.getCriteria(), consumer);
                        };
        /* -- Supplier enum<  unique , anyof , first , all  > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable__HitPolicy,
                        com.schemarise.alfa.runtime.DataConsumer>
                _hitPolicySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.EnumDataType) _hitPolicyType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _hitPolicySupplier =
                        (p, consumer) -> {
                            _hitPolicySupplierInner1.accept(p.getHitPolicy(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.DecisionRule > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.DecisionRule>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decisionRulesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.DecisionRule,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _decisionRulesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _decisionRulesType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _decisionRulesType),
                                    pInner1,
                                    _decisionRulesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _decisionRulesSupplier =
                        (p, consumer) -> {
                            _decisionRulesSupplierInner1.accept(p.getDecisionRules(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionTable, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta criteriaMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_criteriaSupplier),
                        java.util.Optional.of(_criteriaConsumer),
                        java.util.Optional.of(_criteriaSupplierInner1),
                        java.util.Optional.of(_criteriaConsumerInner1),
                        _criteriaType,
                        FIELD_CRITERIA,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta hitPolicyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_hitPolicySupplier),
                        java.util.Optional.of(_hitPolicyConsumer),
                        java.util.Optional.of(_hitPolicySupplierInner1),
                        java.util.Optional.of(_hitPolicyConsumerInner1),
                        _hitPolicyType,
                        FIELD_HITPOLICY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta decisionRulesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_decisionRulesSupplier),
                        java.util.Optional.of(_decisionRulesConsumer),
                        java.util.Optional.of(_decisionRulesSupplierInner1),
                        java.util.Optional.of(_decisionRulesConsumerInner1),
                        _decisionRulesType,
                        FIELD_DECISIONRULES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionTableBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl();
        }

        @Override
        public DecisionTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionTable._DecisionTableBuilderImpl(cc);
        }

        public DecisionTableDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionTable>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_CRITERIA, criteriaMeta);
                                        put(FIELD_HITPOLICY, hitPolicyMeta);
                                        put(FIELD_DECISIONRULES, decisionRulesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionTable>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_CRITERIA:
                    return FIELD_CRITERIA;
                case FIELD_ID_HITPOLICY:
                    return FIELD_HITPOLICY;
                case FIELD_ID_DECISIONRULES:
                    return FIELD_DECISIONRULES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionTable{Criteria:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;DecisionRules:list<schemarise.alfa.runtime.model.DecisionRule[c33acaa5]>;HitPolicy:enum<unique,anyof,first,all>;}
            schemarise.alfa.runtime.model.DecisionTable{Criteria:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;DecisionRules:list<schemarise.alfa.runtime.model.DecisionRule[c33acaa5]>;HitPolicy:enum<unique,anyof,first,all>;}
            */
            return "c12c4d3a:";
        }
    }
    // </editor-fold>

}
