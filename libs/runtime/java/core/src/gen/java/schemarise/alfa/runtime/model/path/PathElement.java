// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.path;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface PathElement extends com.schemarise.alfa.runtime.Union {

    public default java.lang.String getScalarValue() {
        throw new IllegalStateException(
                "Accessing field ScalarValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isScalarValue() {
        return false;
    }

    public default java.util.List<schemarise.alfa.runtime.model.path.ListEntry> getListEntry() {
        throw new IllegalStateException(
                "Accessing field ListEntry is not supported in " + getClass().getSimpleName());
    }

    public default boolean isListEntry() {
        return false;
    }

    public default java.util.List<schemarise.alfa.runtime.model.path.PathElement> getSetEntry() {
        throw new IllegalStateException(
                "Accessing field SetEntry is not supported in " + getClass().getSimpleName());
    }

    public default boolean isSetEntry() {
        return false;
    }

    public default java.util.List<schemarise.alfa.runtime.model.path.MapEntry> getMapEntry() {
        throw new IllegalStateException(
                "Accessing field MapEntry is not supported in " + getClass().getSimpleName());
    }

    public default boolean isMapEntry() {
        return false;
    }

    public default java.util.List<schemarise.alfa.runtime.model.path.PathElement> getMapKey() {
        throw new IllegalStateException(
                "Accessing field MapKey is not supported in " + getClass().getSimpleName());
    }

    public default boolean isMapKey() {
        return false;
    }

    public default schemarise.alfa.runtime.model.path.UdtObject getUdt() {
        throw new IllegalStateException(
                "Accessing field Udt is not supported in " + getClass().getSimpleName());
    }

    public default boolean isUdt() {
        return false;
    }

    public default com.schemarise.alfa.runtime.UnionUntypedCase getEndOfPath() {
        throw new IllegalStateException(
                "Accessing field EndOfPath is not supported in " + getClass().getSimpleName());
    }

    public default boolean isEndOfPath() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseScalarValue">
    static final class CaseScalarValue implements PathElement {
        private java.lang.String _scalarValue;

        private CaseScalarValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.lang.String v) {
            this._scalarValue = v;
        }

        public java.lang.String getScalarValue() {
            return this._scalarValue;
        }

        public boolean isScalarValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "ScalarValue";
        }

        public java.lang.Object caseValue() {
            return _scalarValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ScalarValue")) return _scalarValue;
            else throw new IllegalStateException("Cannot access ScalarValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseListEntry">
    static final class CaseListEntry implements PathElement {
        private java.util.List<schemarise.alfa.runtime.model.path.ListEntry> _listEntry;

        private CaseListEntry(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<schemarise.alfa.runtime.model.path.ListEntry> v) {
            this._listEntry = v;
            java.util.stream.IntStream.range(0, getListEntry().size())
                    .forEach(
                            e0 -> {
                                getListEntry().get(e0).validate(__builderConfig);
                            });
        }

        public java.util.List<schemarise.alfa.runtime.model.path.ListEntry> getListEntry() {
            return this._listEntry;
        }

        public boolean isListEntry() {
            return true;
        }

        public java.lang.String caseName() {
            return "ListEntry";
        }

        public java.lang.Object caseValue() {
            return _listEntry;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("ListEntry")) return _listEntry;
            else throw new IllegalStateException("Cannot access ListEntry");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseSetEntry">
    static final class CaseSetEntry implements PathElement {
        private java.util.List<schemarise.alfa.runtime.model.path.PathElement> _setEntry;

        private CaseSetEntry(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> v) {
            this._setEntry = v;
            java.util.stream.IntStream.range(0, getSetEntry().size())
                    .forEach(
                            e0 -> {
                                getSetEntry().get(e0).validate(__builderConfig);
                            });
        }

        public java.util.List<schemarise.alfa.runtime.model.path.PathElement> getSetEntry() {
            return this._setEntry;
        }

        public boolean isSetEntry() {
            return true;
        }

        public java.lang.String caseName() {
            return "SetEntry";
        }

        public java.lang.Object caseValue() {
            return _setEntry;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("SetEntry")) return _setEntry;
            else throw new IllegalStateException("Cannot access SetEntry");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseMapEntry">
    static final class CaseMapEntry implements PathElement {
        private java.util.List<schemarise.alfa.runtime.model.path.MapEntry> _mapEntry;

        private CaseMapEntry(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<schemarise.alfa.runtime.model.path.MapEntry> v) {
            this._mapEntry = v;
            java.util.stream.IntStream.range(0, getMapEntry().size())
                    .forEach(
                            e0 -> {
                                getMapEntry().get(e0).validate(__builderConfig);
                            });
        }

        public java.util.List<schemarise.alfa.runtime.model.path.MapEntry> getMapEntry() {
            return this._mapEntry;
        }

        public boolean isMapEntry() {
            return true;
        }

        public java.lang.String caseName() {
            return "MapEntry";
        }

        public java.lang.Object caseValue() {
            return _mapEntry;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("MapEntry")) return _mapEntry;
            else throw new IllegalStateException("Cannot access MapEntry");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseMapKey">
    static final class CaseMapKey implements PathElement {
        private java.util.List<schemarise.alfa.runtime.model.path.PathElement> _mapKey;

        private CaseMapKey(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> v) {
            this._mapKey = v;
            java.util.stream.IntStream.range(0, getMapKey().size())
                    .forEach(
                            e0 -> {
                                getMapKey().get(e0).validate(__builderConfig);
                            });
        }

        public java.util.List<schemarise.alfa.runtime.model.path.PathElement> getMapKey() {
            return this._mapKey;
        }

        public boolean isMapKey() {
            return true;
        }

        public java.lang.String caseName() {
            return "MapKey";
        }

        public java.lang.Object caseValue() {
            return _mapKey;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("MapKey")) return _mapKey;
            else throw new IllegalStateException("Cannot access MapKey");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseUdt">
    static final class CaseUdt implements PathElement {
        private schemarise.alfa.runtime.model.path.UdtObject _udt;

        private CaseUdt(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.path.UdtObject v) {
            this._udt = v;
            getUdt().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.path.UdtObject getUdt() {
            return this._udt;
        }

        public boolean isUdt() {
            return true;
        }

        public java.lang.String caseName() {
            return "Udt";
        }

        public java.lang.Object caseValue() {
            return _udt;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("Udt")) return _udt;
            else throw new IllegalStateException("Cannot access Udt");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseEndOfPath">
    static final class CaseEndOfPath implements PathElement {
        private com.schemarise.alfa.runtime.UnionUntypedCase _endOfPath;

        private CaseEndOfPath(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                com.schemarise.alfa.runtime.UnionUntypedCase v) {
            this._endOfPath = v;
        }

        public com.schemarise.alfa.runtime.UnionUntypedCase getEndOfPath() {
            return this._endOfPath;
        }

        public boolean isEndOfPath() {
            return true;
        }

        public java.lang.String caseName() {
            return "EndOfPath";
        }

        public java.lang.Object caseValue() {
            return _endOfPath;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("EndOfPath")) return _endOfPath;
            else throw new IllegalStateException("Cannot access EndOfPath");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static PathElementBuilder builder() {
        return new schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl();
    }

    public static PathElementBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface PathElementBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        PathElementBuilder setScalarValue(java.lang.String v);

        PathElementBuilder addListEntry(schemarise.alfa.runtime.model.path.ListEntry e);

        PathElementBuilder addAllListEntry(
                java.util.List<schemarise.alfa.runtime.model.path.ListEntry> all);

        PathElementBuilder addSetEntry(schemarise.alfa.runtime.model.path.PathElement e);

        PathElementBuilder addAllSetEntry(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all);

        PathElementBuilder addMapEntry(schemarise.alfa.runtime.model.path.MapEntry e);

        PathElementBuilder addAllMapEntry(
                java.util.List<schemarise.alfa.runtime.model.path.MapEntry> all);

        PathElementBuilder addMapKey(schemarise.alfa.runtime.model.path.PathElement e);

        PathElementBuilder addAllMapKey(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all);

        PathElementBuilder setUdt(schemarise.alfa.runtime.model.path.UdtObject v);

        PathElementBuilder setEndOfPath(com.schemarise.alfa.runtime.UnionUntypedCase v);

        PathElement build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _PathElementBuilderImpl implements PathElementBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.lang.String _scalarValue;
        private java.util.List<schemarise.alfa.runtime.model.path.ListEntry> _listEntry;
        private java.util.List<schemarise.alfa.runtime.model.path.PathElement> _setEntry;
        private java.util.List<schemarise.alfa.runtime.model.path.MapEntry> _mapEntry;
        private java.util.List<schemarise.alfa.runtime.model.path.PathElement> _mapKey;
        private schemarise.alfa.runtime.model.path.UdtObject _udt;
        private com.schemarise.alfa.runtime.UnionUntypedCase _endOfPath;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ScalarValue":
                    return _scalarValue;
                case "ListEntry":
                    return _listEntry;
                case "SetEntry":
                    return _setEntry;
                case "MapEntry":
                    return _mapEntry;
                case "MapKey":
                    return _mapKey;
                case "Udt":
                    return _udt;
                case "EndOfPath":
                    return _endOfPath;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _PathElementBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _PathElementBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(7);
            __missingFields.set(0, 7);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE;
        }

        public PathElementBuilder setScalarValue(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ScalarValue", v);
            this._scalarValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SCALARVALUE);
            return this;
        }

        private void createListEntry() {
            this._listEntry = new java.util.ArrayList<>();
        }

        public PathElementBuilder addListEntry(schemarise.alfa.runtime.model.path.ListEntry e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ListEntry", e);
            if (this._listEntry == null) createListEntry();
            this._listEntry.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_LISTENTRY);
            return this;
        }

        public PathElementBuilder setListEntry(
                int index, schemarise.alfa.runtime.model.path.ListEntry e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ListEntry", e);
            if (this._listEntry == null) createListEntry();
            this._listEntry.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_LISTENTRY);
            return this;
        }

        public PathElementBuilder addAllListEntry(
                java.util.List<schemarise.alfa.runtime.model.path.ListEntry> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ListEntry", all);
            if (this._listEntry == null) createListEntry();
            this._listEntry.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_LISTENTRY);
            return this;
        }

        private PathElementBuilder setListEntry(
                java.util.List<schemarise.alfa.runtime.model.path.ListEntry> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ListEntry", all);
            this._listEntry = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_LISTENTRY);
            return this;
        }

        private void createSetEntry() {
            this._setEntry = new java.util.ArrayList<>();
        }

        public PathElementBuilder addSetEntry(schemarise.alfa.runtime.model.path.PathElement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SetEntry", e);
            if (this._setEntry == null) createSetEntry();
            this._setEntry.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SETENTRY);
            return this;
        }

        public PathElementBuilder setSetEntry(
                int index, schemarise.alfa.runtime.model.path.PathElement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SetEntry", e);
            if (this._setEntry == null) createSetEntry();
            this._setEntry.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SETENTRY);
            return this;
        }

        public PathElementBuilder addAllSetEntry(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SetEntry", all);
            if (this._setEntry == null) createSetEntry();
            this._setEntry.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SETENTRY);
            return this;
        }

        private PathElementBuilder setSetEntry(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SetEntry", all);
            this._setEntry = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SETENTRY);
            return this;
        }

        private void createMapEntry() {
            this._mapEntry = new java.util.ArrayList<>();
        }

        public PathElementBuilder addMapEntry(schemarise.alfa.runtime.model.path.MapEntry e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapEntry", e);
            if (this._mapEntry == null) createMapEntry();
            this._mapEntry.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPENTRY);
            return this;
        }

        public PathElementBuilder setMapEntry(
                int index, schemarise.alfa.runtime.model.path.MapEntry e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapEntry", e);
            if (this._mapEntry == null) createMapEntry();
            this._mapEntry.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPENTRY);
            return this;
        }

        public PathElementBuilder addAllMapEntry(
                java.util.List<schemarise.alfa.runtime.model.path.MapEntry> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapEntry", all);
            if (this._mapEntry == null) createMapEntry();
            this._mapEntry.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPENTRY);
            return this;
        }

        private PathElementBuilder setMapEntry(
                java.util.List<schemarise.alfa.runtime.model.path.MapEntry> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapEntry", all);
            this._mapEntry = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPENTRY);
            return this;
        }

        private void createMapKey() {
            this._mapKey = new java.util.ArrayList<>();
        }

        public PathElementBuilder addMapKey(schemarise.alfa.runtime.model.path.PathElement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapKey", e);
            if (this._mapKey == null) createMapKey();
            this._mapKey.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPKEY);
            return this;
        }

        public PathElementBuilder setMapKey(
                int index, schemarise.alfa.runtime.model.path.PathElement e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapKey", e);
            if (this._mapKey == null) createMapKey();
            this._mapKey.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPKEY);
            return this;
        }

        public PathElementBuilder addAllMapKey(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapKey", all);
            if (this._mapKey == null) createMapKey();
            this._mapKey.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPKEY);
            return this;
        }

        private PathElementBuilder setMapKey(
                java.util.List<schemarise.alfa.runtime.model.path.PathElement> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("MapKey", all);
            this._mapKey = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPKEY);
            return this;
        }

        public PathElementBuilder setUdt(schemarise.alfa.runtime.model.path.UdtObject v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Udt", v);
            this._udt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_UDT);
            return this;
        }

        public PathElementBuilder setEndOfPath(com.schemarise.alfa.runtime.UnionUntypedCase v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EndOfPath", v);
            this._endOfPath = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_ENDOFPATH);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ScalarValue":
                    setScalarValue((java.lang.String) val);
                    break;
                case "ListEntry":
                    setListEntry(
                            (java.util.List<schemarise.alfa.runtime.model.path.ListEntry>) val);
                    break;
                case "SetEntry":
                    setSetEntry(
                            (java.util.List<schemarise.alfa.runtime.model.path.PathElement>) val);
                    break;
                case "MapEntry":
                    setMapEntry((java.util.List<schemarise.alfa.runtime.model.path.MapEntry>) val);
                    break;
                case "MapKey":
                    setMapKey((java.util.List<schemarise.alfa.runtime.model.path.PathElement>) val);
                    break;
                case "Udt":
                    setUdt((schemarise.alfa.runtime.model.path.UdtObject) val);
                    break;
                case "EndOfPath":
                    setEndOfPath((com.schemarise.alfa.runtime.UnionUntypedCase) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public PathElement build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SCALARVALUE))
                return new CaseScalarValue(__builderConfig, _scalarValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_LISTENTRY))
                return new CaseListEntry(
                        __builderConfig, java.util.Collections.unmodifiableList(_listEntry));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_SETENTRY))
                return new CaseSetEntry(
                        __builderConfig, java.util.Collections.unmodifiableList(_setEntry));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPENTRY))
                return new CaseMapEntry(
                        __builderConfig, java.util.Collections.unmodifiableList(_mapEntry));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_MAPKEY))
                return new CaseMapKey(
                        __builderConfig, java.util.Collections.unmodifiableList(_mapKey));

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_UDT)) return new CaseUdt(__builderConfig, _udt);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                            .FIELD_ID_ENDOFPATH))
                return new CaseEndOfPath(__builderConfig, _endOfPath);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor.INSTANCE,
                    7,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.PathElement",
                    new java.lang.String[] {
                        "ScalarValue",
                        "ListEntry",
                        "SetEntry",
                        "MapEntry",
                        "MapKey",
                        "Udt",
                        "EndOfPath"
                    },
                    new java.lang.Object[] {
                        _scalarValue, _listEntry, _setEntry, _mapEntry, _mapKey, _udt, _endOfPath
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class PathElementDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.path.PathElement";
        public static schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.path.PathElement.PathElementDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_SCALARVALUE = 0;
        public static final String FIELD_SCALARVALUE = "ScalarValue";

        public static final short FIELD_ID_LISTENTRY = 1;
        public static final String FIELD_LISTENTRY = "ListEntry";

        public static final short FIELD_ID_SETENTRY = 2;
        public static final String FIELD_SETENTRY = "SetEntry";

        public static final short FIELD_ID_MAPENTRY = 3;
        public static final String FIELD_MAPENTRY = "MapEntry";

        public static final short FIELD_ID_MAPKEY = 4;
        public static final String FIELD_MAPKEY = "MapKey";

        public static final short FIELD_ID_UDT = 5;
        public static final String FIELD_UDT = "Udt";

        public static final short FIELD_ID_ENDOFPATH = 6;
        public static final String FIELD_ENDOFPATH = "EndOfPath";

        private schemarise.alfa.runtime.model.ScalarDataType _scalarValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _listEntryType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.path.ListEntry")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _setEntryType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.path.PathElement")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _mapEntryType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.path.MapEntry")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _mapKeyType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.path.PathElement")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _udtType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.path.UdtObject")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _endOfPathType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _scalarValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _scalarValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _scalarValueConsumer =
                        (builder, supplier) -> {
                            builder.setScalarValue(_scalarValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.path.ListEntry > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.path.ListEntry>>
                _listEntryConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.path.ListEntry>
                                    _listEntryConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _listEntryType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _listEntryType),
                                    _listEntryConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _listEntryConsumer =
                        (builder, supplier) -> {
                            builder.addAllListEntry(_listEntryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.path.PathElement>>
                _setEntryConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.path.PathElement>
                                    _setEntryConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _setEntryType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _setEntryType),
                                    _setEntryConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _setEntryConsumer =
                        (builder, supplier) -> {
                            builder.addAllSetEntry(_setEntryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.path.MapEntry > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.path.MapEntry>>
                _mapEntryConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.path.MapEntry>
                                    _mapEntryConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _mapEntryType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _mapEntryType),
                                    _mapEntryConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _mapEntryConsumer =
                        (builder, supplier) -> {
                            builder.addAllMapEntry(_mapEntryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.path.PathElement>>
                _mapKeyConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.path.PathElement>
                                    _mapKeyConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _mapKeyType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _mapKeyType),
                                    _mapKeyConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _mapKeyConsumer =
                        (builder, supplier) -> {
                            builder.addAllMapKey(_mapKeyConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.path.UdtObject -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.path.UdtObject>
                _udtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtConsumer =
                        (builder, supplier) -> {
                            builder.setUdt(_udtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer void -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        com.schemarise.alfa.runtime.UnionUntypedCase>
                _endOfPathConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.voidValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _endOfPathType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _endOfPathConsumer =
                        (builder, supplier) -> {
                            builder.setEndOfPath(_endOfPathConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _scalarValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _scalarValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _scalarValueSupplier =
                        (p, consumer) -> {
                            _scalarValueSupplierInner1.accept(p.getScalarValue(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.path.ListEntry > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.path.ListEntry>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _listEntrySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.path.ListEntry,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _listEntrySupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _listEntryType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _listEntryType),
                                    pInner1,
                                    _listEntrySupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _listEntrySupplier =
                        (p, consumer) -> {
                            _listEntrySupplierInner1.accept(p.getListEntry(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.path.PathElement>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _setEntrySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.path.PathElement,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _setEntrySupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _setEntryType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _setEntryType),
                                    pInner1,
                                    _setEntrySupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _setEntrySupplier =
                        (p, consumer) -> {
                            _setEntrySupplierInner1.accept(p.getSetEntry(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.path.MapEntry > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.path.MapEntry>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapEntrySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.path.MapEntry,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _mapEntrySupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _mapEntryType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _mapEntryType),
                                    pInner1,
                                    _mapEntrySupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapEntrySupplier =
                        (p, consumer) -> {
                            _mapEntrySupplierInner1.accept(p.getMapEntry(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.path.PathElement>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapKeySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.path.PathElement,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _mapKeySupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _mapKeyType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _mapKeyType),
                                    pInner1,
                                    _mapKeySupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mapKeySupplier =
                        (p, consumer) -> {
                            _mapKeySupplierInner1.accept(p.getMapKey(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.path.UdtObject -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.UdtObject,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtSupplier =
                        (p, consumer) -> {
                            _udtSupplierInner1.accept(p.getUdt(), consumer);
                        };
        /* -- Supplier void -- */
        java.util.function.BiConsumer<
                        com.schemarise.alfa.runtime.UnionUntypedCase,
                        com.schemarise.alfa.runtime.DataConsumer>
                _endOfPathSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _endOfPathType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.PathElement,
                        com.schemarise.alfa.runtime.DataConsumer>
                _endOfPathSupplier =
                        (p, consumer) -> {
                            _endOfPathSupplierInner1.accept(p.getEndOfPath(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                PathElement, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta scalarValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_scalarValueSupplier),
                        java.util.Optional.of(_scalarValueConsumer),
                        java.util.Optional.of(_scalarValueSupplierInner1),
                        java.util.Optional.of(_scalarValueConsumerInner1),
                        _scalarValueType,
                        FIELD_SCALARVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta listEntryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_listEntrySupplier),
                        java.util.Optional.of(_listEntryConsumer),
                        java.util.Optional.of(_listEntrySupplierInner1),
                        java.util.Optional.of(_listEntryConsumerInner1),
                        _listEntryType,
                        FIELD_LISTENTRY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta setEntryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_setEntrySupplier),
                        java.util.Optional.of(_setEntryConsumer),
                        java.util.Optional.of(_setEntrySupplierInner1),
                        java.util.Optional.of(_setEntryConsumerInner1),
                        _setEntryType,
                        FIELD_SETENTRY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta mapEntryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_mapEntrySupplier),
                        java.util.Optional.of(_mapEntryConsumer),
                        java.util.Optional.of(_mapEntrySupplierInner1),
                        java.util.Optional.of(_mapEntryConsumerInner1),
                        _mapEntryType,
                        FIELD_MAPENTRY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta mapKeyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_mapKeySupplier),
                        java.util.Optional.of(_mapKeyConsumer),
                        java.util.Optional.of(_mapKeySupplierInner1),
                        java.util.Optional.of(_mapKeyConsumerInner1),
                        _mapKeyType,
                        FIELD_MAPKEY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtSupplier),
                        java.util.Optional.of(_udtConsumer),
                        java.util.Optional.of(_udtSupplierInner1),
                        java.util.Optional.of(_udtConsumerInner1),
                        _udtType,
                        FIELD_UDT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta endOfPathMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_endOfPathSupplier),
                        java.util.Optional.of(_endOfPathConsumer),
                        java.util.Optional.of(_endOfPathSupplierInner1),
                        java.util.Optional.of(_endOfPathConsumerInner1),
                        _endOfPathType,
                        FIELD_ENDOFPATH,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public PathElementBuilder builder() {
            return new schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl();
        }

        @Override
        public PathElementBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.path.PathElement._PathElementBuilderImpl(cc);
        }

        public PathElementDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<PathElement>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_SCALARVALUE, scalarValueMeta);
                                        put(FIELD_LISTENTRY, listEntryMeta);
                                        put(FIELD_SETENTRY, setEntryMeta);
                                        put(FIELD_MAPENTRY, mapEntryMeta);
                                        put(FIELD_MAPKEY, mapKeyMeta);
                                        put(FIELD_UDT, udtMeta);
                                        put(FIELD_ENDOFPATH, endOfPathMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<PathElement>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_SCALARVALUE:
                    return FIELD_SCALARVALUE;
                case FIELD_ID_LISTENTRY:
                    return FIELD_LISTENTRY;
                case FIELD_ID_SETENTRY:
                    return FIELD_SETENTRY;
                case FIELD_ID_MAPENTRY:
                    return FIELD_MAPENTRY;
                case FIELD_ID_MAPKEY:
                    return FIELD_MAPKEY;
                case FIELD_ID_UDT:
                    return FIELD_UDT;
                case FIELD_ID_ENDOFPATH:
                    return FIELD_ENDOFPATH;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.path.PathElement{EndOfPath:void;ListEntry:list<schemarise.alfa.runtime.model.path.ListEntry[509cdd3d]>;MapEntry:list<schemarise.alfa.runtime.model.path.MapEntry[b1479711]>;MapKey:list<schemarise.alfa.runtime.model.path.PathElement[360288]>;ScalarValue:string;SetEntry:list<schemarise.alfa.runtime.model.path.PathElement[360288]>;Udt:schemarise.alfa.runtime.model.path.UdtObject[be2e69b1];}
            schemarise.alfa.runtime.model.path.PathElement{EndOfPath:void;ListEntry:list<schemarise.alfa.runtime.model.path.ListEntry[509cdd3d]>;MapEntry:list<schemarise.alfa.runtime.model.path.MapEntry[b1479711]>;MapKey:list<schemarise.alfa.runtime.model.path.PathElement[360288]>;ScalarValue:string;SetEntry:list<schemarise.alfa.runtime.model.path.PathElement[360288]>;Udt:schemarise.alfa.runtime.model.path.UdtObject[be2e69b1];}
            */
            return "fee75bcd:";
        }
    }
    // </editor-fold>

}
