// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface EntityKey extends com.schemarise.alfa.runtime.Union {

    public default schemarise.alfa.runtime.model.UdtDataType getKeyRef() {
        throw new IllegalStateException(
                "Accessing field KeyRef is not supported in " + getClass().getSimpleName());
    }

    public default boolean isKeyRef() {
        return false;
    }

    public default java.util.List<schemarise.alfa.runtime.model.Field> getKeyFields() {
        throw new IllegalStateException(
                "Accessing field KeyFields is not supported in " + getClass().getSimpleName());
    }

    public default boolean isKeyFields() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseKeyRef">
    static final class CaseKeyRef implements EntityKey {
        private schemarise.alfa.runtime.model.UdtDataType _keyRef;

        private CaseKeyRef(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.UdtDataType v) {
            this._keyRef = v;
            getKeyRef().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.UdtDataType getKeyRef() {
            return this._keyRef;
        }

        public boolean isKeyRef() {
            return true;
        }

        public java.lang.String caseName() {
            return "KeyRef";
        }

        public java.lang.Object caseValue() {
            return _keyRef;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("KeyRef")) return _keyRef;
            else throw new IllegalStateException("Cannot access KeyRef");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseKeyFields">
    static final class CaseKeyFields implements EntityKey {
        private java.util.List<schemarise.alfa.runtime.model.Field> _keyFields;

        private CaseKeyFields(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                java.util.List<schemarise.alfa.runtime.model.Field> v) {
            this._keyFields = v;
            java.util.stream.IntStream.range(0, getKeyFields().size())
                    .forEach(
                            e0 -> {
                                getKeyFields().get(e0).validate(__builderConfig);
                            });
        }

        public java.util.List<schemarise.alfa.runtime.model.Field> getKeyFields() {
            return this._keyFields;
        }

        public boolean isKeyFields() {
            return true;
        }

        public java.lang.String caseName() {
            return "KeyFields";
        }

        public java.lang.Object caseValue() {
            return _keyFields;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("KeyFields")) return _keyFields;
            else throw new IllegalStateException("Cannot access KeyFields");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static EntityKeyBuilder builder() {
        return new schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl();
    }

    public static EntityKeyBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface EntityKeyBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        EntityKeyBuilder setKeyRef(schemarise.alfa.runtime.model.UdtDataType v);

        EntityKeyBuilder addKeyFields(schemarise.alfa.runtime.model.Field e);

        EntityKeyBuilder addAllKeyFields(java.util.List<schemarise.alfa.runtime.model.Field> all);

        EntityKey build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _EntityKeyBuilderImpl implements EntityKeyBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private schemarise.alfa.runtime.model.UdtDataType _keyRef;
        private java.util.List<schemarise.alfa.runtime.model.Field> _keyFields;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "KeyRef":
                    return _keyRef;
                case "KeyFields":
                    return _keyFields;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _EntityKeyBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _EntityKeyBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.INSTANCE;
        }

        public EntityKeyBuilder setKeyRef(schemarise.alfa.runtime.model.UdtDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyRef", v);
            this._keyRef = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYREF);
            return this;
        }

        private void createKeyFields() {
            this._keyFields = new java.util.ArrayList<>();
        }

        public EntityKeyBuilder addKeyFields(schemarise.alfa.runtime.model.Field e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyFields", e);
            if (this._keyFields == null) createKeyFields();
            this._keyFields.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYFIELDS);
            return this;
        }

        public EntityKeyBuilder setKeyFields(int index, schemarise.alfa.runtime.model.Field e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyFields", e);
            if (this._keyFields == null) createKeyFields();
            this._keyFields.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYFIELDS);
            return this;
        }

        public EntityKeyBuilder addAllKeyFields(
                java.util.List<schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyFields", all);
            if (this._keyFields == null) createKeyFields();
            this._keyFields.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYFIELDS);
            return this;
        }

        private EntityKeyBuilder setKeyFields(
                java.util.List<schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyFields", all);
            this._keyFields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYFIELDS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "KeyRef":
                    setKeyRef((schemarise.alfa.runtime.model.UdtDataType) val);
                    break;
                case "KeyFields":
                    setKeyFields((java.util.List<schemarise.alfa.runtime.model.Field>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public EntityKey build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYREF))
                return new CaseKeyRef(__builderConfig, _keyRef);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.FIELD_ID_KEYFIELDS))
                return new CaseKeyFields(
                        __builderConfig, java.util.Collections.unmodifiableList(_keyFields));

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor.INSTANCE,
                    2,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.EntityKey",
                    new java.lang.String[] {"KeyRef", "KeyFields"},
                    new java.lang.Object[] {_keyRef, _keyFields});
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class EntityKeyDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.EntityKey";
        public static schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.EntityKey.EntityKeyDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_KEYREF = 0;
        public static final String FIELD_KEYREF = "KeyRef";

        public static final short FIELD_ID_KEYFIELDS = 1;
        public static final String FIELD_KEYFIELDS = "KeyFields";

        private schemarise.alfa.runtime.model.UdtDataType _keyRefType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _keyFieldsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Field")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.UdtDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtDataType>
                _keyRefConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyRefType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyRefConsumer =
                        (builder, supplier) -> {
                            builder.setKeyRef(_keyRefConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.Field > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.Field>>
                _keyFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Field>
                                    _keyFieldsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _keyFieldsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _keyFieldsType),
                                    _keyFieldsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyFieldsConsumer =
                        (builder, supplier) -> {
                            builder.addAllKeyFields(_keyFieldsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.UdtDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyRefSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyRefType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.EntityKey,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyRefSupplier =
                        (p, consumer) -> {
                            _keyRefSupplierInner1.accept(p.getKeyRef(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.Field > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.Field>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Field,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _keyFieldsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _keyFieldsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _keyFieldsType),
                                    pInner1,
                                    _keyFieldsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.EntityKey,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyFieldsSupplier =
                        (p, consumer) -> {
                            _keyFieldsSupplierInner1.accept(p.getKeyFields(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                EntityKey, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta keyRefMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keyRefSupplier),
                        java.util.Optional.of(_keyRefConsumer),
                        java.util.Optional.of(_keyRefSupplierInner1),
                        java.util.Optional.of(_keyRefConsumerInner1),
                        _keyRefType,
                        FIELD_KEYREF,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keyFieldsSupplier),
                        java.util.Optional.of(_keyFieldsConsumer),
                        java.util.Optional.of(_keyFieldsSupplierInner1),
                        java.util.Optional.of(_keyFieldsConsumerInner1),
                        _keyFieldsType,
                        FIELD_KEYFIELDS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public EntityKeyBuilder builder() {
            return new schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl();
        }

        @Override
        public EntityKeyBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.EntityKey._EntityKeyBuilderImpl(cc);
        }

        public EntityKeyDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<EntityKey>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_KEYREF, keyRefMeta);
                                        put(FIELD_KEYFIELDS, keyFieldsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<EntityKey>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_KEYREF:
                    return FIELD_KEYREF;
                case FIELD_ID_KEYFIELDS:
                    return FIELD_KEYFIELDS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.EntityKey{KeyFields:list<schemarise.alfa.runtime.model.Field[f51f7998]>;KeyRef:schemarise.alfa.runtime.model.UdtDataType[b49aa6a7];}
            schemarise.alfa.runtime.model.EntityKey{KeyFields:list<schemarise.alfa.runtime.model.Field[a7c9ac90]>;KeyRef:schemarise.alfa.runtime.model.UdtDataType[20423f1d];}
            */
            return "54da4381:9baeecc9";
        }
    }
    // </editor-fold>

}
