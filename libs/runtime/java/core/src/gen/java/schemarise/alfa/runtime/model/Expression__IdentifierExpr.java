// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__IdentifierExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.IDataType getExprType();

    java.util.Optional<schemarise.alfa.runtime.model.IExpression> getParentMethod();

    java.lang.String getFieldName();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__IdentifierExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                ._Expression__IdentifierExprBuilderImpl();
    }

    public static Expression__IdentifierExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                    .Expression__IdentifierExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                    ._Expression__IdentifierExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__IdentifierExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__IdentifierExprBuilder setExprType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getExprType();

        Expression__IdentifierExprBuilder setParentMethod(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v);

        Expression__IdentifierExprBuilder setParentMethod(
                schemarise.alfa.runtime.model.IExpression v);

        java.util.Optional<schemarise.alfa.runtime.model.IExpression> getParentMethod();

        Expression__IdentifierExprBuilder setFieldName(java.lang.String v);

        java.lang.String getFieldName();

        Expression__IdentifierExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__IdentifierExprBuilderImpl extends _Expression__IdentifierExpr__Base__
            implements Expression__IdentifierExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__IdentifierExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__IdentifierExprBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setParentMethod(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__IdentifierExpr
                    .Expression__IdentifierExprDescriptor.INSTANCE;
        }

        public Expression__IdentifierExprBuilder setExprType(
                schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExprType", v);
            this._exprType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            .Expression__IdentifierExprDescriptor.FIELD_ID_EXPRTYPE);
            return this;
        }

        public Expression__IdentifierExprBuilder setParentMethod(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ParentMethod", v);
            this._parentMethod = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            .Expression__IdentifierExprDescriptor.FIELD_ID_PARENTMETHOD);
            return this;
        }

        public Expression__IdentifierExprBuilder setParentMethod(
                schemarise.alfa.runtime.model.IExpression v) {
            this._parentMethod = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            .Expression__IdentifierExprDescriptor.FIELD_ID_PARENTMETHOD);
            return this;
        }

        public Expression__IdentifierExprBuilder setFieldName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FieldName", v);
            this._fieldName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            .Expression__IdentifierExprDescriptor.FIELD_ID_FIELDNAME);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExprType":
                    setExprType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "parentMethod":
                    setParentMethod(
                            (java.util.Optional<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                case "fieldName":
                    setFieldName((java.lang.String) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__IdentifierExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            .Expression__IdentifierExprDescriptor.INSTANCE);

            Expression__IdentifierExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__IdentifierExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _exprType,
                                                _parentMethod,
                                                _fieldName);
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                ._Expression__IdentifierExprConcrete(
                                _exprType, _parentMethod, _fieldName);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__IdentifierExpr",
                    new java.lang.String[] {"ExprType", "parentMethod", "fieldName"},
                    new java.lang.Object[] {_exprType, _parentMethod, _fieldName});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__IdentifierExprConcrete extends _Expression__IdentifierExpr__Base__
            implements Expression__IdentifierExpr {

        private _Expression__IdentifierExprConcrete() {
            super();
        }

        private _Expression__IdentifierExprConcrete(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _parentMethod,
                java.lang.String _fieldName) {
            super(_exprType, _parentMethod, _fieldName);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__IdentifierExpr__Base__ {
        public schemarise.alfa.runtime.model.IDataType _exprType;
        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> _parentMethod;
        public java.lang.String _fieldName;

        public _Expression__IdentifierExpr__Base__() {}

        public _Expression__IdentifierExpr__Base__(
                schemarise.alfa.runtime.model.IDataType _exprType,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _parentMethod,
                java.lang.String _fieldName) {
            this._exprType = _exprType;
            this._parentMethod = _parentMethod;
            this._fieldName = _fieldName;
        }

        public schemarise.alfa.runtime.model.IDataType getExprType() {
            return _exprType;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> getParentMethod() {
            return _parentMethod;
        }

        public java.lang.String getFieldName() {
            return _fieldName;
        }

        public int hashCode() {
            return java.util.Objects.hash(_exprType, _parentMethod, _fieldName);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__IdentifierExpr",
                    new java.lang.String[] {"ExprType", "parentMethod", "fieldName"},
                    new java.lang.Object[] {_exprType, _parentMethod, _fieldName});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            ._Expression__IdentifierExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__IdentifierExpr
                            ._Expression__IdentifierExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                            ._Expression__IdentifierExprConcrete)
                                    o;
            return java.util.Objects.equals(_exprType, rhs._exprType)
                    && java.util.Objects.equals(_parentMethod, rhs._parentMethod)
                    && java.util.Objects.equals(_fieldName, rhs._fieldName);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__IdentifierExpr
                    .Expression__IdentifierExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExprType":
                    return _exprType;
                case "parentMethod":
                    return _parentMethod;
                case "fieldName":
                    return _fieldName;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getExprType().validate(__builderConfig);
            if (getParentMethod().isPresent()) {
                getParentMethod().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__IdentifierExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__IdentifierExpr";
        public static schemarise.alfa.runtime.model.Expression__IdentifierExpr
                        .Expression__IdentifierExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                .Expression__IdentifierExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXPRTYPE = 0;
        public static final String FIELD_EXPRTYPE = "ExprType";

        public static final short FIELD_ID_PARENTMETHOD = 1;
        public static final String FIELD_PARENTMETHOD = "parentMethod";

        public static final short FIELD_ID_FIELDNAME = 2;
        public static final String FIELD_FIELDNAME = "fieldName";

        private schemarise.alfa.runtime.model.UdtDataType _exprTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _parentMethodType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _fieldNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _exprTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                ._Expression__IdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exprTypeConsumer =
                        (builder, supplier) -> {
                            builder.setExprType(_exprTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>>
                _parentMethodConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _parentMethodConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _parentMethodType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _parentMethodType),
                                    _parentMethodConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                ._Expression__IdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _parentMethodConsumer =
                        (builder, supplier) -> {
                            builder.setParentMethod(_parentMethodConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _fieldNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _fieldNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr
                                ._Expression__IdentifierExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fieldNameConsumer =
                        (builder, supplier) -> {
                            builder.setFieldName(_fieldNameConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplier =
                        (p, consumer) -> {
                            _exprTypeSupplierInner1.accept(p.getExprType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _parentMethodSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _parentMethodSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _parentMethodType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _parentMethodType),
                                    pInner1,
                                    _parentMethodSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _parentMethodSupplier =
                        (p, consumer) -> {
                            _parentMethodSupplierInner1.accept(p.getParentMethod(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _fieldNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _fieldNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IdentifierExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldNameSupplier =
                        (p, consumer) -> {
                            _fieldNameSupplierInner1.accept(p.getFieldName(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__IdentifierExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta exprTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exprTypeSupplier),
                        java.util.Optional.of(_exprTypeConsumer),
                        java.util.Optional.of(_exprTypeSupplierInner1),
                        java.util.Optional.of(_exprTypeConsumerInner1),
                        _exprTypeType,
                        FIELD_EXPRTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta parentMethodMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_parentMethodSupplier),
                        java.util.Optional.of(_parentMethodConsumer),
                        java.util.Optional.of(_parentMethodSupplierInner1),
                        java.util.Optional.of(_parentMethodConsumerInner1),
                        _parentMethodType,
                        FIELD_PARENTMETHOD,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fieldNameSupplier),
                        java.util.Optional.of(_fieldNameConsumer),
                        java.util.Optional.of(_fieldNameSupplierInner1),
                        java.util.Optional.of(_fieldNameConsumerInner1),
                        _fieldNameType,
                        FIELD_FIELDNAME,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__IdentifierExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                    ._Expression__IdentifierExprBuilderImpl();
        }

        @Override
        public Expression__IdentifierExprBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__IdentifierExpr
                    ._Expression__IdentifierExprBuilderImpl(cc);
        }

        public Expression__IdentifierExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__IdentifierExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXPRTYPE, exprTypeMeta);
                                        put(FIELD_PARENTMETHOD, parentMethodMeta);
                                        put(FIELD_FIELDNAME, fieldNameMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<Expression__IdentifierExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXPRTYPE:
                    return FIELD_EXPRTYPE;
                case FIELD_ID_PARENTMETHOD:
                    return FIELD_PARENTMETHOD;
                case FIELD_ID_FIELDNAME:
                    return FIELD_FIELDNAME;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__IdentifierExpr{ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];fieldName:string;parentMethod:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;}
            schemarise.alfa.runtime.model.Expression__IdentifierExpr{ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];fieldName:string;}
            */
            return "f2cc5a48:785f6477";
        }
    }
    // </editor-fold>

}
