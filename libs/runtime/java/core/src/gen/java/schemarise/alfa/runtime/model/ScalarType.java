// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public enum ScalarType implements com.schemarise.alfa.runtime.Enum {
    stringType("stringType", java.util.Optional.empty()),
    shortType("shortType", java.util.Optional.empty()),
    intType("intType", java.util.Optional.empty()),
    longType("longType", java.util.Optional.empty()),
    booleanType("booleanType", java.util.Optional.empty()),
    dateType("dateType", java.util.Optional.empty()),
    datetimeType("datetimeType", java.util.Optional.empty()),
    datetimetzType("datetimetzType", java.util.Optional.empty()),
    timeType("timeType", java.util.Optional.empty()),
    durationType("durationType", java.util.Optional.empty()),
    periodType("periodType", java.util.Optional.empty()),
    doubleType("doubleType", java.util.Optional.empty()),
    floatType("floatType", java.util.Optional.empty()),
    binaryType("binaryType", java.util.Optional.empty()),
    byteType("byteType", java.util.Optional.empty()),
    decimalType("decimalType", java.util.Optional.empty()),
    voidType("voidType", java.util.Optional.empty()),
    uuidType("uuidType", java.util.Optional.empty()),
    charType("charType", java.util.Optional.empty()),
    uriType("uriType", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, ScalarType> mappings;

    ScalarType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static ScalarType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, ScalarType> m = new java.util.HashMap<>();
            for (ScalarType c : ScalarType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.ScalarType.ScalarTypeDescriptor.INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ScalarTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.ScalarType";
        public static schemarise.alfa.runtime.model.ScalarType.ScalarTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.ScalarType.ScalarTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_STRINGTYPE = 0;
        public static final String FIELD_STRINGTYPE = "stringType";

        public static final short FIELD_ID_SHORTTYPE = 1;
        public static final String FIELD_SHORTTYPE = "shortType";

        public static final short FIELD_ID_INTTYPE = 2;
        public static final String FIELD_INTTYPE = "intType";

        public static final short FIELD_ID_LONGTYPE = 3;
        public static final String FIELD_LONGTYPE = "longType";

        public static final short FIELD_ID_BOOLEANTYPE = 4;
        public static final String FIELD_BOOLEANTYPE = "booleanType";

        public static final short FIELD_ID_DATETYPE = 5;
        public static final String FIELD_DATETYPE = "dateType";

        public static final short FIELD_ID_DATETIMETYPE = 6;
        public static final String FIELD_DATETIMETYPE = "datetimeType";

        public static final short FIELD_ID_DATETIMETZTYPE = 7;
        public static final String FIELD_DATETIMETZTYPE = "datetimetzType";

        public static final short FIELD_ID_TIMETYPE = 8;
        public static final String FIELD_TIMETYPE = "timeType";

        public static final short FIELD_ID_DURATIONTYPE = 9;
        public static final String FIELD_DURATIONTYPE = "durationType";

        public static final short FIELD_ID_PERIODTYPE = 10;
        public static final String FIELD_PERIODTYPE = "periodType";

        public static final short FIELD_ID_DOUBLETYPE = 11;
        public static final String FIELD_DOUBLETYPE = "doubleType";

        public static final short FIELD_ID_FLOATTYPE = 12;
        public static final String FIELD_FLOATTYPE = "floatType";

        public static final short FIELD_ID_BINARYTYPE = 13;
        public static final String FIELD_BINARYTYPE = "binaryType";

        public static final short FIELD_ID_BYTETYPE = 14;
        public static final String FIELD_BYTETYPE = "byteType";

        public static final short FIELD_ID_DECIMALTYPE = 15;
        public static final String FIELD_DECIMALTYPE = "decimalType";

        public static final short FIELD_ID_VOIDTYPE = 16;
        public static final String FIELD_VOIDTYPE = "voidType";

        public static final short FIELD_ID_UUIDTYPE = 17;
        public static final String FIELD_UUIDTYPE = "uuidType";

        public static final short FIELD_ID_CHARTYPE = 18;
        public static final String FIELD_CHARTYPE = "charType";

        public static final short FIELD_ID_URITYPE = 19;
        public static final String FIELD_URITYPE = "uriType";

        private schemarise.alfa.runtime.model.ScalarDataType _stringTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _shortTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _intTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _longTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _booleanTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dateTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _datetimeTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _datetimetzTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _timeTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _durationTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _periodTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _doubleTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _floatTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _binaryTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _byteTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _decimalTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _voidTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _uuidTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _charTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _uriTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<ScalarType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta stringTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _stringTypeType,
                        FIELD_STRINGTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta shortTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _shortTypeType,
                        FIELD_SHORTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta intTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _intTypeType,
                        FIELD_INTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta longTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _longTypeType,
                        FIELD_LONGTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta booleanTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _booleanTypeType,
                        FIELD_BOOLEANTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dateTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _dateTypeType,
                        FIELD_DATETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datetimeTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _datetimeTypeType,
                        FIELD_DATETIMETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datetimetzTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _datetimetzTypeType,
                        FIELD_DATETIMETZTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta timeTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _timeTypeType,
                        FIELD_TIMETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta durationTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _durationTypeType,
                        FIELD_DURATIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta periodTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _periodTypeType,
                        FIELD_PERIODTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta doubleTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _doubleTypeType,
                        FIELD_DOUBLETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta floatTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _floatTypeType,
                        FIELD_FLOATTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta binaryTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _binaryTypeType,
                        FIELD_BINARYTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta byteTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _byteTypeType,
                        FIELD_BYTETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta decimalTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _decimalTypeType,
                        FIELD_DECIMALTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta voidTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _voidTypeType,
                        FIELD_VOIDTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta uuidTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _uuidTypeType,
                        FIELD_UUIDTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta charTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _charTypeType,
                        FIELD_CHARTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta uriTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _uriTypeType,
                        FIELD_URITYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public ScalarTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ScalarType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_STRINGTYPE, stringTypeMeta);
                                        put(FIELD_SHORTTYPE, shortTypeMeta);
                                        put(FIELD_INTTYPE, intTypeMeta);
                                        put(FIELD_LONGTYPE, longTypeMeta);
                                        put(FIELD_BOOLEANTYPE, booleanTypeMeta);
                                        put(FIELD_DATETYPE, dateTypeMeta);
                                        put(FIELD_DATETIMETYPE, datetimeTypeMeta);
                                        put(FIELD_DATETIMETZTYPE, datetimetzTypeMeta);
                                        put(FIELD_TIMETYPE, timeTypeMeta);
                                        put(FIELD_DURATIONTYPE, durationTypeMeta);
                                        put(FIELD_PERIODTYPE, periodTypeMeta);
                                        put(FIELD_DOUBLETYPE, doubleTypeMeta);
                                        put(FIELD_FLOATTYPE, floatTypeMeta);
                                        put(FIELD_BINARYTYPE, binaryTypeMeta);
                                        put(FIELD_BYTETYPE, byteTypeMeta);
                                        put(FIELD_DECIMALTYPE, decimalTypeMeta);
                                        put(FIELD_VOIDTYPE, voidTypeMeta);
                                        put(FIELD_UUIDTYPE, uuidTypeMeta);
                                        put(FIELD_CHARTYPE, charTypeMeta);
                                        put(FIELD_URITYPE, uriTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ScalarType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_STRINGTYPE:
                    return FIELD_STRINGTYPE;
                case FIELD_ID_SHORTTYPE:
                    return FIELD_SHORTTYPE;
                case FIELD_ID_INTTYPE:
                    return FIELD_INTTYPE;
                case FIELD_ID_LONGTYPE:
                    return FIELD_LONGTYPE;
                case FIELD_ID_BOOLEANTYPE:
                    return FIELD_BOOLEANTYPE;
                case FIELD_ID_DATETYPE:
                    return FIELD_DATETYPE;
                case FIELD_ID_DATETIMETYPE:
                    return FIELD_DATETIMETYPE;
                case FIELD_ID_DATETIMETZTYPE:
                    return FIELD_DATETIMETZTYPE;
                case FIELD_ID_TIMETYPE:
                    return FIELD_TIMETYPE;
                case FIELD_ID_DURATIONTYPE:
                    return FIELD_DURATIONTYPE;
                case FIELD_ID_PERIODTYPE:
                    return FIELD_PERIODTYPE;
                case FIELD_ID_DOUBLETYPE:
                    return FIELD_DOUBLETYPE;
                case FIELD_ID_FLOATTYPE:
                    return FIELD_FLOATTYPE;
                case FIELD_ID_BINARYTYPE:
                    return FIELD_BINARYTYPE;
                case FIELD_ID_BYTETYPE:
                    return FIELD_BYTETYPE;
                case FIELD_ID_DECIMALTYPE:
                    return FIELD_DECIMALTYPE;
                case FIELD_ID_VOIDTYPE:
                    return FIELD_VOIDTYPE;
                case FIELD_ID_UUIDTYPE:
                    return FIELD_UUIDTYPE;
                case FIELD_ID_CHARTYPE:
                    return FIELD_CHARTYPE;
                case FIELD_ID_URITYPE:
                    return FIELD_URITYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.ScalarType{stringType,shortType,intType,longType,booleanType,dateType,datetimeType,datetimetzType,timeType,durationType,periodType,doubleType,floatType,binaryType,byteType,decimalType,voidType,uuidType,charType,uriType}
            schemarise.alfa.runtime.model.ScalarType{stringType,shortType,intType,longType,booleanType,dateType,datetimeType,datetimetzType,timeType,durationType,periodType,doubleType,floatType,binaryType,byteType,decimalType,voidType,uuidType,charType,uriType}
            */
            return "a20ec375:";
        }
    }
    // </editor-fold>
}
