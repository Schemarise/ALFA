// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Linkage extends com.schemarise.alfa.runtime.Record {

    java.lang.String getName();

    java.util.List<schemarise.alfa.runtime.model.IExpression> getSourceExpressions();

    schemarise.alfa.runtime.model.UdtDataType getTargetType();

    boolean getIsList();

    boolean getIsOptional();

    java.util.List<schemarise.alfa.runtime.model.IExpression> getTargetExpressions();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static LinkageBuilder builder() {
        return new schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl();
    }

    public static LinkageBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface LinkageBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        LinkageBuilder setName(java.lang.String v);

        java.lang.String getName();

        LinkageBuilder addSourceExpressions(schemarise.alfa.runtime.model.IExpression e);

        LinkageBuilder addAllSourceExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all);

        java.util.List<schemarise.alfa.runtime.model.IExpression> getSourceExpressions();

        LinkageBuilder setTargetType(schemarise.alfa.runtime.model.UdtDataType v);

        schemarise.alfa.runtime.model.UdtDataType getTargetType();

        LinkageBuilder setIsList(boolean v);

        boolean getIsList();

        LinkageBuilder setIsOptional(boolean v);

        boolean getIsOptional();

        LinkageBuilder addTargetExpressions(schemarise.alfa.runtime.model.IExpression e);

        LinkageBuilder addAllTargetExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all);

        java.util.List<schemarise.alfa.runtime.model.IExpression> getTargetExpressions();

        Linkage build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _LinkageBuilderImpl extends _Linkage__Base__ implements LinkageBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _LinkageBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _LinkageBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.INSTANCE;
        }

        public LinkageBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.FIELD_ID_NAME);
            return this;
        }

        private void createSourceExpressions() {
            this._sourceExpressions = new java.util.ArrayList<>();
        }

        public LinkageBuilder addSourceExpressions(schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceExpressions", e);
            if (this._sourceExpressions == null) createSourceExpressions();
            this._sourceExpressions.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_SOURCEEXPRESSIONS);
            return this;
        }

        public LinkageBuilder setSourceExpressions(
                int index, schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceExpressions", e);
            if (this._sourceExpressions == null) createSourceExpressions();
            this._sourceExpressions.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_SOURCEEXPRESSIONS);
            return this;
        }

        public LinkageBuilder addAllSourceExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceExpressions", all);
            if (this._sourceExpressions == null) createSourceExpressions();
            this._sourceExpressions.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_SOURCEEXPRESSIONS);
            return this;
        }

        private LinkageBuilder setSourceExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceExpressions", all);
            this._sourceExpressions = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_SOURCEEXPRESSIONS);
            return this;
        }

        public LinkageBuilder setTargetType(schemarise.alfa.runtime.model.UdtDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetType", v);
            this._targetType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.FIELD_ID_TARGETTYPE);
            return this;
        }

        public LinkageBuilder setIsList(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsList", v);
            this._isList = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.FIELD_ID_ISLIST);
            return this;
        }

        public LinkageBuilder setIsOptional(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsOptional", v);
            this._isOptional = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.FIELD_ID_ISOPTIONAL);
            return this;
        }

        private void createTargetExpressions() {
            this._targetExpressions = new java.util.ArrayList<>();
        }

        public LinkageBuilder addTargetExpressions(schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetExpressions", e);
            if (this._targetExpressions == null) createTargetExpressions();
            this._targetExpressions.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_TARGETEXPRESSIONS);
            return this;
        }

        public LinkageBuilder setTargetExpressions(
                int index, schemarise.alfa.runtime.model.IExpression e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetExpressions", e);
            if (this._targetExpressions == null) createTargetExpressions();
            this._targetExpressions.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_TARGETEXPRESSIONS);
            return this;
        }

        public LinkageBuilder addAllTargetExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetExpressions", all);
            if (this._targetExpressions == null) createTargetExpressions();
            this._targetExpressions.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_TARGETEXPRESSIONS);
            return this;
        }

        private LinkageBuilder setTargetExpressions(
                java.util.List<schemarise.alfa.runtime.model.IExpression> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetExpressions", all);
            this._targetExpressions = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                            .FIELD_ID_TARGETEXPRESSIONS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Name":
                    setName((java.lang.String) val);
                    break;
                case "SourceExpressions":
                    setSourceExpressions(
                            (java.util.List<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                case "TargetType":
                    setTargetType((schemarise.alfa.runtime.model.UdtDataType) val);
                    break;
                case "IsList":
                    setIsList((boolean) val);
                    break;
                case "IsOptional":
                    setIsOptional((boolean) val);
                    break;
                case "TargetExpressions":
                    setTargetExpressions(
                            (java.util.List<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Linkage build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.INSTANCE);

            Linkage obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Linkage)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _name,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Linkage.LinkageDescriptor
                                                                        .INSTANCE
                                                                        ._sourceExpressionsSupplierInner1,
                                                                _sourceExpressions),
                                                _targetType,
                                                _isList,
                                                _isOptional,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .Linkage.LinkageDescriptor
                                                                        .INSTANCE
                                                                        ._targetExpressionsSupplierInner1,
                                                                _targetExpressions));
            else
                obj =
                        new schemarise.alfa.runtime.model.Linkage._LinkageConcrete(
                                _name,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                                                .INSTANCE
                                                ._sourceExpressionsSupplierInner1,
                                        _sourceExpressions),
                                _targetType,
                                _isList,
                                _isOptional,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.Linkage.LinkageDescriptor
                                                .INSTANCE
                                                ._targetExpressionsSupplierInner1,
                                        _targetExpressions));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Linkage",
                    new java.lang.String[] {
                        "Name",
                        "SourceExpressions",
                        "TargetType",
                        "IsList",
                        "IsOptional",
                        "TargetExpressions"
                    },
                    new java.lang.Object[] {
                        _name,
                        _sourceExpressions,
                        _targetType,
                        _isList,
                        _isOptional,
                        _targetExpressions
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _LinkageConcrete extends _Linkage__Base__ implements Linkage {

        private _LinkageConcrete() {
            super();
        }

        private _LinkageConcrete(
                java.lang.String _name,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _sourceExpressions,
                schemarise.alfa.runtime.model.UdtDataType _targetType,
                boolean _isList,
                boolean _isOptional,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _targetExpressions) {
            super(_name, _sourceExpressions, _targetType, _isList, _isOptional, _targetExpressions);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Linkage__Base__ {
        public java.lang.String _name;
        public java.util.List<schemarise.alfa.runtime.model.IExpression> _sourceExpressions;
        public schemarise.alfa.runtime.model.UdtDataType _targetType;
        public boolean _isList;
        public boolean _isOptional;
        public java.util.List<schemarise.alfa.runtime.model.IExpression> _targetExpressions;

        public _Linkage__Base__() {}

        public _Linkage__Base__(
                java.lang.String _name,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _sourceExpressions,
                schemarise.alfa.runtime.model.UdtDataType _targetType,
                boolean _isList,
                boolean _isOptional,
                java.util.List<schemarise.alfa.runtime.model.IExpression> _targetExpressions) {
            this._name = _name;
            this._sourceExpressions = _sourceExpressions;
            this._targetType = _targetType;
            this._isList = _isList;
            this._isOptional = _isOptional;
            this._targetExpressions = _targetExpressions;
        }

        public java.lang.String getName() {
            return _name;
        }

        public java.util.List<schemarise.alfa.runtime.model.IExpression> getSourceExpressions() {
            return _sourceExpressions;
        }

        public schemarise.alfa.runtime.model.UdtDataType getTargetType() {
            return _targetType;
        }

        public boolean getIsList() {
            return _isList;
        }

        public boolean getIsOptional() {
            return _isOptional;
        }

        public java.util.List<schemarise.alfa.runtime.model.IExpression> getTargetExpressions() {
            return _targetExpressions;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _name,
                    _sourceExpressions,
                    _targetType,
                    _isList,
                    _isOptional,
                    _targetExpressions);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Linkage",
                    new java.lang.String[] {
                        "Name",
                        "SourceExpressions",
                        "TargetType",
                        "IsList",
                        "IsOptional",
                        "TargetExpressions"
                    },
                    new java.lang.Object[] {
                        _name,
                        _sourceExpressions,
                        _targetType,
                        _isList,
                        _isOptional,
                        _targetExpressions
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Linkage._LinkageConcrete))
                return false;
            schemarise.alfa.runtime.model.Linkage._LinkageConcrete rhs =
                    (schemarise.alfa.runtime.model.Linkage._LinkageConcrete) o;
            return java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_sourceExpressions, rhs._sourceExpressions)
                    && java.util.Objects.equals(_targetType, rhs._targetType)
                    && _isList == rhs._isList
                    && _isOptional == rhs._isOptional
                    && java.util.Objects.equals(_targetExpressions, rhs._targetExpressions);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Linkage.LinkageDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Name":
                    return _name;
                case "SourceExpressions":
                    return _sourceExpressions;
                case "TargetType":
                    return _targetType;
                case "IsList":
                    return _isList;
                case "IsOptional":
                    return _isOptional;
                case "TargetExpressions":
                    return _targetExpressions;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            java.util.stream.IntStream.range(0, getSourceExpressions().size())
                    .forEach(
                            e0 -> {
                                getSourceExpressions().get(e0).validate(__builderConfig);
                            });

            getTargetType().validate(__builderConfig);

            java.util.stream.IntStream.range(0, getTargetExpressions().size())
                    .forEach(
                            e0 -> {
                                getTargetExpressions().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class LinkageDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Linkage";
        public static schemarise.alfa.runtime.model.Linkage.LinkageDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Linkage.LinkageDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAME = 0;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_SOURCEEXPRESSIONS = 1;
        public static final String FIELD_SOURCEEXPRESSIONS = "SourceExpressions";

        public static final short FIELD_ID_TARGETTYPE = 2;
        public static final String FIELD_TARGETTYPE = "TargetType";

        public static final short FIELD_ID_ISLIST = 3;
        public static final String FIELD_ISLIST = "IsList";

        public static final short FIELD_ID_ISOPTIONAL = 4;
        public static final String FIELD_ISOPTIONAL = "IsOptional";

        public static final short FIELD_ID_TARGETEXPRESSIONS = 5;
        public static final String FIELD_TARGETEXPRESSIONS = "TargetExpressions";

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _sourceExpressionsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _targetTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _isListType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _isOptionalType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _targetExpressionsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.IExpression>>
                _sourceExpressionsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _sourceExpressionsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _sourceExpressionsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType)
                                            _sourceExpressionsType),
                                    _sourceExpressionsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceExpressionsConsumer =
                        (builder, supplier) -> {
                            builder.addAllSourceExpressions(
                                    _sourceExpressionsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtDataType>
                _targetTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _targetTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _targetTypeConsumer =
                        (builder, supplier) -> {
                            builder.setTargetType(_targetTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _isListConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isListType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isListConsumer =
                        (builder, supplier) -> {
                            builder.setIsList(_isListConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _isOptionalConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isOptionalType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isOptionalConsumer =
                        (builder, supplier) -> {
                            builder.setIsOptional(_isOptionalConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.IExpression>>
                _targetExpressionsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _targetExpressionsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _targetExpressionsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType)
                                            _targetExpressionsType),
                                    _targetExpressionsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _targetExpressionsConsumer =
                        (builder, supplier) -> {
                            builder.addAllTargetExpressions(
                                    _targetExpressionsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceExpressionsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceExpressionsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _sourceExpressionsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType)
                                            _sourceExpressionsType),
                                    pInner1,
                                    _sourceExpressionsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceExpressionsSupplier =
                        (p, consumer) -> {
                            _sourceExpressionsSupplierInner1.accept(
                                    p.getSourceExpressions(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _targetTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetTypeSupplier =
                        (p, consumer) -> {
                            _targetTypeSupplierInner1.accept(p.getTargetType(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _isListSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isListType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isListSupplier =
                        (p, consumer) -> {
                            _isListSupplierInner1.accept(p.getIsList(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _isOptionalSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isOptionalType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isOptionalSupplier =
                        (p, consumer) -> {
                            _isOptionalSupplierInner1.accept(p.getIsOptional(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.IExpression > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetExpressionsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _targetExpressionsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _targetExpressionsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType)
                                            _targetExpressionsType),
                                    pInner1,
                                    _targetExpressionsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Linkage,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetExpressionsSupplier =
                        (p, consumer) -> {
                            _targetExpressionsSupplierInner1.accept(
                                    p.getTargetExpressions(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Linkage, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceExpressionsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceExpressionsSupplier),
                        java.util.Optional.of(_sourceExpressionsConsumer),
                        java.util.Optional.of(_sourceExpressionsSupplierInner1),
                        java.util.Optional.of(_sourceExpressionsConsumerInner1),
                        _sourceExpressionsType,
                        FIELD_SOURCEEXPRESSIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta targetTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_targetTypeSupplier),
                        java.util.Optional.of(_targetTypeConsumer),
                        java.util.Optional.of(_targetTypeSupplierInner1),
                        java.util.Optional.of(_targetTypeConsumerInner1),
                        _targetTypeType,
                        FIELD_TARGETTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isListMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isListSupplier),
                        java.util.Optional.of(_isListConsumer),
                        java.util.Optional.of(_isListSupplierInner1),
                        java.util.Optional.of(_isListConsumerInner1),
                        _isListType,
                        FIELD_ISLIST,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isOptionalMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isOptionalSupplier),
                        java.util.Optional.of(_isOptionalConsumer),
                        java.util.Optional.of(_isOptionalSupplierInner1),
                        java.util.Optional.of(_isOptionalConsumerInner1),
                        _isOptionalType,
                        FIELD_ISOPTIONAL,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta targetExpressionsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_targetExpressionsSupplier),
                        java.util.Optional.of(_targetExpressionsConsumer),
                        java.util.Optional.of(_targetExpressionsSupplierInner1),
                        java.util.Optional.of(_targetExpressionsConsumerInner1),
                        _targetExpressionsType,
                        FIELD_TARGETEXPRESSIONS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public LinkageBuilder builder() {
            return new schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl();
        }

        @Override
        public LinkageBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Linkage._LinkageBuilderImpl(cc);
        }

        public LinkageDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Linkage>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_SOURCEEXPRESSIONS, sourceExpressionsMeta);
                                        put(FIELD_TARGETTYPE, targetTypeMeta);
                                        put(FIELD_ISLIST, isListMeta);
                                        put(FIELD_ISOPTIONAL, isOptionalMeta);
                                        put(FIELD_TARGETEXPRESSIONS, targetExpressionsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Linkage>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_SOURCEEXPRESSIONS:
                    return FIELD_SOURCEEXPRESSIONS;
                case FIELD_ID_TARGETTYPE:
                    return FIELD_TARGETTYPE;
                case FIELD_ID_ISLIST:
                    return FIELD_ISLIST;
                case FIELD_ID_ISOPTIONAL:
                    return FIELD_ISOPTIONAL;
                case FIELD_ID_TARGETEXPRESSIONS:
                    return FIELD_TARGETEXPRESSIONS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Linkage{IsList:boolean;IsOptional:boolean;Name:string;SourceExpressions:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;TargetExpressions:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;TargetType:schemarise.alfa.runtime.model.UdtDataType[b49aa6a7];}
            schemarise.alfa.runtime.model.Linkage{IsList:boolean;IsOptional:boolean;Name:string;SourceExpressions:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;TargetExpressions:list<schemarise.alfa.runtime.model.IExpression[5fb330b3]>;TargetType:schemarise.alfa.runtime.model.UdtDataType[20423f1d];}
            */
            return "e04026a:7b6c7d07";
        }
    }
    // </editor-fold>

}
