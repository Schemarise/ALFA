// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.config.cli;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Settings extends com.schemarise.alfa.runtime.Record {

    /**
     * Namespace to use when schemas are imported from models which have no namespace (e.g. JSON
     * Schema)
     */
    java.util.Optional<java.lang.String> getNamespace();

    /** When deserializing data, ignore unknown fields */
    boolean getSkipUnknownFields();

    boolean getUseCachedClasses();

    boolean getSkipAssertAll();

    boolean getExcludeAsserts();

    java.lang.String getCsvDelimiter();

    /** Which row is considered the CSV titles/header row. Use 0 if no header. */
    int getCsvHeaderRows();

    /** Store to persist DQ results */
    java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> getDqStoreDB();

    java.util.Optional<java.util.Map<java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig>>
            getRuntimeDBs();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static SettingsBuilder builder() {
        return new schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl();
    }

    public static SettingsBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface SettingsBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        SettingsBuilder setNamespace(java.util.Optional<java.lang.String> v);

        SettingsBuilder setNamespace(java.lang.String v);

        /**
         * Namespace to use when schemas are imported from models which have no namespace (e.g. JSON
         * Schema)
         */
        java.util.Optional<java.lang.String> getNamespace();

        SettingsBuilder setSkipUnknownFields(boolean v);

        /** When deserializing data, ignore unknown fields */
        boolean getSkipUnknownFields();

        SettingsBuilder setUseCachedClasses(boolean v);

        boolean getUseCachedClasses();

        SettingsBuilder setSkipAssertAll(boolean v);

        boolean getSkipAssertAll();

        SettingsBuilder setExcludeAsserts(boolean v);

        boolean getExcludeAsserts();

        SettingsBuilder setCsvDelimiter(java.lang.String v);

        java.lang.String getCsvDelimiter();

        SettingsBuilder setCsvHeaderRows(int v);

        /** Which row is considered the CSV titles/header row. Use 0 if no header. */
        int getCsvHeaderRows();

        SettingsBuilder setDqStoreDB(
                java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> v);

        SettingsBuilder setDqStoreDB(schemarise.alfa.runtime.config.cli.DBConfig v);

        /** Store to persist DQ results */
        java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> getDqStoreDB();

        SettingsBuilder setRuntimeDBs(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>
                        v);

        SettingsBuilder setRuntimeDBs(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig> v);

        java.util.Optional<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig>>
                getRuntimeDBs();

        Settings build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _SettingsBuilderImpl extends _Settings__Base__ implements SettingsBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _SettingsBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _SettingsBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(9);
            __missingFields.set(0, 9);
            setNamespace(java.util.Optional.empty());
            setDqStoreDB(java.util.Optional.empty());
            setRuntimeDBs(java.util.Optional.empty());
            setSkipUnknownFields(false);
            setUseCachedClasses(true);
            setSkipAssertAll(false);
            setExcludeAsserts(false);
            setCsvDelimiter(",");
            setCsvHeaderRows(1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor.INSTANCE;
        }

        /**
         * Namespace to use when schemas are imported from models which have no namespace (e.g. JSON
         * Schema)
         */
        public SettingsBuilder setNamespace(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Namespace", v);
            this._namespace = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_NAMESPACE);
            return this;
        }

        /**
         * Namespace to use when schemas are imported from models which have no namespace (e.g. JSON
         * Schema)
         */
        public SettingsBuilder setNamespace(java.lang.String v) {
            this._namespace = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_NAMESPACE);
            return this;
        }

        /** When deserializing data, ignore unknown fields */
        public SettingsBuilder setSkipUnknownFields(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SkipUnknownFields", v);
            this._skipUnknownFields = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_SKIPUNKNOWNFIELDS);
            return this;
        }

        public SettingsBuilder setUseCachedClasses(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UseCachedClasses", v);
            this._useCachedClasses = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_USECACHEDCLASSES);
            return this;
        }

        public SettingsBuilder setSkipAssertAll(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SkipAssertAll", v);
            this._skipAssertAll = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_SKIPASSERTALL);
            return this;
        }

        public SettingsBuilder setExcludeAsserts(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExcludeAsserts", v);
            this._excludeAsserts = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_EXCLUDEASSERTS);
            return this;
        }

        public SettingsBuilder setCsvDelimiter(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("CsvDelimiter", v);
            this._csvDelimiter = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_CSVDELIMITER);
            return this;
        }

        /** Which row is considered the CSV titles/header row. Use 0 if no header. */
        public SettingsBuilder setCsvHeaderRows(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("CsvHeaderRows", v);
            this._csvHeaderRows = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_CSVHEADERROWS);
            return this;
        }

        /** Store to persist DQ results */
        public SettingsBuilder setDqStoreDB(
                java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DqStoreDB", v);
            this._dqStoreDB = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_DQSTOREDB);
            return this;
        }

        /** Store to persist DQ results */
        public SettingsBuilder setDqStoreDB(schemarise.alfa.runtime.config.cli.DBConfig v) {
            this._dqStoreDB = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_DQSTOREDB);
            return this;
        }

        public SettingsBuilder setRuntimeDBs(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RuntimeDBs", v);
            this._runtimeDBs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_RUNTIMEDBS);
            return this;
        }

        public SettingsBuilder setRuntimeDBs(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig> v) {
            this._runtimeDBs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor
                            .FIELD_ID_RUNTIMEDBS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Namespace":
                    setNamespace((java.util.Optional<java.lang.String>) val);
                    break;
                case "SkipUnknownFields":
                    setSkipUnknownFields((boolean) val);
                    break;
                case "UseCachedClasses":
                    setUseCachedClasses((boolean) val);
                    break;
                case "SkipAssertAll":
                    setSkipAssertAll((boolean) val);
                    break;
                case "ExcludeAsserts":
                    setExcludeAsserts((boolean) val);
                    break;
                case "CsvDelimiter":
                    setCsvDelimiter((java.lang.String) val);
                    break;
                case "CsvHeaderRows":
                    setCsvHeaderRows((int) val);
                    break;
                case "DqStoreDB":
                    setDqStoreDB(
                            (java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig>) val);
                    break;
                case "RuntimeDBs":
                    setRuntimeDBs(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.config.cli.DBConfig>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Settings build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    9,
                    schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor.INSTANCE);

            Settings obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Settings)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _namespace,
                                                _skipUnknownFields,
                                                _useCachedClasses,
                                                _skipAssertAll,
                                                _excludeAsserts,
                                                _csvDelimiter,
                                                _csvHeaderRows,
                                                _dqStoreDB,
                                                _runtimeDBs);
            else
                obj =
                        new schemarise.alfa.runtime.config.cli.Settings._SettingsConcrete(
                                _namespace,
                                _skipUnknownFields,
                                _useCachedClasses,
                                _skipAssertAll,
                                _excludeAsserts,
                                _csvDelimiter,
                                _csvHeaderRows,
                                _dqStoreDB,
                                _runtimeDBs);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.config.cli.Settings",
                    new java.lang.String[] {
                        "Namespace",
                        "SkipUnknownFields",
                        "UseCachedClasses",
                        "SkipAssertAll",
                        "ExcludeAsserts",
                        "CsvDelimiter",
                        "CsvHeaderRows",
                        "DqStoreDB",
                        "RuntimeDBs"
                    },
                    new java.lang.Object[] {
                        _namespace,
                        _skipUnknownFields,
                        _useCachedClasses,
                        _skipAssertAll,
                        _excludeAsserts,
                        _csvDelimiter,
                        _csvHeaderRows,
                        _dqStoreDB,
                        _runtimeDBs
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _SettingsConcrete extends _Settings__Base__ implements Settings {

        private _SettingsConcrete() {
            super();
        }

        private _SettingsConcrete(
                java.util.Optional<java.lang.String> _namespace,
                boolean _skipUnknownFields,
                boolean _useCachedClasses,
                boolean _skipAssertAll,
                boolean _excludeAsserts,
                java.lang.String _csvDelimiter,
                int _csvHeaderRows,
                java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> _dqStoreDB,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>
                        _runtimeDBs) {
            super(
                    _namespace,
                    _skipUnknownFields,
                    _useCachedClasses,
                    _skipAssertAll,
                    _excludeAsserts,
                    _csvDelimiter,
                    _csvHeaderRows,
                    _dqStoreDB,
                    _runtimeDBs);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Settings__Base__ {
        public java.util.Optional<java.lang.String> _namespace;
        public boolean _skipUnknownFields;
        public boolean _useCachedClasses;
        public boolean _skipAssertAll;
        public boolean _excludeAsserts;
        public java.lang.String _csvDelimiter;
        public int _csvHeaderRows;
        public java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> _dqStoreDB;
        public java.util.Optional<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig>>
                _runtimeDBs;

        public _Settings__Base__() {}

        public _Settings__Base__(
                java.util.Optional<java.lang.String> _namespace,
                boolean _skipUnknownFields,
                boolean _useCachedClasses,
                boolean _skipAssertAll,
                boolean _excludeAsserts,
                java.lang.String _csvDelimiter,
                int _csvHeaderRows,
                java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> _dqStoreDB,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>
                        _runtimeDBs) {
            this._namespace = _namespace;
            this._skipUnknownFields = _skipUnknownFields;
            this._useCachedClasses = _useCachedClasses;
            this._skipAssertAll = _skipAssertAll;
            this._excludeAsserts = _excludeAsserts;
            this._csvDelimiter = _csvDelimiter;
            this._csvHeaderRows = _csvHeaderRows;
            this._dqStoreDB = _dqStoreDB;
            this._runtimeDBs = _runtimeDBs;
        }

        public java.util.Optional<java.lang.String> getNamespace() {
            return _namespace;
        }

        public boolean getSkipUnknownFields() {
            return _skipUnknownFields;
        }

        public boolean getUseCachedClasses() {
            return _useCachedClasses;
        }

        public boolean getSkipAssertAll() {
            return _skipAssertAll;
        }

        public boolean getExcludeAsserts() {
            return _excludeAsserts;
        }

        public java.lang.String getCsvDelimiter() {
            return _csvDelimiter;
        }

        public int getCsvHeaderRows() {
            return _csvHeaderRows;
        }

        public java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig> getDqStoreDB() {
            return _dqStoreDB;
        }

        public java.util.Optional<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.config.cli.DBConfig>>
                getRuntimeDBs() {
            return _runtimeDBs;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _namespace,
                    _skipUnknownFields,
                    _useCachedClasses,
                    _skipAssertAll,
                    _excludeAsserts,
                    _csvDelimiter,
                    _csvHeaderRows,
                    _dqStoreDB,
                    _runtimeDBs);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.config.cli.Settings",
                    new java.lang.String[] {
                        "Namespace",
                        "SkipUnknownFields",
                        "UseCachedClasses",
                        "SkipAssertAll",
                        "ExcludeAsserts",
                        "CsvDelimiter",
                        "CsvHeaderRows",
                        "DqStoreDB",
                        "RuntimeDBs"
                    },
                    new java.lang.Object[] {
                        _namespace,
                        _skipUnknownFields,
                        _useCachedClasses,
                        _skipAssertAll,
                        _excludeAsserts,
                        _csvDelimiter,
                        _csvHeaderRows,
                        _dqStoreDB,
                        _runtimeDBs
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.config.cli.Settings._SettingsConcrete))
                return false;
            schemarise.alfa.runtime.config.cli.Settings._SettingsConcrete rhs =
                    (schemarise.alfa.runtime.config.cli.Settings._SettingsConcrete) o;
            return java.util.Objects.equals(_namespace, rhs._namespace)
                    && _skipUnknownFields == rhs._skipUnknownFields
                    && _useCachedClasses == rhs._useCachedClasses
                    && _skipAssertAll == rhs._skipAssertAll
                    && _excludeAsserts == rhs._excludeAsserts
                    && java.util.Objects.equals(_csvDelimiter, rhs._csvDelimiter)
                    && _csvHeaderRows == rhs._csvHeaderRows
                    && java.util.Objects.equals(_dqStoreDB, rhs._dqStoreDB)
                    && java.util.Objects.equals(_runtimeDBs, rhs._runtimeDBs);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Namespace":
                    return _namespace;
                case "SkipUnknownFields":
                    return _skipUnknownFields;
                case "UseCachedClasses":
                    return _useCachedClasses;
                case "SkipAssertAll":
                    return _skipAssertAll;
                case "ExcludeAsserts":
                    return _excludeAsserts;
                case "CsvDelimiter":
                    return _csvDelimiter;
                case "CsvHeaderRows":
                    return _csvHeaderRows;
                case "DqStoreDB":
                    return _dqStoreDB;
                case "RuntimeDBs":
                    return _runtimeDBs;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getDqStoreDB().isPresent()) {
                getDqStoreDB().get().validate(__builderConfig);
            }
            if (getRuntimeDBs().isPresent()) {
                getRuntimeDBs()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue().validate(__builderConfig);
                                });
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class SettingsDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.config.cli.Settings";
        public static schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor INSTANCE =
                new schemarise.alfa.runtime.config.cli.Settings.SettingsDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAMESPACE = 0;
        public static final String FIELD_NAMESPACE = "Namespace";

        public static final short FIELD_ID_SKIPUNKNOWNFIELDS = 1;
        public static final String FIELD_SKIPUNKNOWNFIELDS = "SkipUnknownFields";

        public static final short FIELD_ID_USECACHEDCLASSES = 2;
        public static final String FIELD_USECACHEDCLASSES = "UseCachedClasses";

        public static final short FIELD_ID_SKIPASSERTALL = 3;
        public static final String FIELD_SKIPASSERTALL = "SkipAssertAll";

        public static final short FIELD_ID_EXCLUDEASSERTS = 4;
        public static final String FIELD_EXCLUDEASSERTS = "ExcludeAsserts";

        public static final short FIELD_ID_CSVDELIMITER = 5;
        public static final String FIELD_CSVDELIMITER = "CsvDelimiter";

        public static final short FIELD_ID_CSVHEADERROWS = 6;
        public static final String FIELD_CSVHEADERROWS = "CsvHeaderRows";

        public static final short FIELD_ID_DQSTOREDB = 7;
        public static final String FIELD_DQSTOREDB = "DqStoreDB";

        public static final short FIELD_ID_RUNTIMEDBS = 8;
        public static final String FIELD_RUNTIMEDBS = "RuntimeDBs";

        private schemarise.alfa.runtime.model.OptionalDataType _namespaceType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _skipUnknownFieldsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _useCachedClassesType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _skipAssertAllType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _excludeAssertsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _csvDelimiterType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _csvHeaderRowsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _dqStoreDBType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.config.cli.DBConfig")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _runtimeDBsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("StoreName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.config.cli.DBConfig")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _namespaceConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _namespaceConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _namespaceType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _namespaceType),
                                    _namespaceConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _namespaceConsumer =
                        (builder, supplier) -> {
                            builder.setNamespace(_namespaceConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _skipUnknownFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _skipUnknownFieldsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _skipUnknownFieldsConsumer =
                        (builder, supplier) -> {
                            builder.setSkipUnknownFields(
                                    _skipUnknownFieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _useCachedClassesConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _useCachedClassesType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _useCachedClassesConsumer =
                        (builder, supplier) -> {
                            builder.setUseCachedClasses(
                                    _useCachedClassesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _skipAssertAllConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _skipAssertAllType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _skipAssertAllConsumer =
                        (builder, supplier) -> {
                            builder.setSkipAssertAll(_skipAssertAllConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _excludeAssertsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _excludeAssertsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _excludeAssertsConsumer =
                        (builder, supplier) -> {
                            builder.setExcludeAsserts(
                                    _excludeAssertsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _csvDelimiterConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _csvDelimiterType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _csvDelimiterConsumer =
                        (builder, supplier) -> {
                            builder.setCsvDelimiter(_csvDelimiterConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _csvHeaderRowsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _csvHeaderRowsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _csvHeaderRowsConsumer =
                        (builder, supplier) -> {
                            builder.setCsvHeaderRows(_csvHeaderRowsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.config.cli.DBConfig ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig>>
                _dqStoreDBConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.config.cli.DBConfig>
                                    _dqStoreDBConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dqStoreDBType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _dqStoreDBType),
                                    _dqStoreDBConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dqStoreDBConsumer =
                        (builder, supplier) -> {
                            builder.setDqStoreDB(_dqStoreDBConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< StoreName : string , schemarise.alfa.runtime.config.cli.DBConfig > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>>
                _runtimeDBsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.config.cli.DBConfig>>
                                    _runtimeDBsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _runtimeDBsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _runtimeDBsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.config.cli
                                                                        .DBConfig>
                                                        _runtimeDBsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _runtimeDBsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _runtimeDBsType)
                                                                        .getComponentType()),
                                                        _runtimeDBsConsumerInner3Key,
                                                        _runtimeDBsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _runtimeDBsType),
                                    _runtimeDBsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _runtimeDBsConsumer =
                        (builder, supplier) -> {
                            builder.setRuntimeDBs(_runtimeDBsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namespaceSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _namespaceSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _namespaceType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _namespaceType),
                                    pInner1,
                                    _namespaceSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namespaceSupplier =
                        (p, consumer) -> {
                            _namespaceSupplierInner1.accept(p.getNamespace(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _skipUnknownFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _skipUnknownFieldsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _skipUnknownFieldsSupplier =
                        (p, consumer) -> {
                            _skipUnknownFieldsSupplierInner1.accept(
                                    p.getSkipUnknownFields(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _useCachedClassesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _useCachedClassesType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _useCachedClassesSupplier =
                        (p, consumer) -> {
                            _useCachedClassesSupplierInner1.accept(
                                    p.getUseCachedClasses(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _skipAssertAllSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _skipAssertAllType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _skipAssertAllSupplier =
                        (p, consumer) -> {
                            _skipAssertAllSupplierInner1.accept(p.getSkipAssertAll(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _excludeAssertsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _excludeAssertsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _excludeAssertsSupplier =
                        (p, consumer) -> {
                            _excludeAssertsSupplierInner1.accept(p.getExcludeAsserts(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _csvDelimiterSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _csvDelimiterType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _csvDelimiterSupplier =
                        (p, consumer) -> {
                            _csvDelimiterSupplierInner1.accept(p.getCsvDelimiter(), consumer);
                        };
        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _csvHeaderRowsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _csvHeaderRowsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _csvHeaderRowsSupplier =
                        (p, consumer) -> {
                            _csvHeaderRowsSupplierInner1.accept(p.getCsvHeaderRows(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.config.cli.DBConfig ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.config.cli.DBConfig>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dqStoreDBSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.config.cli.DBConfig,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _dqStoreDBSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dqStoreDBType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _dqStoreDBType),
                                    pInner1,
                                    _dqStoreDBSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dqStoreDBSupplier =
                        (p, consumer) -> {
                            _dqStoreDBSupplierInner1.accept(p.getDqStoreDB(), consumer);
                        };
        /* -- Supplier map< StoreName : string , schemarise.alfa.runtime.config.cli.DBConfig > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.config.cli.DBConfig>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _runtimeDBsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    schemarise.alfa.runtime.config.cli.DBConfig>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _runtimeDBsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _runtimeDBsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _runtimeDBsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.config.cli
                                                                        .DBConfig,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _runtimeDBsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _runtimeDBsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _runtimeDBsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _runtimeDBsSupplierInner3Key,
                                                        _runtimeDBsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _runtimeDBsType),
                                    pInner1,
                                    _runtimeDBsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.config.cli.Settings,
                        com.schemarise.alfa.runtime.DataConsumer>
                _runtimeDBsSupplier =
                        (p, consumer) -> {
                            _runtimeDBsSupplierInner1.accept(p.getRuntimeDBs(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Settings, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta namespaceMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_namespaceSupplier),
                        java.util.Optional.of(_namespaceConsumer),
                        java.util.Optional.of(_namespaceSupplierInner1),
                        java.util.Optional.of(_namespaceConsumerInner1),
                        _namespaceType,
                        FIELD_NAMESPACE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta skipUnknownFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_skipUnknownFieldsSupplier),
                        java.util.Optional.of(_skipUnknownFieldsConsumer),
                        java.util.Optional.of(_skipUnknownFieldsSupplierInner1),
                        java.util.Optional.of(_skipUnknownFieldsConsumerInner1),
                        _skipUnknownFieldsType,
                        FIELD_SKIPUNKNOWNFIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta useCachedClassesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_useCachedClassesSupplier),
                        java.util.Optional.of(_useCachedClassesConsumer),
                        java.util.Optional.of(_useCachedClassesSupplierInner1),
                        java.util.Optional.of(_useCachedClassesConsumerInner1),
                        _useCachedClassesType,
                        FIELD_USECACHEDCLASSES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta skipAssertAllMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_skipAssertAllSupplier),
                        java.util.Optional.of(_skipAssertAllConsumer),
                        java.util.Optional.of(_skipAssertAllSupplierInner1),
                        java.util.Optional.of(_skipAssertAllConsumerInner1),
                        _skipAssertAllType,
                        FIELD_SKIPASSERTALL,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta excludeAssertsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_excludeAssertsSupplier),
                        java.util.Optional.of(_excludeAssertsConsumer),
                        java.util.Optional.of(_excludeAssertsSupplierInner1),
                        java.util.Optional.of(_excludeAssertsConsumerInner1),
                        _excludeAssertsType,
                        FIELD_EXCLUDEASSERTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta csvDelimiterMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_csvDelimiterSupplier),
                        java.util.Optional.of(_csvDelimiterConsumer),
                        java.util.Optional.of(_csvDelimiterSupplierInner1),
                        java.util.Optional.of(_csvDelimiterConsumerInner1),
                        _csvDelimiterType,
                        FIELD_CSVDELIMITER,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta csvHeaderRowsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_csvHeaderRowsSupplier),
                        java.util.Optional.of(_csvHeaderRowsConsumer),
                        java.util.Optional.of(_csvHeaderRowsSupplierInner1),
                        java.util.Optional.of(_csvHeaderRowsConsumerInner1),
                        _csvHeaderRowsType,
                        FIELD_CSVHEADERROWS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dqStoreDBMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dqStoreDBSupplier),
                        java.util.Optional.of(_dqStoreDBConsumer),
                        java.util.Optional.of(_dqStoreDBSupplierInner1),
                        java.util.Optional.of(_dqStoreDBConsumerInner1),
                        _dqStoreDBType,
                        FIELD_DQSTOREDB,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta runtimeDBsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_runtimeDBsSupplier),
                        java.util.Optional.of(_runtimeDBsConsumer),
                        java.util.Optional.of(_runtimeDBsSupplierInner1),
                        java.util.Optional.of(_runtimeDBsConsumerInner1),
                        _runtimeDBsType,
                        FIELD_RUNTIMEDBS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public SettingsBuilder builder() {
            return new schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl();
        }

        @Override
        public SettingsBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.config.cli.Settings._SettingsBuilderImpl(cc);
        }

        public SettingsDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Settings>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAMESPACE, namespaceMeta);
                                        put(FIELD_SKIPUNKNOWNFIELDS, skipUnknownFieldsMeta);
                                        put(FIELD_USECACHEDCLASSES, useCachedClassesMeta);
                                        put(FIELD_SKIPASSERTALL, skipAssertAllMeta);
                                        put(FIELD_EXCLUDEASSERTS, excludeAssertsMeta);
                                        put(FIELD_CSVDELIMITER, csvDelimiterMeta);
                                        put(FIELD_CSVHEADERROWS, csvHeaderRowsMeta);
                                        put(FIELD_DQSTOREDB, dqStoreDBMeta);
                                        put(FIELD_RUNTIMEDBS, runtimeDBsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Settings>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAMESPACE:
                    return FIELD_NAMESPACE;
                case FIELD_ID_SKIPUNKNOWNFIELDS:
                    return FIELD_SKIPUNKNOWNFIELDS;
                case FIELD_ID_USECACHEDCLASSES:
                    return FIELD_USECACHEDCLASSES;
                case FIELD_ID_SKIPASSERTALL:
                    return FIELD_SKIPASSERTALL;
                case FIELD_ID_EXCLUDEASSERTS:
                    return FIELD_EXCLUDEASSERTS;
                case FIELD_ID_CSVDELIMITER:
                    return FIELD_CSVDELIMITER;
                case FIELD_ID_CSVHEADERROWS:
                    return FIELD_CSVHEADERROWS;
                case FIELD_ID_DQSTOREDB:
                    return FIELD_DQSTOREDB;
                case FIELD_ID_RUNTIMEDBS:
                    return FIELD_RUNTIMEDBS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.config.cli.Settings{CsvDelimiter:string=",";CsvHeaderRows:int=1;DqStoreDB:optional<schemarise.alfa.runtime.config.cli.DBConfig[68f3392b];>;ExcludeAsserts:boolean=false;Namespace:optional<string;>;RuntimeDBs:optional<map<string,string>;>;SkipAssertAll:boolean=false;SkipUnknownFields:boolean=false;UseCachedClasses:boolean=true;}
            schemarise.alfa.runtime.config.cli.Settings{}
            */
            return "af38f13d:3df8cdc1";
        }
    }
    // </editor-fold>

}
