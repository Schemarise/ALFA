// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionExpression
        extends com.schemarise.alfa.runtime.Union, schemarise.alfa.runtime.model.IDecisionExpression {

    public default schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr getLiteralExpr() {
        throw new IllegalStateException(
                "Accessing field LiteralExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLiteralExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
            getEnumConstExpr() {
        throw new IllegalStateException(
                "Accessing field EnumConstExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isEnumConstExpr() {
        return false;
    }

    public default com.schemarise.alfa.runtime.UnionUntypedCase getWildcardExpr() {
        throw new IllegalStateException(
                "Accessing field WildcardExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isWildcardExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.DecisionExpression__RangeExpr getRangeExpr() {
        throw new IllegalStateException(
                "Accessing field RangeExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isRangeExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr
            getRelativeExpr() {
        throw new IllegalStateException(
                "Accessing field RelativeExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isRelativeExpr() {
        return false;
    }

    public default schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr
            getEqualityExpr() {
        throw new IllegalStateException(
                "Accessing field EqualityExpr is not supported in " + getClass().getSimpleName());
    }

    public default boolean isEqualityExpr() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseLiteralExpr">
    static final class CaseLiteralExpr implements DecisionExpression {
        private schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr _literalExpr;

        private CaseLiteralExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr v) {
            this._literalExpr = v;
            getLiteralExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr getLiteralExpr() {
            return this._literalExpr;
        }

        public boolean isLiteralExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "LiteralExpr";
        }

        public java.lang.Object caseValue() {
            return _literalExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("LiteralExpr")) return _literalExpr;
            else throw new IllegalStateException("Cannot access LiteralExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseEnumConstExpr">
    static final class CaseEnumConstExpr implements DecisionExpression {
        private schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr _enumConstExpr;

        private CaseEnumConstExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr v) {
            this._enumConstExpr = v;
            getEnumConstExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr getEnumConstExpr() {
            return this._enumConstExpr;
        }

        public boolean isEnumConstExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "EnumConstExpr";
        }

        public java.lang.Object caseValue() {
            return _enumConstExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("EnumConstExpr")) return _enumConstExpr;
            else throw new IllegalStateException("Cannot access EnumConstExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseWildcardExpr">
    static final class CaseWildcardExpr implements DecisionExpression {
        private com.schemarise.alfa.runtime.UnionUntypedCase _wildcardExpr;

        private CaseWildcardExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                com.schemarise.alfa.runtime.UnionUntypedCase v) {
            this._wildcardExpr = v;
        }

        public com.schemarise.alfa.runtime.UnionUntypedCase getWildcardExpr() {
            return this._wildcardExpr;
        }

        public boolean isWildcardExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "WildcardExpr";
        }

        public java.lang.Object caseValue() {
            return _wildcardExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("WildcardExpr")) return _wildcardExpr;
            else throw new IllegalStateException("Cannot access WildcardExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseRangeExpr">
    static final class CaseRangeExpr implements DecisionExpression {
        private schemarise.alfa.runtime.model.DecisionExpression__RangeExpr _rangeExpr;

        private CaseRangeExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionExpression__RangeExpr v) {
            this._rangeExpr = v;
            getRangeExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionExpression__RangeExpr getRangeExpr() {
            return this._rangeExpr;
        }

        public boolean isRangeExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "RangeExpr";
        }

        public java.lang.Object caseValue() {
            return _rangeExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("RangeExpr")) return _rangeExpr;
            else throw new IllegalStateException("Cannot access RangeExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseRelativeExpr">
    static final class CaseRelativeExpr implements DecisionExpression {
        private schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr _relativeExpr;

        private CaseRelativeExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr v) {
            this._relativeExpr = v;
            getRelativeExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr getRelativeExpr() {
            return this._relativeExpr;
        }

        public boolean isRelativeExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "RelativeExpr";
        }

        public java.lang.Object caseValue() {
            return _relativeExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("RelativeExpr")) return _relativeExpr;
            else throw new IllegalStateException("Cannot access RelativeExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseEqualityExpr">
    static final class CaseEqualityExpr implements DecisionExpression {
        private schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr _equalityExpr;

        private CaseEqualityExpr(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr v) {
            this._equalityExpr = v;
            getEqualityExpr().validate(__builderConfig);
        }

        public schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr getEqualityExpr() {
            return this._equalityExpr;
        }

        public boolean isEqualityExpr() {
            return true;
        }

        public java.lang.String caseName() {
            return "EqualityExpr";
        }

        public java.lang.Object caseValue() {
            return _equalityExpr;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("EqualityExpr")) return _equalityExpr;
            else throw new IllegalStateException("Cannot access EqualityExpr");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionExpressionBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionExpression
                ._DecisionExpressionBuilderImpl();
    }

    public static DecisionExpressionBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionExpression
                                    .DecisionExpressionDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.DecisionExpression
                    ._DecisionExpressionBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionExpressionBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDecisionExpression.IDecisionExpressionBuilder {
        DecisionExpressionBuilder setLiteralExpr(
                schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr v);

        DecisionExpressionBuilder setEnumConstExpr(
                schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr v);

        DecisionExpressionBuilder setWildcardExpr(com.schemarise.alfa.runtime.UnionUntypedCase v);

        DecisionExpressionBuilder setRangeExpr(
                schemarise.alfa.runtime.model.DecisionExpression__RangeExpr v);

        DecisionExpressionBuilder setRelativeExpr(
                schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr v);

        DecisionExpressionBuilder setEqualityExpr(
                schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr v);

        DecisionExpression build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionExpressionBuilderImpl implements DecisionExpressionBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr _literalExpr;
        private schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr _enumConstExpr;
        private com.schemarise.alfa.runtime.UnionUntypedCase _wildcardExpr;
        private schemarise.alfa.runtime.model.DecisionExpression__RangeExpr _rangeExpr;
        private schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr _relativeExpr;
        private schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr _equalityExpr;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "LiteralExpr":
                    return _literalExpr;
                case "EnumConstExpr":
                    return _enumConstExpr;
                case "WildcardExpr":
                    return _wildcardExpr;
                case "RangeExpr":
                    return _rangeExpr;
                case "RelativeExpr":
                    return _relativeExpr;
                case "EqualityExpr":
                    return _equalityExpr;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _DecisionExpressionBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionExpressionBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                    .INSTANCE;
        }

        public DecisionExpressionBuilder setLiteralExpr(
                schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LiteralExpr", v);
            this._literalExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_LITERALEXPR);
            return this;
        }

        public DecisionExpressionBuilder setEnumConstExpr(
                schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EnumConstExpr", v);
            this._enumConstExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_ENUMCONSTEXPR);
            return this;
        }

        public DecisionExpressionBuilder setWildcardExpr(
                com.schemarise.alfa.runtime.UnionUntypedCase v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("WildcardExpr", v);
            this._wildcardExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_WILDCARDEXPR);
            return this;
        }

        public DecisionExpressionBuilder setRangeExpr(
                schemarise.alfa.runtime.model.DecisionExpression__RangeExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RangeExpr", v);
            this._rangeExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_RANGEEXPR);
            return this;
        }

        public DecisionExpressionBuilder setRelativeExpr(
                schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RelativeExpr", v);
            this._relativeExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_RELATIVEEXPR);
            return this;
        }

        public DecisionExpressionBuilder setEqualityExpr(
                schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EqualityExpr", v);
            this._equalityExpr = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_EQUALITYEXPR);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "LiteralExpr":
                    setLiteralExpr(
                            (schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr) val);
                    break;
                case "EnumConstExpr":
                    setEnumConstExpr(
                            (schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr) val);
                    break;
                case "WildcardExpr":
                    setWildcardExpr((com.schemarise.alfa.runtime.UnionUntypedCase) val);
                    break;
                case "RangeExpr":
                    setRangeExpr((schemarise.alfa.runtime.model.DecisionExpression__RangeExpr) val);
                    break;
                case "RelativeExpr":
                    setRelativeExpr(
                            (schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr) val);
                    break;
                case "EqualityExpr":
                    setEqualityExpr(
                            (schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionExpression build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_LITERALEXPR))
                return new CaseLiteralExpr(__builderConfig, _literalExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_ENUMCONSTEXPR))
                return new CaseEnumConstExpr(__builderConfig, _enumConstExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_WILDCARDEXPR))
                return new CaseWildcardExpr(__builderConfig, _wildcardExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_RANGEEXPR))
                return new CaseRangeExpr(__builderConfig, _rangeExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_RELATIVEEXPR))
                return new CaseRelativeExpr(__builderConfig, _relativeExpr);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .FIELD_ID_EQUALITYEXPR))
                return new CaseEqualityExpr(__builderConfig, _equalityExpr);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                            .INSTANCE,
                    6,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression",
                    new java.lang.String[] {
                        "LiteralExpr",
                        "EnumConstExpr",
                        "WildcardExpr",
                        "RangeExpr",
                        "RelativeExpr",
                        "EqualityExpr"
                    },
                    new java.lang.Object[] {
                        _literalExpr,
                        _enumConstExpr,
                        _wildcardExpr,
                        _rangeExpr,
                        _relativeExpr,
                        _equalityExpr
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionExpressionDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.DecisionExpression";
        public static schemarise.alfa.runtime.model.DecisionExpression.DecisionExpressionDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.DecisionExpression
                                .DecisionExpressionDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_LITERALEXPR = 0;
        public static final String FIELD_LITERALEXPR = "LiteralExpr";

        public static final short FIELD_ID_ENUMCONSTEXPR = 1;
        public static final String FIELD_ENUMCONSTEXPR = "EnumConstExpr";

        public static final short FIELD_ID_WILDCARDEXPR = 2;
        public static final String FIELD_WILDCARDEXPR = "WildcardExpr";

        public static final short FIELD_ID_RANGEEXPR = 3;
        public static final String FIELD_RANGEEXPR = "RangeExpr";

        public static final short FIELD_ID_RELATIVEEXPR = 4;
        public static final String FIELD_RELATIVEEXPR = "RelativeExpr";

        public static final short FIELD_ID_EQUALITYEXPR = 5;
        public static final String FIELD_EQUALITYEXPR = "EqualityExpr";

        private schemarise.alfa.runtime.model.TupleDataType _literalExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                        .DecisionExpression__LiteralExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _enumConstExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr
                                        .DecisionExpression__EnumConstExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _wildcardExprType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _rangeExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionExpression__RangeExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.DecisionExpression__RangeExpr
                                        .DecisionExpression__RangeExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _relativeExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr
                                        .DecisionExpression__RelativeExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.TupleDataType _equalityExprType =
                schemarise.alfa.runtime.model.TupleDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr")
                        .setSyntheticFieldNames(false)
                        .setAnnotations(java.util.Optional.empty())
                        .putAllFields(
                                schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr
                                        .DecisionExpression__EqualityExprDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        /* -- Consumer tuple<
            Type : schemarise.alfa.runtime.model.ScalarType,
            Value : string
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr>
                _literalExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _literalExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _literalExprConsumer =
                        (builder, supplier) -> {
                            builder.setLiteralExpr(_literalExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            EnumType : string,
            EnumField : string
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr>
                _enumConstExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _enumConstExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _enumConstExprConsumer =
                        (builder, supplier) -> {
                            builder.setEnumConstExpr(_enumConstExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer void -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        com.schemarise.alfa.runtime.UnionUntypedCase>
                _wildcardExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.voidValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _wildcardExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _wildcardExprConsumer =
                        (builder, supplier) -> {
                            builder.setWildcardExpr(_wildcardExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            NotIn : boolean,
            Start : schemarise.alfa.runtime.model.RangeValue,
            End : schemarise.alfa.runtime.model.RangeValue
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr>
                _rangeExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _rangeExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _rangeExprConsumer =
                        (builder, supplier) -> {
                            builder.setRangeExpr(_rangeExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            operator : schemarise.alfa.runtime.model.RelativeOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr>
                _relativeExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _relativeExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _relativeExprConsumer =
                        (builder, supplier) -> {
                            builder.setRelativeExpr(_relativeExprConsumerInner1.apply(supplier));
                        };
        /* -- Consumer tuple<
            operator : schemarise.alfa.runtime.model.EqualityOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr>
                _equalityExprConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.tupleValue(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _equalityExprType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression
                                ._DecisionExpressionBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _equalityExprConsumer =
                        (builder, supplier) -> {
                            builder.setEqualityExpr(_equalityExprConsumerInner1.apply(supplier));
                        };

        /* -- Supplier tuple<
            Type : schemarise.alfa.runtime.model.ScalarType,
            Value : string
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _literalExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _literalExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _literalExprSupplier =
                        (p, consumer) -> {
                            _literalExprSupplierInner1.accept(p.getLiteralExpr(), consumer);
                        };
        /* -- Supplier tuple<
            EnumType : string,
            EnumField : string
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EnumConstExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _enumConstExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _enumConstExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _enumConstExprSupplier =
                        (p, consumer) -> {
                            _enumConstExprSupplierInner1.accept(p.getEnumConstExpr(), consumer);
                        };
        /* -- Supplier void -- */
        java.util.function.BiConsumer<
                        com.schemarise.alfa.runtime.UnionUntypedCase,
                        com.schemarise.alfa.runtime.DataConsumer>
                _wildcardExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _wildcardExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _wildcardExprSupplier =
                        (p, consumer) -> {
                            _wildcardExprSupplierInner1.accept(p.getWildcardExpr(), consumer);
                        };
        /* -- Supplier tuple<
            NotIn : boolean,
            Start : schemarise.alfa.runtime.model.RangeValue,
            End : schemarise.alfa.runtime.model.RangeValue
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RangeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _rangeExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _rangeExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _rangeExprSupplier =
                        (p, consumer) -> {
                            _rangeExprSupplierInner1.accept(p.getRangeExpr(), consumer);
                        };
        /* -- Supplier tuple<
            operator : schemarise.alfa.runtime.model.RelativeOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__RelativeExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _relativeExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _relativeExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _relativeExprSupplier =
                        (p, consumer) -> {
                            _relativeExprSupplierInner1.accept(p.getRelativeExpr(), consumer);
                        };
        /* -- Supplier tuple<
            operator : schemarise.alfa.runtime.model.EqualityOperatorType,
            rhs : schemarise.alfa.runtime.model.IExpression
        > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__EqualityExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _equalityExprSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.TupleDataType) _equalityExprType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _equalityExprSupplier =
                        (p, consumer) -> {
                            _equalityExprSupplierInner1.accept(p.getEqualityExpr(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionExpression, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta literalExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_literalExprSupplier),
                        java.util.Optional.of(_literalExprConsumer),
                        java.util.Optional.of(_literalExprSupplierInner1),
                        java.util.Optional.of(_literalExprConsumerInner1),
                        _literalExprType,
                        FIELD_LITERALEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta enumConstExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_enumConstExprSupplier),
                        java.util.Optional.of(_enumConstExprConsumer),
                        java.util.Optional.of(_enumConstExprSupplierInner1),
                        java.util.Optional.of(_enumConstExprConsumerInner1),
                        _enumConstExprType,
                        FIELD_ENUMCONSTEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta wildcardExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_wildcardExprSupplier),
                        java.util.Optional.of(_wildcardExprConsumer),
                        java.util.Optional.of(_wildcardExprSupplierInner1),
                        java.util.Optional.of(_wildcardExprConsumerInner1),
                        _wildcardExprType,
                        FIELD_WILDCARDEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta rangeExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_rangeExprSupplier),
                        java.util.Optional.of(_rangeExprConsumer),
                        java.util.Optional.of(_rangeExprSupplierInner1),
                        java.util.Optional.of(_rangeExprConsumerInner1),
                        _rangeExprType,
                        FIELD_RANGEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta relativeExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_relativeExprSupplier),
                        java.util.Optional.of(_relativeExprConsumer),
                        java.util.Optional.of(_relativeExprSupplierInner1),
                        java.util.Optional.of(_relativeExprConsumerInner1),
                        _relativeExprType,
                        FIELD_RELATIVEEXPR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta equalityExprMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_equalityExprSupplier),
                        java.util.Optional.of(_equalityExprConsumer),
                        java.util.Optional.of(_equalityExprSupplierInner1),
                        java.util.Optional.of(_equalityExprConsumerInner1),
                        _equalityExprType,
                        FIELD_EQUALITYEXPR,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionExpressionBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionExpression
                    ._DecisionExpressionBuilderImpl();
        }

        @Override
        public DecisionExpressionBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionExpression
                    ._DecisionExpressionBuilderImpl(cc);
        }

        public DecisionExpressionDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionExpression>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_LITERALEXPR, literalExprMeta);
                                        put(FIELD_ENUMCONSTEXPR, enumConstExprMeta);
                                        put(FIELD_WILDCARDEXPR, wildcardExprMeta);
                                        put(FIELD_RANGEEXPR, rangeExprMeta);
                                        put(FIELD_RELATIVEEXPR, relativeExprMeta);
                                        put(FIELD_EQUALITYEXPR, equalityExprMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<DecisionExpression>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_LITERALEXPR:
                    return FIELD_LITERALEXPR;
                case FIELD_ID_ENUMCONSTEXPR:
                    return FIELD_ENUMCONSTEXPR;
                case FIELD_ID_WILDCARDEXPR:
                    return FIELD_WILDCARDEXPR;
                case FIELD_ID_RANGEEXPR:
                    return FIELD_RANGEEXPR;
                case FIELD_ID_RELATIVEEXPR:
                    return FIELD_RELATIVEEXPR;
                case FIELD_ID_EQUALITYEXPR:
                    return FIELD_EQUALITYEXPR;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionExpression{EnumConstExpr:tuple<EnumField:string;EnumType:string;>;EqualityExpr:tuple<operator:schemarise.alfa.runtime.model.EqualityOperatorType[5dca8e5a];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;LiteralExpr:tuple<Type:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;>;RangeExpr:tuple<End:schemarise.alfa.runtime.model.RangeValue[4896a1e];NotIn:boolean;Start:schemarise.alfa.runtime.model.RangeValue[4896a1e];>;RelativeExpr:tuple<operator:schemarise.alfa.runtime.model.RelativeOperatorType[4571a072];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;WildcardExpr:void;}
            schemarise.alfa.runtime.model.DecisionExpression{EnumConstExpr:tuple<EnumField:string;EnumType:string;>;EqualityExpr:tuple<operator:schemarise.alfa.runtime.model.EqualityOperatorType[5dca8e5a];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;LiteralExpr:tuple<Type:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;>;RangeExpr:tuple<End:schemarise.alfa.runtime.model.RangeValue[4896a1e];NotIn:boolean;Start:schemarise.alfa.runtime.model.RangeValue[4896a1e];>;RelativeExpr:tuple<operator:schemarise.alfa.runtime.model.RelativeOperatorType[4571a072];rhs:schemarise.alfa.runtime.model.IExpression[5fb330b3];>;WildcardExpr:void;}
            */
            return "d5fc0406:";
        }
    }
    // </editor-fold>

}
