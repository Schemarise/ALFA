// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Either<L, R> extends com.schemarise.alfa.runtime.Union {

    public default L getLeft() {
        throw new IllegalStateException(
                "Accessing field Left is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLeft() {
        return false;
    }

    public default R getRight() {
        throw new IllegalStateException(
                "Accessing field Right is not supported in " + getClass().getSimpleName());
    }

    public default boolean isRight() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseLeft">
    static final class CaseLeft<L, R> implements Either {
        private L _left;

        private CaseLeft(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, L v) {
            this._left = v;
        }

        public L getLeft() {
            return this._left;
        }

        public boolean isLeft() {
            return true;
        }

        public java.lang.String caseName() {
            return "Left";
        }

        public java.lang.Object caseValue() {
            return _left;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("Left")) return _left;
            else throw new IllegalStateException("Cannot access Left");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Either.EitherDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseRight">
    static final class CaseRight<L, R> implements Either {
        private R _right;

        private CaseRight(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, R v) {
            this._right = v;
        }

        public R getRight() {
            return this._right;
        }

        public boolean isRight() {
            return true;
        }

        public java.lang.String caseName() {
            return "Right";
        }

        public java.lang.Object caseValue() {
            return _right;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("Right")) return _right;
            else throw new IllegalStateException("Cannot access Right");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Either.EitherDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static <L, R> EitherBuilder<L, R> builder() {
        return new schemarise.alfa.runtime.model.Either._EitherBuilderImpl();
    }

    public static <L, R> EitherBuilder<L, R> builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Either.EitherDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Either._EitherBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface EitherBuilder<L, R>
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        EitherBuilder setLeft(L v);

        EitherBuilder setRight(R v);

        Either<L, R> build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _EitherBuilderImpl<L, R> implements EitherBuilder<L, R> {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private L _left;
        private R _right;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Left":
                    return _left;
                case "Right":
                    return _right;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _EitherBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _EitherBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Either.EitherDescriptor.INSTANCE;
        }

        public EitherBuilder setLeft(L v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Left", v);
            this._left = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Either.EitherDescriptor.FIELD_ID_LEFT);
            return this;
        }

        public EitherBuilder setRight(R v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Right", v);
            this._right = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Either.EitherDescriptor.FIELD_ID_RIGHT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Left":
                    setLeft((L) val);
                    break;
                case "Right":
                    setRight((R) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Either<L, R> build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Either.EitherDescriptor.FIELD_ID_LEFT))
                return new CaseLeft(__builderConfig, _left);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.Either.EitherDescriptor.FIELD_ID_RIGHT))
                return new CaseRight(__builderConfig, _right);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.Either.EitherDescriptor.INSTANCE,
                    2,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Either",
                    new java.lang.String[] {"Left", "Right"},
                    new java.lang.Object[] {_left, _right});
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class EitherDescriptor<L, R>
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Either";
        public static schemarise.alfa.runtime.model.Either.EitherDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Either.EitherDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_LEFT = 0;
        public static final String FIELD_LEFT = "Left";

        public static final short FIELD_ID_RIGHT = 1;
        public static final String FIELD_RIGHT = "Right";

        private schemarise.alfa.runtime.model.TypeParameterDataType _leftType =
                schemarise.alfa.runtime.model.TypeParameterDataType.builder().setParamName("L").build();

        private schemarise.alfa.runtime.model.TypeParameterDataType _rightType =
                schemarise.alfa.runtime.model.TypeParameterDataType.builder().setParamName("R").build();

        /* -- Consumer L -- */

        /* -- Consumer R -- */

        /* -- Supplier L -- */

        /* -- Supplier R -- */

        public java.util.Optional<
                        java.util.function.BiConsumer<Either, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta leftMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _leftType,
                        FIELD_LEFT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta rightMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _rightType,
                        FIELD_RIGHT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public EitherBuilder builder() {
            return new schemarise.alfa.runtime.model.Either._EitherBuilderImpl();
        }

        @Override
        public EitherBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Either._EitherBuilderImpl(cc);
        }

        public EitherDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Either>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_LEFT, leftMeta);
                                        put(FIELD_RIGHT, rightMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Either>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_LEFT:
                    return FIELD_LEFT;
                case FIELD_ID_RIGHT:
                    return FIELD_RIGHT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Either{Left:;Right:;}
            schemarise.alfa.runtime.model.Either{Left:;Right:;}
            */
            return "286d9214:";
        }
    }
    // </editor-fold>

}
