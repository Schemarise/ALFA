// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface BaseTable extends com.schemarise.alfa.runtime.Trait {

    public static com.schemarise.alfa.runtime.TypeDescriptor descriptor =
            new schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor();

    schemarise.alfa.runtime.model.TableDef getDef();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static BaseTableBuilder builder() {
        return new schemarise.alfa.runtime.model.BaseTable._BaseTableBuilderImpl();
    }

    public static BaseTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.BaseTable._BaseTableBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface BaseTableBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        BaseTableBuilder setDef(schemarise.alfa.runtime.model.TableDef v);

        schemarise.alfa.runtime.model.TableDef getDef();

        BaseTable build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _BaseTableBuilderImpl extends _BaseTable__Base__ implements BaseTableBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _BaseTableBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _BaseTableBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(1);
            __missingFields.set(0, 1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor.INSTANCE;
        }

        public BaseTableBuilder setDef(schemarise.alfa.runtime.model.TableDef v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Def", v);
            this._def = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor.FIELD_ID_DEF);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Def":
                    setDef((schemarise.alfa.runtime.model.TableDef) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public BaseTable build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    1,
                    schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor.INSTANCE);

            BaseTable obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (BaseTable)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _def);
            else obj = new schemarise.alfa.runtime.model.BaseTable._BaseTableConcrete(_def);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.BaseTable",
                    new java.lang.String[] {"Def"},
                    new java.lang.Object[] {_def});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Default concrete class">

    final class _BaseTableConcrete extends _BaseTable__Base__ implements BaseTable {

        private _BaseTableConcrete() {
            super();
        }

        private _BaseTableConcrete(schemarise.alfa.runtime.model.TableDef _def) {
            super(_def);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _BaseTable__Base__ {
        public schemarise.alfa.runtime.model.TableDef _def;

        public _BaseTable__Base__() {}

        public _BaseTable__Base__(schemarise.alfa.runtime.model.TableDef _def) {
            this._def = _def;
        }

        public schemarise.alfa.runtime.model.TableDef getDef() {
            return _def;
        }

        public int hashCode() {
            return java.util.Objects.hash(_def);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.BaseTable",
                    new java.lang.String[] {"Def"},
                    new java.lang.Object[] {_def});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.BaseTable._BaseTableConcrete))
                return false;
            schemarise.alfa.runtime.model.BaseTable._BaseTableConcrete rhs =
                    (schemarise.alfa.runtime.model.BaseTable._BaseTableConcrete) o;
            return java.util.Objects.equals(_def, rhs._def);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Def":
                    return _def;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getDef().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class BaseTableDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.BaseTable";
        public static schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.BaseTable.BaseTableDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DEF = 0;
        public static final String FIELD_DEF = "Def";

        private schemarise.alfa.runtime.model.UdtDataType _defType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.TableDef")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.TableDef -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, schemarise.alfa.runtime.model.TableDef>
                _defConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.BaseTable._BaseTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _defConsumer =
                        (builder, supplier) -> {
                            builder.setDef(_defConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.TableDef -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.BaseTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplier =
                        (p, consumer) -> {
                            _defSupplierInner1.accept(p.getDef(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                BaseTable, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta defMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_defSupplier),
                        java.util.Optional.of(_defConsumer),
                        java.util.Optional.of(_defSupplierInner1),
                        java.util.Optional.of(_defConsumerInner1),
                        _defType,
                        FIELD_DEF,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public BaseTableBuilder builder() {
            return new schemarise.alfa.runtime.model.BaseTable._BaseTableBuilderImpl();
        }

        @Override
        public BaseTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.BaseTable._BaseTableBuilderImpl(cc);
        }

        public BaseTableDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<BaseTable>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DEF, defMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<BaseTable>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DEF:
                    return FIELD_DEF;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return new java.util.HashSet(
                    java.util.Arrays.asList("schemarise.alfa.runtime.model.ColBasedTable"));
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.BaseTable{Def:schemarise.alfa.runtime.model.TableDef[c59d9793];}
            schemarise.alfa.runtime.model.BaseTable{Def:schemarise.alfa.runtime.model.TableDef[7caf1935];}
            */
            return "6c15be82:ea579082";
        }
    }
    // </editor-fold>
}
