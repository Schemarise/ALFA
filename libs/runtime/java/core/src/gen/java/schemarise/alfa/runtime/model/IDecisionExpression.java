// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface IDecisionExpression extends com.schemarise.alfa.runtime.Trait {

    public static com.schemarise.alfa.runtime.TypeDescriptor descriptor =
            new schemarise.alfa.runtime.model.IDecisionExpression.IDecisionExpressionDescriptor();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static IDecisionExpressionBuilder builder() {
        return new schemarise.alfa.runtime.model.IDecisionExpression
                ._IDecisionExpressionBuilderImpl();
    }

    public static IDecisionExpressionBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.IDecisionExpression
                                    .IDecisionExpressionDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.IDecisionExpression
                    ._IDecisionExpressionBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface IDecisionExpressionBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {

        IDecisionExpression build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _IDecisionExpressionBuilderImpl extends _IDecisionExpression__Base__
            implements IDecisionExpressionBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _IDecisionExpressionBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _IDecisionExpressionBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(0);
            __missingFields.set(0, 0);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.IDecisionExpression.IDecisionExpressionDescriptor
                    .INSTANCE;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public IDecisionExpression build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    0,
                    schemarise.alfa.runtime.model.IDecisionExpression.IDecisionExpressionDescriptor
                            .INSTANCE);

            IDecisionExpression obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (IDecisionExpression)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor());
            else
                obj =
                        new schemarise.alfa.runtime.model.IDecisionExpression
                                ._IDecisionExpressionConcrete();

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.IDecisionExpression",
                    new java.lang.String[] {},
                    new java.lang.Object[] {});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Default concrete class">

    final class _IDecisionExpressionConcrete extends _IDecisionExpression__Base__
            implements IDecisionExpression {

        private _IDecisionExpressionConcrete() {
            super();
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _IDecisionExpression__Base__ {

        public _IDecisionExpression__Base__() {}

        public int hashCode() {
            return java.util.Objects.hash();
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.IDecisionExpression",
                    new java.lang.String[] {},
                    new java.lang.Object[] {});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.IDecisionExpression._IDecisionExpressionConcrete))
                return false;
            schemarise.alfa.runtime.model.IDecisionExpression._IDecisionExpressionConcrete rhs =
                    (schemarise.alfa.runtime.model.IDecisionExpression._IDecisionExpressionConcrete)
                            o;
            return true;
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.IDecisionExpression.IDecisionExpressionDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class IDecisionExpressionDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.IDecisionExpression";
        public static schemarise.alfa.runtime.model.IDecisionExpression
                        .IDecisionExpressionDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.IDecisionExpression
                                .IDecisionExpressionDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                IDecisionExpression, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public IDecisionExpressionBuilder builder() {
            return new schemarise.alfa.runtime.model.IDecisionExpression
                    ._IDecisionExpressionBuilderImpl();
        }

        @Override
        public IDecisionExpressionBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.IDecisionExpression
                    ._IDecisionExpressionBuilderImpl(cc);
        }

        public IDecisionExpressionDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<IDecisionExpression>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<IDecisionExpression>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return new java.util.HashSet(
                    java.util.Arrays.asList("schemarise.alfa.runtime.model.DecisionExpression"));
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.IDecisionExpression{}
            schemarise.alfa.runtime.model.IDecisionExpression{}
            */
            return "f8c0df1e:";
        }
    }
    // </editor-fold>
}
