// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface DecisionExpression__LiteralExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.ScalarType getType();

    java.lang.String getValue();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static DecisionExpression__LiteralExprBuilder builder() {
        return new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                ._DecisionExpression__LiteralExprBuilderImpl();
    }

    public static DecisionExpression__LiteralExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                    .DecisionExpression__LiteralExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                    ._DecisionExpression__LiteralExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface DecisionExpression__LiteralExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        DecisionExpression__LiteralExprBuilder setType(schemarise.alfa.runtime.model.ScalarType v);

        schemarise.alfa.runtime.model.ScalarType getType();

        DecisionExpression__LiteralExprBuilder setValue(java.lang.String v);

        java.lang.String getValue();

        DecisionExpression__LiteralExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _DecisionExpression__LiteralExprBuilderImpl
            extends _DecisionExpression__LiteralExpr__Base__
            implements DecisionExpression__LiteralExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _DecisionExpression__LiteralExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _DecisionExpression__LiteralExprBuilderImpl(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                    .DecisionExpression__LiteralExprDescriptor.INSTANCE;
        }

        public DecisionExpression__LiteralExprBuilder setType(
                schemarise.alfa.runtime.model.ScalarType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Type", v);
            this._type = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                            .DecisionExpression__LiteralExprDescriptor.FIELD_ID_TYPE);
            return this;
        }

        public DecisionExpression__LiteralExprBuilder setValue(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value", v);
            this._value = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                            .DecisionExpression__LiteralExprDescriptor.FIELD_ID_VALUE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Type":
                    setType((schemarise.alfa.runtime.model.ScalarType) val);
                    break;
                case "Value":
                    setValue((java.lang.String) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public DecisionExpression__LiteralExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                            .DecisionExpression__LiteralExprDescriptor.INSTANCE);

            DecisionExpression__LiteralExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (DecisionExpression__LiteralExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _type, _value);
            else
                obj =
                        new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                ._DecisionExpression__LiteralExprConcrete(_type, _value);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr",
                    new java.lang.String[] {"Type", "Value"},
                    new java.lang.Object[] {_type, _value});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _DecisionExpression__LiteralExprConcrete
            extends _DecisionExpression__LiteralExpr__Base__
            implements DecisionExpression__LiteralExpr {

        private _DecisionExpression__LiteralExprConcrete() {
            super();
        }

        private _DecisionExpression__LiteralExprConcrete(
                schemarise.alfa.runtime.model.ScalarType _type, java.lang.String _value) {
            super(_type, _value);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _DecisionExpression__LiteralExpr__Base__ {
        public schemarise.alfa.runtime.model.ScalarType _type;
        public java.lang.String _value;

        public _DecisionExpression__LiteralExpr__Base__() {}

        public _DecisionExpression__LiteralExpr__Base__(
                schemarise.alfa.runtime.model.ScalarType _type, java.lang.String _value) {
            this._type = _type;
            this._value = _value;
        }

        public schemarise.alfa.runtime.model.ScalarType getType() {
            return _type;
        }

        public java.lang.String getValue() {
            return _value;
        }

        public int hashCode() {
            return java.util.Objects.hash(_type, _value);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr",
                    new java.lang.String[] {"Type", "Value"},
                    new java.lang.Object[] {_type, _value});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                            ._DecisionExpression__LiteralExprConcrete)) return false;
            schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                            ._DecisionExpression__LiteralExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                            ._DecisionExpression__LiteralExprConcrete)
                                    o;
            return java.util.Objects.equals(_type, rhs._type)
                    && java.util.Objects.equals(_value, rhs._value);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                    .DecisionExpression__LiteralExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Type":
                    return _type;
                case "Value":
                    return _value;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class DecisionExpression__LiteralExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr";
        public static schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                        .DecisionExpression__LiteralExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                .DecisionExpression__LiteralExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TYPE = 0;
        public static final String FIELD_TYPE = "Type";

        public static final short FIELD_ID_VALUE = 1;
        public static final String FIELD_VALUE = "Value";

        private schemarise.alfa.runtime.model.UdtDataType _typeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.ScalarType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _valueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.ScalarType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.ScalarType>
                _typeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _typeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                ._DecisionExpression__LiteralExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeConsumer =
                        (builder, supplier) -> {
                            builder.setType(_typeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _valueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _valueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                                ._DecisionExpression__LiteralExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _valueConsumer =
                        (builder, supplier) -> {
                            builder.setValue(_valueConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.ScalarType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ScalarType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _typeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplier =
                        (p, consumer) -> {
                            _typeSupplierInner1.accept(p.getType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _valueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _valueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueSupplier =
                        (p, consumer) -> {
                            _valueSupplierInner1.accept(p.getValue(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                DecisionExpression__LiteralExpr,
                                com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta typeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeSupplier),
                        java.util.Optional.of(_typeConsumer),
                        java.util.Optional.of(_typeSupplierInner1),
                        java.util.Optional.of(_typeConsumerInner1),
                        _typeType,
                        FIELD_TYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta valueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_valueSupplier),
                        java.util.Optional.of(_valueConsumer),
                        java.util.Optional.of(_valueSupplierInner1),
                        java.util.Optional.of(_valueConsumerInner1),
                        _valueType,
                        FIELD_VALUE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public DecisionExpression__LiteralExprBuilder builder() {
            return new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                    ._DecisionExpression__LiteralExprBuilderImpl();
        }

        @Override
        public DecisionExpression__LiteralExprBuilder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr
                    ._DecisionExpression__LiteralExprBuilderImpl(cc);
        }

        public DecisionExpression__LiteralExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__LiteralExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TYPE, typeMeta);
                                        put(FIELD_VALUE, valueMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<DecisionExpression__LiteralExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TYPE:
                    return FIELD_TYPE;
                case FIELD_ID_VALUE:
                    return FIELD_VALUE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr{Type:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;}
            schemarise.alfa.runtime.model.DecisionExpression__LiteralExpr{Type:schemarise.alfa.runtime.model.ScalarType[a20ec375];Value:string;}
            */
            return "ddd53492:";
        }
    }
    // </editor-fold>

}
