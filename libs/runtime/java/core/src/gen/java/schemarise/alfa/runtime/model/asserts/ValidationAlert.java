// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.asserts;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ValidationAlert extends com.schemarise.alfa.runtime.Record {

    /** Error or Warning */
    schemarise.alfa.runtime.model.asserts.SeverityType getSeverity();

    java.time.LocalDateTime getTimestamp();

    java.lang.String getMessage();

    /** ALFA type being processed */
    java.util.Optional<java.lang.String> getTypeName();

    /** An identification of the validated object */
    java.util.Optional<java.lang.String> getIdentification();

    /** Assert that caused alert */
    java.util.Optional<java.lang.String> getAssertName();

    /** Path to field */
    java.util.Optional<java.lang.String> getFieldName();

    java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
            getViolatedConstraint();

    java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
            getDataQualityCategory();

    /** Info regarding the source of the data, such as line number */
    java.util.Optional<java.lang.String> getSourceInfo();

    /** Details such a stack trace ( should be compressed<string>? ) */
    java.util.Optional<java.lang.String> getExceptionDetails();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ValidationAlertBuilder builder() {
        return new schemarise.alfa.runtime.model.asserts.ValidationAlert
                ._ValidationAlertBuilderImpl();
    }

    public static ValidationAlertBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.asserts.ValidationAlert
                                    .ValidationAlertDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.asserts.ValidationAlert
                    ._ValidationAlertBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ValidationAlertBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        ValidationAlertBuilder setSeverity(schemarise.alfa.runtime.model.asserts.SeverityType v);

        /** Error or Warning */
        schemarise.alfa.runtime.model.asserts.SeverityType getSeverity();

        ValidationAlertBuilder setTimestamp(java.time.LocalDateTime v);

        java.time.LocalDateTime getTimestamp();

        ValidationAlertBuilder setMessage(java.lang.String v);

        java.lang.String getMessage();

        ValidationAlertBuilder setTypeName(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setTypeName(java.lang.String v);

        /** ALFA type being processed */
        java.util.Optional<java.lang.String> getTypeName();

        ValidationAlertBuilder setIdentification(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setIdentification(java.lang.String v);

        /** An identification of the validated object */
        java.util.Optional<java.lang.String> getIdentification();

        ValidationAlertBuilder setAssertName(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setAssertName(java.lang.String v);

        /** Assert that caused alert */
        java.util.Optional<java.lang.String> getAssertName();

        ValidationAlertBuilder setFieldName(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setFieldName(java.lang.String v);

        /** Path to field */
        java.util.Optional<java.lang.String> getFieldName();

        ValidationAlertBuilder setViolatedConstraint(
                java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType> v);

        ValidationAlertBuilder setViolatedConstraint(
                schemarise.alfa.runtime.model.asserts.ConstraintType v);

        java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
                getViolatedConstraint();

        ValidationAlertBuilder setDataQualityCategory(
                java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType> v);

        ValidationAlertBuilder setDataQualityCategory(
                schemarise.alfa.runtime.model.asserts.DataQualityType v);

        java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
                getDataQualityCategory();

        ValidationAlertBuilder setSourceInfo(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setSourceInfo(java.lang.String v);

        /** Info regarding the source of the data, such as line number */
        java.util.Optional<java.lang.String> getSourceInfo();

        ValidationAlertBuilder setExceptionDetails(java.util.Optional<java.lang.String> v);

        ValidationAlertBuilder setExceptionDetails(java.lang.String v);

        /** Details such a stack trace ( should be compressed<string>? ) */
        java.util.Optional<java.lang.String> getExceptionDetails();

        ValidationAlert build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ValidationAlertBuilderImpl extends _ValidationAlert__Base__
            implements ValidationAlertBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ValidationAlertBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ValidationAlertBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(11);
            __missingFields.set(0, 11);
            setTypeName(java.util.Optional.empty());
            setIdentification(java.util.Optional.empty());
            setAssertName(java.util.Optional.empty());
            setFieldName(java.util.Optional.empty());
            setViolatedConstraint(java.util.Optional.empty());
            setDataQualityCategory(java.util.Optional.empty());
            setSourceInfo(java.util.Optional.empty());
            setExceptionDetails(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                    .INSTANCE;
        }

        /** Error or Warning */
        public ValidationAlertBuilder setSeverity(
                schemarise.alfa.runtime.model.asserts.SeverityType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Severity", v);
            this._severity = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_SEVERITY);
            return this;
        }

        public ValidationAlertBuilder setTimestamp(java.time.LocalDateTime v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Timestamp", v);
            this._timestamp = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_TIMESTAMP);
            return this;
        }

        public ValidationAlertBuilder setMessage(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message", v);
            this._message = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_MESSAGE);
            return this;
        }

        /** ALFA type being processed */
        public ValidationAlertBuilder setTypeName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeName", v);
            this._typeName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_TYPENAME);
            return this;
        }

        /** ALFA type being processed */
        public ValidationAlertBuilder setTypeName(java.lang.String v) {
            this._typeName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_TYPENAME);
            return this;
        }

        /** An identification of the validated object */
        public ValidationAlertBuilder setIdentification(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Identification", v);
            this._identification = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_IDENTIFICATION);
            return this;
        }

        /** An identification of the validated object */
        public ValidationAlertBuilder setIdentification(java.lang.String v) {
            this._identification = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_IDENTIFICATION);
            return this;
        }

        /** Assert that caused alert */
        public ValidationAlertBuilder setAssertName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AssertName", v);
            this._assertName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_ASSERTNAME);
            return this;
        }

        /** Assert that caused alert */
        public ValidationAlertBuilder setAssertName(java.lang.String v) {
            this._assertName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_ASSERTNAME);
            return this;
        }

        /** Path to field */
        public ValidationAlertBuilder setFieldName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FieldName", v);
            this._fieldName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_FIELDNAME);
            return this;
        }

        /** Path to field */
        public ValidationAlertBuilder setFieldName(java.lang.String v) {
            this._fieldName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_FIELDNAME);
            return this;
        }

        public ValidationAlertBuilder setViolatedConstraint(
                java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ViolatedConstraint", v);
            this._violatedConstraint = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_VIOLATEDCONSTRAINT);
            return this;
        }

        public ValidationAlertBuilder setViolatedConstraint(
                schemarise.alfa.runtime.model.asserts.ConstraintType v) {
            this._violatedConstraint = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_VIOLATEDCONSTRAINT);
            return this;
        }

        public ValidationAlertBuilder setDataQualityCategory(
                java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DataQualityCategory", v);
            this._dataQualityCategory = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_DATAQUALITYCATEGORY);
            return this;
        }

        public ValidationAlertBuilder setDataQualityCategory(
                schemarise.alfa.runtime.model.asserts.DataQualityType v) {
            this._dataQualityCategory = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_DATAQUALITYCATEGORY);
            return this;
        }

        /** Info regarding the source of the data, such as line number */
        public ValidationAlertBuilder setSourceInfo(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceInfo", v);
            this._sourceInfo = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_SOURCEINFO);
            return this;
        }

        /** Info regarding the source of the data, such as line number */
        public ValidationAlertBuilder setSourceInfo(java.lang.String v) {
            this._sourceInfo = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_SOURCEINFO);
            return this;
        }

        /** Details such a stack trace ( should be compressed<string>? ) */
        public ValidationAlertBuilder setExceptionDetails(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExceptionDetails", v);
            this._exceptionDetails = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_EXCEPTIONDETAILS);
            return this;
        }

        /** Details such a stack trace ( should be compressed<string>? ) */
        public ValidationAlertBuilder setExceptionDetails(java.lang.String v) {
            this._exceptionDetails = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .FIELD_ID_EXCEPTIONDETAILS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Severity":
                    setSeverity((schemarise.alfa.runtime.model.asserts.SeverityType) val);
                    break;
                case "Timestamp":
                    setTimestamp((java.time.LocalDateTime) val);
                    break;
                case "Message":
                    setMessage((java.lang.String) val);
                    break;
                case "TypeName":
                    setTypeName((java.util.Optional<java.lang.String>) val);
                    break;
                case "Identification":
                    setIdentification((java.util.Optional<java.lang.String>) val);
                    break;
                case "AssertName":
                    setAssertName((java.util.Optional<java.lang.String>) val);
                    break;
                case "FieldName":
                    setFieldName((java.util.Optional<java.lang.String>) val);
                    break;
                case "ViolatedConstraint":
                    setViolatedConstraint(
                            (java.util.Optional<
                                            schemarise.alfa.runtime.model.asserts.ConstraintType>)
                                    val);
                    break;
                case "DataQualityCategory":
                    setDataQualityCategory(
                            (java.util.Optional<
                                            schemarise.alfa.runtime.model.asserts.DataQualityType>)
                                    val);
                    break;
                case "SourceInfo":
                    setSourceInfo((java.util.Optional<java.lang.String>) val);
                    break;
                case "ExceptionDetails":
                    setExceptionDetails((java.util.Optional<java.lang.String>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ValidationAlert build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    11,
                    schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                            .INSTANCE);

            ValidationAlert obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ValidationAlert)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _severity,
                                                _timestamp,
                                                _message,
                                                _typeName,
                                                _identification,
                                                _assertName,
                                                _fieldName,
                                                _violatedConstraint,
                                                _dataQualityCategory,
                                                _sourceInfo,
                                                _exceptionDetails);
            else
                obj =
                        new schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertConcrete(
                                _severity,
                                _timestamp,
                                _message,
                                _typeName,
                                _identification,
                                _assertName,
                                _fieldName,
                                _violatedConstraint,
                                _dataQualityCategory,
                                _sourceInfo,
                                _exceptionDetails);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationAlert",
                    new java.lang.String[] {
                        "Severity",
                        "Timestamp",
                        "Message",
                        "TypeName",
                        "Identification",
                        "AssertName",
                        "FieldName",
                        "ViolatedConstraint",
                        "DataQualityCategory",
                        "SourceInfo",
                        "ExceptionDetails"
                    },
                    new java.lang.Object[] {
                        _severity,
                        _timestamp,
                        _message,
                        _typeName,
                        _identification,
                        _assertName,
                        _fieldName,
                        _violatedConstraint,
                        _dataQualityCategory,
                        _sourceInfo,
                        _exceptionDetails
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ValidationAlertConcrete extends _ValidationAlert__Base__
            implements ValidationAlert {

        private _ValidationAlertConcrete() {
            super();
        }

        private _ValidationAlertConcrete(
                schemarise.alfa.runtime.model.asserts.SeverityType _severity,
                java.time.LocalDateTime _timestamp,
                java.lang.String _message,
                java.util.Optional<java.lang.String> _typeName,
                java.util.Optional<java.lang.String> _identification,
                java.util.Optional<java.lang.String> _assertName,
                java.util.Optional<java.lang.String> _fieldName,
                java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
                        _violatedConstraint,
                java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
                        _dataQualityCategory,
                java.util.Optional<java.lang.String> _sourceInfo,
                java.util.Optional<java.lang.String> _exceptionDetails) {
            super(
                    _severity,
                    _timestamp,
                    _message,
                    _typeName,
                    _identification,
                    _assertName,
                    _fieldName,
                    _violatedConstraint,
                    _dataQualityCategory,
                    _sourceInfo,
                    _exceptionDetails);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ValidationAlert__Base__ {
        public schemarise.alfa.runtime.model.asserts.SeverityType _severity;
        public java.time.LocalDateTime _timestamp;
        public java.lang.String _message;
        public java.util.Optional<java.lang.String> _typeName;
        public java.util.Optional<java.lang.String> _identification;
        public java.util.Optional<java.lang.String> _assertName;
        public java.util.Optional<java.lang.String> _fieldName;
        public java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
                _violatedConstraint;
        public java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
                _dataQualityCategory;
        public java.util.Optional<java.lang.String> _sourceInfo;
        public java.util.Optional<java.lang.String> _exceptionDetails;

        public _ValidationAlert__Base__() {}

        public _ValidationAlert__Base__(
                schemarise.alfa.runtime.model.asserts.SeverityType _severity,
                java.time.LocalDateTime _timestamp,
                java.lang.String _message,
                java.util.Optional<java.lang.String> _typeName,
                java.util.Optional<java.lang.String> _identification,
                java.util.Optional<java.lang.String> _assertName,
                java.util.Optional<java.lang.String> _fieldName,
                java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
                        _violatedConstraint,
                java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
                        _dataQualityCategory,
                java.util.Optional<java.lang.String> _sourceInfo,
                java.util.Optional<java.lang.String> _exceptionDetails) {
            this._severity = _severity;
            this._timestamp = _timestamp;
            this._message = _message;
            this._typeName = _typeName;
            this._identification = _identification;
            this._assertName = _assertName;
            this._fieldName = _fieldName;
            this._violatedConstraint = _violatedConstraint;
            this._dataQualityCategory = _dataQualityCategory;
            this._sourceInfo = _sourceInfo;
            this._exceptionDetails = _exceptionDetails;
        }

        public schemarise.alfa.runtime.model.asserts.SeverityType getSeverity() {
            return _severity;
        }

        public java.time.LocalDateTime getTimestamp() {
            return _timestamp;
        }

        public java.lang.String getMessage() {
            return _message;
        }

        public java.util.Optional<java.lang.String> getTypeName() {
            return _typeName;
        }

        public java.util.Optional<java.lang.String> getIdentification() {
            return _identification;
        }

        public java.util.Optional<java.lang.String> getAssertName() {
            return _assertName;
        }

        public java.util.Optional<java.lang.String> getFieldName() {
            return _fieldName;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>
                getViolatedConstraint() {
            return _violatedConstraint;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>
                getDataQualityCategory() {
            return _dataQualityCategory;
        }

        public java.util.Optional<java.lang.String> getSourceInfo() {
            return _sourceInfo;
        }

        public java.util.Optional<java.lang.String> getExceptionDetails() {
            return _exceptionDetails;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _severity,
                    _timestamp,
                    _message,
                    _typeName,
                    _identification,
                    _assertName,
                    _fieldName,
                    _violatedConstraint,
                    _dataQualityCategory,
                    _sourceInfo,
                    _exceptionDetails);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationAlert",
                    new java.lang.String[] {
                        "Severity",
                        "Timestamp",
                        "Message",
                        "TypeName",
                        "Identification",
                        "AssertName",
                        "FieldName",
                        "ViolatedConstraint",
                        "DataQualityCategory",
                        "SourceInfo",
                        "ExceptionDetails"
                    },
                    new java.lang.Object[] {
                        _severity,
                        _timestamp,
                        _message,
                        _typeName,
                        _identification,
                        _assertName,
                        _fieldName,
                        _violatedConstraint,
                        _dataQualityCategory,
                        _sourceInfo,
                        _exceptionDetails
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.asserts.ValidationAlert._ValidationAlertConcrete))
                return false;
            schemarise.alfa.runtime.model.asserts.ValidationAlert._ValidationAlertConcrete rhs =
                    (schemarise.alfa.runtime.model.asserts.ValidationAlert._ValidationAlertConcrete)
                            o;
            return java.util.Objects.equals(_severity, rhs._severity)
                    && java.util.Objects.equals(_timestamp, rhs._timestamp)
                    && java.util.Objects.equals(_message, rhs._message)
                    && java.util.Objects.equals(_typeName, rhs._typeName)
                    && java.util.Objects.equals(_identification, rhs._identification)
                    && java.util.Objects.equals(_assertName, rhs._assertName)
                    && java.util.Objects.equals(_fieldName, rhs._fieldName)
                    && java.util.Objects.equals(_violatedConstraint, rhs._violatedConstraint)
                    && java.util.Objects.equals(_dataQualityCategory, rhs._dataQualityCategory)
                    && java.util.Objects.equals(_sourceInfo, rhs._sourceInfo)
                    && java.util.Objects.equals(_exceptionDetails, rhs._exceptionDetails);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationAlert.ValidationAlertDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Severity":
                    return _severity;
                case "Timestamp":
                    return _timestamp;
                case "Message":
                    return _message;
                case "TypeName":
                    return _typeName;
                case "Identification":
                    return _identification;
                case "AssertName":
                    return _assertName;
                case "FieldName":
                    return _fieldName;
                case "ViolatedConstraint":
                    return _violatedConstraint;
                case "DataQualityCategory":
                    return _dataQualityCategory;
                case "SourceInfo":
                    return _sourceInfo;
                case "ExceptionDetails":
                    return _exceptionDetails;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getSeverity().validate(__builderConfig);

            if (getViolatedConstraint().isPresent()) {
                getViolatedConstraint().get().validate(__builderConfig);
            }
            if (getDataQualityCategory().isPresent()) {
                getDataQualityCategory().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ValidationAlertDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.asserts.ValidationAlert";
        public static schemarise.alfa.runtime.model.asserts.ValidationAlert
                        .ValidationAlertDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.asserts.ValidationAlert
                                .ValidationAlertDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_SEVERITY = 0;
        public static final String FIELD_SEVERITY = "Severity";

        public static final short FIELD_ID_TIMESTAMP = 1;
        public static final String FIELD_TIMESTAMP = "Timestamp";

        public static final short FIELD_ID_MESSAGE = 2;
        public static final String FIELD_MESSAGE = "Message";

        public static final short FIELD_ID_TYPENAME = 3;
        public static final String FIELD_TYPENAME = "TypeName";

        public static final short FIELD_ID_IDENTIFICATION = 4;
        public static final String FIELD_IDENTIFICATION = "Identification";

        public static final short FIELD_ID_ASSERTNAME = 5;
        public static final String FIELD_ASSERTNAME = "AssertName";

        public static final short FIELD_ID_FIELDNAME = 6;
        public static final String FIELD_FIELDNAME = "FieldName";

        public static final short FIELD_ID_VIOLATEDCONSTRAINT = 7;
        public static final String FIELD_VIOLATEDCONSTRAINT = "ViolatedConstraint";

        public static final short FIELD_ID_DATAQUALITYCATEGORY = 8;
        public static final String FIELD_DATAQUALITYCATEGORY = "DataQualityCategory";

        public static final short FIELD_ID_SOURCEINFO = 9;
        public static final String FIELD_SOURCEINFO = "SourceInfo";

        public static final short FIELD_ID_EXCEPTIONDETAILS = 10;
        public static final String FIELD_EXCEPTIONDETAILS = "ExceptionDetails";

        private schemarise.alfa.runtime.model.UdtDataType _severityType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.asserts.SeverityType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _timestampType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.datetimeType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _messageType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _identificationType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _assertNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _fieldNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _violatedConstraintType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.asserts.ConstraintType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _dataQualityCategoryType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.asserts.DataQualityType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceInfoType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _exceptionDetailsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.asserts.SeverityType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.asserts.SeverityType>
                _severityConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _severityType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _severityConsumer =
                        (builder, supplier) -> {
                            builder.setSeverity(_severityConsumerInner1.apply(supplier));
                        };
        /* -- Consumer datetime -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.LocalDateTime>
                _timestampConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.datetimeValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timestampType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _timestampConsumer =
                        (builder, supplier) -> {
                            builder.setTimestamp(_timestampConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _messageConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _messageType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _messageConsumer =
                        (builder, supplier) -> {
                            builder.setMessage(_messageConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeNameType),
                                    _typeNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeName(_typeNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _identificationConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _identificationConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _identificationType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _identificationType),
                                    _identificationConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _identificationConsumer =
                        (builder, supplier) -> {
                            builder.setIdentification(
                                    _identificationConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _assertNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _assertNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _assertNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _assertNameType),
                                    _assertNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _assertNameConsumer =
                        (builder, supplier) -> {
                            builder.setAssertName(_assertNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _fieldNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _fieldNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _fieldNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _fieldNameType),
                                    _fieldNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fieldNameConsumer =
                        (builder, supplier) -> {
                            builder.setFieldName(_fieldNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.asserts.ConstraintType ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>>
                _violatedConstraintConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.asserts.ConstraintType>
                                    _violatedConstraintConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _violatedConstraintType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _violatedConstraintType),
                                    _violatedConstraintConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _violatedConstraintConsumer =
                        (builder, supplier) -> {
                            builder.setViolatedConstraint(
                                    _violatedConstraintConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.asserts.DataQualityType ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>>
                _dataQualityCategoryConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.asserts.DataQualityType>
                                    _dataQualityCategoryConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataQualityCategoryType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _dataQualityCategoryType),
                                    _dataQualityCategoryConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dataQualityCategoryConsumer =
                        (builder, supplier) -> {
                            builder.setDataQualityCategory(
                                    _dataQualityCategoryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceInfoConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceInfoConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceInfoType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceInfoType),
                                    _sourceInfoConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceInfoConsumer =
                        (builder, supplier) -> {
                            builder.setSourceInfo(_sourceInfoConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _exceptionDetailsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _exceptionDetailsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _exceptionDetailsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _exceptionDetailsType),
                                    _exceptionDetailsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert
                                ._ValidationAlertBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exceptionDetailsConsumer =
                        (builder, supplier) -> {
                            builder.setExceptionDetails(
                                    _exceptionDetailsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.asserts.SeverityType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.SeverityType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _severitySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _severityType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _severitySupplier =
                        (p, consumer) -> {
                            _severitySupplierInner1.accept(p.getSeverity(), consumer);
                        };
        /* -- Supplier datetime -- */
        java.util.function.BiConsumer<
                        java.time.LocalDateTime, com.schemarise.alfa.runtime.DataConsumer>
                _timestampSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timestampType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _timestampSupplier =
                        (p, consumer) -> {
                            _timestampSupplierInner1.accept(p.getTimestamp(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _messageType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplier =
                        (p, consumer) -> {
                            _messageSupplierInner1.accept(p.getMessage(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeNameType),
                                    pInner1,
                                    _typeNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeNameSupplier =
                        (p, consumer) -> {
                            _typeNameSupplierInner1.accept(p.getTypeName(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identificationSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _identificationSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _identificationType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _identificationType),
                                    pInner1,
                                    _identificationSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _identificationSupplier =
                        (p, consumer) -> {
                            _identificationSupplierInner1.accept(p.getIdentification(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assertNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _assertNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _assertNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _assertNameType),
                                    pInner1,
                                    _assertNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assertNameSupplier =
                        (p, consumer) -> {
                            _assertNameSupplierInner1.accept(p.getAssertName(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _fieldNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _fieldNameType),
                                    pInner1,
                                    _fieldNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldNameSupplier =
                        (p, consumer) -> {
                            _fieldNameSupplierInner1.accept(p.getFieldName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.asserts.ConstraintType ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.asserts.ConstraintType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _violatedConstraintSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.asserts.ConstraintType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _violatedConstraintSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _violatedConstraintType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _violatedConstraintType),
                                    pInner1,
                                    _violatedConstraintSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _violatedConstraintSupplier =
                        (p, consumer) -> {
                            _violatedConstraintSupplierInner1.accept(
                                    p.getViolatedConstraint(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.asserts.DataQualityType ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.asserts.DataQualityType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataQualityCategorySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.asserts.DataQualityType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _dataQualityCategorySupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataQualityCategoryType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _dataQualityCategoryType),
                                    pInner1,
                                    _dataQualityCategorySupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataQualityCategorySupplier =
                        (p, consumer) -> {
                            _dataQualityCategorySupplierInner1.accept(
                                    p.getDataQualityCategory(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceInfoSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceInfoSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceInfoType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceInfoType),
                                    pInner1,
                                    _sourceInfoSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceInfoSupplier =
                        (p, consumer) -> {
                            _sourceInfoSupplierInner1.accept(p.getSourceInfo(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exceptionDetailsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _exceptionDetailsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _exceptionDetailsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _exceptionDetailsType),
                                    pInner1,
                                    _exceptionDetailsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationAlert,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exceptionDetailsSupplier =
                        (p, consumer) -> {
                            _exceptionDetailsSupplierInner1.accept(
                                    p.getExceptionDetails(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ValidationAlert, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta severityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_severitySupplier),
                        java.util.Optional.of(_severityConsumer),
                        java.util.Optional.of(_severitySupplierInner1),
                        java.util.Optional.of(_severityConsumerInner1),
                        _severityType,
                        FIELD_SEVERITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta timestampMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_timestampSupplier),
                        java.util.Optional.of(_timestampConsumer),
                        java.util.Optional.of(_timestampSupplierInner1),
                        java.util.Optional.of(_timestampConsumerInner1),
                        _timestampType,
                        FIELD_TIMESTAMP,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta messageMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_messageSupplier),
                        java.util.Optional.of(_messageConsumer),
                        java.util.Optional.of(_messageSupplierInner1),
                        java.util.Optional.of(_messageConsumerInner1),
                        _messageType,
                        FIELD_MESSAGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeNameSupplier),
                        java.util.Optional.of(_typeNameConsumer),
                        java.util.Optional.of(_typeNameSupplierInner1),
                        java.util.Optional.of(_typeNameConsumerInner1),
                        _typeNameType,
                        FIELD_TYPENAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta identificationMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_identificationSupplier),
                        java.util.Optional.of(_identificationConsumer),
                        java.util.Optional.of(_identificationSupplierInner1),
                        java.util.Optional.of(_identificationConsumerInner1),
                        _identificationType,
                        FIELD_IDENTIFICATION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta assertNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_assertNameSupplier),
                        java.util.Optional.of(_assertNameConsumer),
                        java.util.Optional.of(_assertNameSupplierInner1),
                        java.util.Optional.of(_assertNameConsumerInner1),
                        _assertNameType,
                        FIELD_ASSERTNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fieldNameSupplier),
                        java.util.Optional.of(_fieldNameConsumer),
                        java.util.Optional.of(_fieldNameSupplierInner1),
                        java.util.Optional.of(_fieldNameConsumerInner1),
                        _fieldNameType,
                        FIELD_FIELDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta violatedConstraintMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_violatedConstraintSupplier),
                        java.util.Optional.of(_violatedConstraintConsumer),
                        java.util.Optional.of(_violatedConstraintSupplierInner1),
                        java.util.Optional.of(_violatedConstraintConsumerInner1),
                        _violatedConstraintType,
                        FIELD_VIOLATEDCONSTRAINT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataQualityCategoryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dataQualityCategorySupplier),
                        java.util.Optional.of(_dataQualityCategoryConsumer),
                        java.util.Optional.of(_dataQualityCategorySupplierInner1),
                        java.util.Optional.of(_dataQualityCategoryConsumerInner1),
                        _dataQualityCategoryType,
                        FIELD_DATAQUALITYCATEGORY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceInfoMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceInfoSupplier),
                        java.util.Optional.of(_sourceInfoConsumer),
                        java.util.Optional.of(_sourceInfoSupplierInner1),
                        java.util.Optional.of(_sourceInfoConsumerInner1),
                        _sourceInfoType,
                        FIELD_SOURCEINFO,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta exceptionDetailsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exceptionDetailsSupplier),
                        java.util.Optional.of(_exceptionDetailsConsumer),
                        java.util.Optional.of(_exceptionDetailsSupplierInner1),
                        java.util.Optional.of(_exceptionDetailsConsumerInner1),
                        _exceptionDetailsType,
                        FIELD_EXCEPTIONDETAILS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ValidationAlertBuilder builder() {
            return new schemarise.alfa.runtime.model.asserts.ValidationAlert
                    ._ValidationAlertBuilderImpl();
        }

        @Override
        public ValidationAlertBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.asserts.ValidationAlert
                    ._ValidationAlertBuilderImpl(cc);
        }

        public ValidationAlertDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationAlert>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_SEVERITY, severityMeta);
                                        put(FIELD_TIMESTAMP, timestampMeta);
                                        put(FIELD_MESSAGE, messageMeta);
                                        put(FIELD_TYPENAME, typeNameMeta);
                                        put(FIELD_IDENTIFICATION, identificationMeta);
                                        put(FIELD_ASSERTNAME, assertNameMeta);
                                        put(FIELD_FIELDNAME, fieldNameMeta);
                                        put(FIELD_VIOLATEDCONSTRAINT, violatedConstraintMeta);
                                        put(FIELD_DATAQUALITYCATEGORY, dataQualityCategoryMeta);
                                        put(FIELD_SOURCEINFO, sourceInfoMeta);
                                        put(FIELD_EXCEPTIONDETAILS, exceptionDetailsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationAlert>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_SEVERITY:
                    return FIELD_SEVERITY;
                case FIELD_ID_TIMESTAMP:
                    return FIELD_TIMESTAMP;
                case FIELD_ID_MESSAGE:
                    return FIELD_MESSAGE;
                case FIELD_ID_TYPENAME:
                    return FIELD_TYPENAME;
                case FIELD_ID_IDENTIFICATION:
                    return FIELD_IDENTIFICATION;
                case FIELD_ID_ASSERTNAME:
                    return FIELD_ASSERTNAME;
                case FIELD_ID_FIELDNAME:
                    return FIELD_FIELDNAME;
                case FIELD_ID_VIOLATEDCONSTRAINT:
                    return FIELD_VIOLATEDCONSTRAINT;
                case FIELD_ID_DATAQUALITYCATEGORY:
                    return FIELD_DATAQUALITYCATEGORY;
                case FIELD_ID_SOURCEINFO:
                    return FIELD_SOURCEINFO;
                case FIELD_ID_EXCEPTIONDETAILS:
                    return FIELD_EXCEPTIONDETAILS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.asserts.ValidationAlert{AssertName:optional<string;>;DataQualityCategory:optional<schemarise.alfa.runtime.model.asserts.DataQualityType[2812750d];>;ExceptionDetails:optional<string;>;FieldName:optional<string;>;Identification:optional<string;>;Message:string;Severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];SourceInfo:optional<string;>;Timestamp:datetime;TypeName:optional<string;>;ViolatedConstraint:optional<schemarise.alfa.runtime.model.asserts.ConstraintType[bedbd588];>;}
            schemarise.alfa.runtime.model.asserts.ValidationAlert{Message:string;Severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];Timestamp:datetime;}
            */
            return "38eb9579:8f7002fe";
        }
    }
    // </editor-fold>

}
