// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.annotation.db;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public enum StorageMode implements com.schemarise.alfa.runtime.Enum {
    /** only fully flattened */
    Relational("Relational", java.util.Optional.empty()),
    /** modern relations with struct columns, arrays etc */
    Composite("Composite", java.util.Optional.empty()),
    /** store as json */
    JSON("JSON", java.util.Optional.empty()),
    /** json binary store */
    JSONB("JSONB", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, StorageMode> mappings;

    StorageMode(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static StorageMode fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, StorageMode> m = new java.util.HashMap<>();
            for (StorageMode c : StorageMode.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.annotation.db.StorageMode.StorageModeDescriptor
                .INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class StorageModeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.annotation.db.StorageMode";
        public static schemarise.alfa.runtime.model.annotation.db.StorageMode.StorageModeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.annotation.db.StorageMode
                                .StorageModeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_RELATIONAL = 0;
        public static final String FIELD_RELATIONAL = "Relational";

        public static final short FIELD_ID_COMPOSITE = 1;
        public static final String FIELD_COMPOSITE = "Composite";

        public static final short FIELD_ID_JSON = 2;
        public static final String FIELD_JSON = "JSON";

        public static final short FIELD_ID_JSONB = 3;
        public static final String FIELD_JSONB = "JSONB";

        private schemarise.alfa.runtime.model.ScalarDataType _relationalType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _compositeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _jSONType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _jSONBType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<StorageMode, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta relationalMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _relationalType,
                        FIELD_RELATIONAL,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta compositeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _compositeType,
                        FIELD_COMPOSITE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta jSONMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _jSONType,
                        FIELD_JSON,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta jSONBMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _jSONBType,
                        FIELD_JSONB,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public StorageModeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<StorageMode>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_RELATIONAL, relationalMeta);
                                        put(FIELD_COMPOSITE, compositeMeta);
                                        put(FIELD_JSON, jSONMeta);
                                        put(FIELD_JSONB, jSONBMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<StorageMode>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_RELATIONAL:
                    return FIELD_RELATIONAL;
                case FIELD_ID_COMPOSITE:
                    return FIELD_COMPOSITE;
                case FIELD_ID_JSON:
                    return FIELD_JSON;
                case FIELD_ID_JSONB:
                    return FIELD_JSONB;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.annotation.db.StorageMode{Relational ## only fully flattened,Composite ## modern relations with struct columns, arrays etc,JSON ## store as json,JSONB ## json binary store}
            schemarise.alfa.runtime.model.annotation.db.StorageMode{Relational ## only fully flattened,Composite ## modern relations with struct columns, arrays etc,JSON ## store as json,JSONB ## json binary store}
            */
            return "691f6b3c:";
        }
    }
    // </editor-fold>
}
