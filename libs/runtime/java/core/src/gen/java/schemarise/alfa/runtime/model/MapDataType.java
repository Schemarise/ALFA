// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface MapDataType
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IVectorDataType {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    java.util.Optional<java.lang.Integer> getSizeMin();

    java.util.Optional<java.lang.Integer> getSizeMax();

    schemarise.alfa.runtime.model.IDataType getKeyType();

    schemarise.alfa.runtime.model.IDataType getValueType();

    java.util.Optional<java.lang.String> getKeyName();

    java.util.Optional<java.lang.String> getValueName();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static MapDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl();
    }

    public static MapDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface MapDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IVectorDataType.IVectorDataTypeBuilder {
        MapDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        MapDataTypeBuilder setExtendedAttribs(java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        MapDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        MapDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        MapDataTypeBuilder setSizeMin(java.util.Optional<java.lang.Integer> v);

        MapDataTypeBuilder setSizeMin(int v);

        java.util.Optional<java.lang.Integer> getSizeMin();

        MapDataTypeBuilder setSizeMax(java.util.Optional<java.lang.Integer> v);

        MapDataTypeBuilder setSizeMax(int v);

        java.util.Optional<java.lang.Integer> getSizeMax();

        MapDataTypeBuilder setKeyType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getKeyType();

        MapDataTypeBuilder setValueType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getValueType();

        MapDataTypeBuilder setKeyName(java.util.Optional<java.lang.String> v);

        MapDataTypeBuilder setKeyName(java.lang.String v);

        java.util.Optional<java.lang.String> getKeyName();

        MapDataTypeBuilder setValueName(java.util.Optional<java.lang.String> v);

        MapDataTypeBuilder setValueName(java.lang.String v);

        java.util.Optional<java.lang.String> getValueName();

        MapDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _MapDataTypeBuilderImpl extends _MapDataType__Base__ implements MapDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _MapDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _MapDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(8);
            __missingFields.set(0, 8);
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
            setSizeMin(java.util.Optional.empty());
            setSizeMax(java.util.Optional.empty());
            setKeyName(java.util.Optional.empty());
            setValueName(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor.INSTANCE;
        }

        public MapDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public MapDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public MapDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public MapDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public MapDataTypeBuilder setSizeMin(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SizeMin", v);
            this._sizeMin = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_SIZEMIN);
            return this;
        }

        public MapDataTypeBuilder setSizeMin(int v) {
            this._sizeMin = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_SIZEMIN);
            return this;
        }

        public MapDataTypeBuilder setSizeMax(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SizeMax", v);
            this._sizeMax = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_SIZEMAX);
            return this;
        }

        public MapDataTypeBuilder setSizeMax(int v) {
            this._sizeMax = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_SIZEMAX);
            return this;
        }

        public MapDataTypeBuilder setKeyType(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyType", v);
            this._keyType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_KEYTYPE);
            return this;
        }

        public MapDataTypeBuilder setValueType(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ValueType", v);
            this._valueType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_VALUETYPE);
            return this;
        }

        public MapDataTypeBuilder setKeyName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("KeyName", v);
            this._keyName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_KEYNAME);
            return this;
        }

        public MapDataTypeBuilder setKeyName(java.lang.String v) {
            this._keyName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_KEYNAME);
            return this;
        }

        public MapDataTypeBuilder setValueName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ValueName", v);
            this._valueName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_VALUENAME);
            return this;
        }

        public MapDataTypeBuilder setValueName(java.lang.String v) {
            this._valueName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor
                            .FIELD_ID_VALUENAME);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "SizeMin":
                    setSizeMin((java.util.Optional<java.lang.Integer>) val);
                    break;
                case "SizeMax":
                    setSizeMax((java.util.Optional<java.lang.Integer>) val);
                    break;
                case "KeyType":
                    setKeyType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "ValueType":
                    setValueType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "KeyName":
                    setKeyName((java.util.Optional<java.lang.String>) val);
                    break;
                case "ValueName":
                    setValueName((java.util.Optional<java.lang.String>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public MapDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    8,
                    schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor.INSTANCE);

            MapDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (MapDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _typeDefName,
                                                _sizeMin,
                                                _sizeMax,
                                                _keyType,
                                                _valueType,
                                                _keyName,
                                                _valueName);
            else
                obj =
                        new schemarise.alfa.runtime.model.MapDataType._MapDataTypeConcrete(
                                _extendedAttribs,
                                _typeDefName,
                                _sizeMin,
                                _sizeMax,
                                _keyType,
                                _valueType,
                                _keyName,
                                _valueName);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.MapDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "SizeMin",
                        "SizeMax",
                        "KeyType",
                        "ValueType",
                        "KeyName",
                        "ValueName"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _sizeMin,
                        _sizeMax,
                        _keyType,
                        _valueType,
                        _keyName,
                        _valueName
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _MapDataTypeConcrete extends _MapDataType__Base__ implements MapDataType {

        private _MapDataTypeConcrete() {
            super();
        }

        private _MapDataTypeConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.util.Optional<java.lang.Integer> _sizeMin,
                java.util.Optional<java.lang.Integer> _sizeMax,
                schemarise.alfa.runtime.model.IDataType _keyType,
                schemarise.alfa.runtime.model.IDataType _valueType,
                java.util.Optional<java.lang.String> _keyName,
                java.util.Optional<java.lang.String> _valueName) {
            super(
                    _extendedAttribs,
                    _typeDefName,
                    _sizeMin,
                    _sizeMax,
                    _keyType,
                    _valueType,
                    _keyName,
                    _valueName);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _MapDataType__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public java.util.Optional<java.lang.Integer> _sizeMin;
        public java.util.Optional<java.lang.Integer> _sizeMax;
        public schemarise.alfa.runtime.model.IDataType _keyType;
        public schemarise.alfa.runtime.model.IDataType _valueType;
        public java.util.Optional<java.lang.String> _keyName;
        public java.util.Optional<java.lang.String> _valueName;

        public _MapDataType__Base__() {}

        public _MapDataType__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.util.Optional<java.lang.Integer> _sizeMin,
                java.util.Optional<java.lang.Integer> _sizeMax,
                schemarise.alfa.runtime.model.IDataType _keyType,
                schemarise.alfa.runtime.model.IDataType _valueType,
                java.util.Optional<java.lang.String> _keyName,
                java.util.Optional<java.lang.String> _valueName) {
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._sizeMin = _sizeMin;
            this._sizeMax = _sizeMax;
            this._keyType = _keyType;
            this._valueType = _valueType;
            this._keyName = _keyName;
            this._valueName = _valueName;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public java.util.Optional<java.lang.Integer> getSizeMin() {
            return _sizeMin;
        }

        public java.util.Optional<java.lang.Integer> getSizeMax() {
            return _sizeMax;
        }

        public schemarise.alfa.runtime.model.IDataType getKeyType() {
            return _keyType;
        }

        public schemarise.alfa.runtime.model.IDataType getValueType() {
            return _valueType;
        }

        public java.util.Optional<java.lang.String> getKeyName() {
            return _keyName;
        }

        public java.util.Optional<java.lang.String> getValueName() {
            return _valueName;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _extendedAttribs,
                    _typeDefName,
                    _sizeMin,
                    _sizeMax,
                    _keyType,
                    _valueType,
                    _keyName,
                    _valueName);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.MapDataType",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "TypeDefName",
                        "SizeMin",
                        "SizeMax",
                        "KeyType",
                        "ValueType",
                        "KeyName",
                        "ValueName"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _typeDefName,
                        _sizeMin,
                        _sizeMax,
                        _keyType,
                        _valueType,
                        _keyName,
                        _valueName
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.MapDataType._MapDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.MapDataType._MapDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.MapDataType._MapDataTypeConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(_sizeMin, rhs._sizeMin)
                    && java.util.Objects.equals(_sizeMax, rhs._sizeMax)
                    && java.util.Objects.equals(_keyType, rhs._keyType)
                    && java.util.Objects.equals(_valueType, rhs._valueType)
                    && java.util.Objects.equals(_keyName, rhs._keyName)
                    && java.util.Objects.equals(_valueName, rhs._valueName);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "SizeMin":
                    return _sizeMin;
                case "SizeMax":
                    return _sizeMax;
                case "KeyType":
                    return _keyType;
                case "ValueType":
                    return _valueType;
                case "KeyName":
                    return _keyName;
                case "ValueName":
                    return _valueName;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getKeyType().validate(__builderConfig);
            getValueType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class MapDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.MapDataType";
        public static schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.MapDataType.MapDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 1;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_SIZEMIN = 2;
        public static final String FIELD_SIZEMIN = "SizeMin";

        public static final short FIELD_ID_SIZEMAX = 3;
        public static final String FIELD_SIZEMAX = "SizeMax";

        public static final short FIELD_ID_KEYTYPE = 4;
        public static final String FIELD_KEYTYPE = "KeyType";

        public static final short FIELD_ID_VALUETYPE = 5;
        public static final String FIELD_VALUETYPE = "ValueType";

        public static final short FIELD_ID_KEYNAME = 6;
        public static final String FIELD_KEYNAME = "KeyName";

        public static final short FIELD_ID_VALUENAME = 7;
        public static final String FIELD_VALUENAME = "ValueName";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sizeMinType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sizeMaxType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _keyTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _valueTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _keyNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _valueNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _sizeMinConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _sizeMinConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sizeMinType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sizeMinType),
                                    _sizeMinConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sizeMinConsumer =
                        (builder, supplier) -> {
                            builder.setSizeMin(_sizeMinConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _sizeMaxConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _sizeMaxConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sizeMaxType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sizeMaxType),
                                    _sizeMaxConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sizeMaxConsumer =
                        (builder, supplier) -> {
                            builder.setSizeMax(_sizeMaxConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _keyTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyTypeConsumer =
                        (builder, supplier) -> {
                            builder.setKeyType(_keyTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _valueTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _valueTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _valueTypeConsumer =
                        (builder, supplier) -> {
                            builder.setValueType(_valueTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _keyNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _keyNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _keyNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _keyNameType),
                                    _keyNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _keyNameConsumer =
                        (builder, supplier) -> {
                            builder.setKeyName(_keyNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _valueNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _valueNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _valueNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _valueNameType),
                                    _valueNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _valueNameConsumer =
                        (builder, supplier) -> {
                            builder.setValueName(_valueNameConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sizeMinSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sizeMinSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sizeMinType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sizeMinType),
                                    pInner1,
                                    _sizeMinSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sizeMinSupplier =
                        (p, consumer) -> {
                            _sizeMinSupplierInner1.accept(p.getSizeMin(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sizeMaxSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sizeMaxSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sizeMaxType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sizeMaxType),
                                    pInner1,
                                    _sizeMaxSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sizeMaxSupplier =
                        (p, consumer) -> {
                            _sizeMaxSupplierInner1.accept(p.getSizeMax(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _keyTypeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyTypeSupplier =
                        (p, consumer) -> {
                            _keyTypeSupplierInner1.accept(p.getKeyType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _valueTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueTypeSupplier =
                        (p, consumer) -> {
                            _valueTypeSupplierInner1.accept(p.getValueType(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _keyNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _keyNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _keyNameType),
                                    pInner1,
                                    _keyNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _keyNameSupplier =
                        (p, consumer) -> {
                            _keyNameSupplierInner1.accept(p.getKeyName(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _valueNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _valueNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _valueNameType),
                                    pInner1,
                                    _valueNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.MapDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _valueNameSupplier =
                        (p, consumer) -> {
                            _valueNameSupplierInner1.accept(p.getValueName(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                MapDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sizeMinMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sizeMinSupplier),
                        java.util.Optional.of(_sizeMinConsumer),
                        java.util.Optional.of(_sizeMinSupplierInner1),
                        java.util.Optional.of(_sizeMinConsumerInner1),
                        _sizeMinType,
                        FIELD_SIZEMIN,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sizeMaxMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sizeMaxSupplier),
                        java.util.Optional.of(_sizeMaxConsumer),
                        java.util.Optional.of(_sizeMaxSupplierInner1),
                        java.util.Optional.of(_sizeMaxConsumerInner1),
                        _sizeMaxType,
                        FIELD_SIZEMAX,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keyTypeSupplier),
                        java.util.Optional.of(_keyTypeConsumer),
                        java.util.Optional.of(_keyTypeSupplierInner1),
                        java.util.Optional.of(_keyTypeConsumerInner1),
                        _keyTypeType,
                        FIELD_KEYTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta valueTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_valueTypeSupplier),
                        java.util.Optional.of(_valueTypeConsumer),
                        java.util.Optional.of(_valueTypeSupplierInner1),
                        java.util.Optional.of(_valueTypeConsumerInner1),
                        _valueTypeType,
                        FIELD_VALUETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_keyNameSupplier),
                        java.util.Optional.of(_keyNameConsumer),
                        java.util.Optional.of(_keyNameSupplierInner1),
                        java.util.Optional.of(_keyNameConsumerInner1),
                        _keyNameType,
                        FIELD_KEYNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta valueNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_valueNameSupplier),
                        java.util.Optional.of(_valueNameConsumer),
                        java.util.Optional.of(_valueNameSupplierInner1),
                        java.util.Optional.of(_valueNameConsumerInner1),
                        _valueNameType,
                        FIELD_VALUENAME,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public MapDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl();
        }

        @Override
        public MapDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.MapDataType._MapDataTypeBuilderImpl(cc);
        }

        public MapDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<MapDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(FIELD_SIZEMIN, sizeMinMeta);
                                        put(FIELD_SIZEMAX, sizeMaxMeta);
                                        put(FIELD_KEYTYPE, keyTypeMeta);
                                        put(FIELD_VALUETYPE, valueTypeMeta);
                                        put(FIELD_KEYNAME, keyNameMeta);
                                        put(FIELD_VALUENAME, valueNameMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<MapDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_SIZEMIN:
                    return FIELD_SIZEMIN;
                case FIELD_ID_SIZEMAX:
                    return FIELD_SIZEMAX;
                case FIELD_ID_KEYTYPE:
                    return FIELD_KEYTYPE;
                case FIELD_ID_VALUETYPE:
                    return FIELD_VALUETYPE;
                case FIELD_ID_KEYNAME:
                    return FIELD_KEYNAME;
                case FIELD_ID_VALUENAME:
                    return FIELD_VALUENAME;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.MapDataType{ExtendedAttribs:optional<map<string,string>;>;KeyName:optional<string;>;KeyType:schemarise.alfa.runtime.model.IDataType[4404d6a0];SizeMax:optional<int;>;SizeMin:optional<int;>;TypeDefName:optional<string;>;ValueName:optional<string;>;ValueType:schemarise.alfa.runtime.model.IDataType[4404d6a0];}
            schemarise.alfa.runtime.model.MapDataType{KeyType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];ValueType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];}
            */
            return "634bd6b8:5a2fdaa5";
        }
    }
    // </editor-fold>

}
