// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ColBasedTable
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.BaseTable {

    schemarise.alfa.runtime.model.TableDef getDef();

    java.util.List<schemarise.alfa.runtime.model.ColumnData> getColData();

    int getRowCount();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ColBasedTableBuilder builder() {
        return new schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl();
    }

    public static ColBasedTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ColBasedTableBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.BaseTable.BaseTableBuilder {
        ColBasedTableBuilder setDef(schemarise.alfa.runtime.model.TableDef v);

        schemarise.alfa.runtime.model.TableDef getDef();

        ColBasedTableBuilder addColData(schemarise.alfa.runtime.model.ColumnData e);

        ColBasedTableBuilder addAllColData(
                java.util.List<schemarise.alfa.runtime.model.ColumnData> all);

        java.util.List<schemarise.alfa.runtime.model.ColumnData> getColData();

        ColBasedTableBuilder setRowCount(int v);

        int getRowCount();

        ColBasedTable build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ColBasedTableBuilderImpl extends _ColBasedTable__Base__
            implements ColBasedTableBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ColBasedTableBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ColBasedTableBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor.INSTANCE;
        }

        public ColBasedTableBuilder setDef(schemarise.alfa.runtime.model.TableDef v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Def", v);
            this._def = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_DEF);
            return this;
        }

        private void createColData() {
            this._colData = new java.util.ArrayList<>();
        }

        public ColBasedTableBuilder addColData(schemarise.alfa.runtime.model.ColumnData e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ColData", e);
            if (this._colData == null) createColData();
            this._colData.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_COLDATA);
            return this;
        }

        public ColBasedTableBuilder setColData(
                int index, schemarise.alfa.runtime.model.ColumnData e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ColData", e);
            if (this._colData == null) createColData();
            this._colData.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_COLDATA);
            return this;
        }

        public ColBasedTableBuilder addAllColData(
                java.util.List<schemarise.alfa.runtime.model.ColumnData> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ColData", all);
            if (this._colData == null) createColData();
            this._colData.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_COLDATA);
            return this;
        }

        private ColBasedTableBuilder setColData(
                java.util.List<schemarise.alfa.runtime.model.ColumnData> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ColData", all);
            this._colData = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_COLDATA);
            return this;
        }

        public ColBasedTableBuilder setRowCount(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("RowCount", v);
            this._rowCount = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor
                            .FIELD_ID_ROWCOUNT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Def":
                    setDef((schemarise.alfa.runtime.model.TableDef) val);
                    break;
                case "ColData":
                    setColData((java.util.List<schemarise.alfa.runtime.model.ColumnData>) val);
                    break;
                case "RowCount":
                    setRowCount((int) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ColBasedTable build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor.INSTANCE);

            ColBasedTable obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ColBasedTable)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _def,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .ColBasedTable
                                                                        .ColBasedTableDescriptor
                                                                        .INSTANCE
                                                                        ._colDataSupplierInner1,
                                                                _colData),
                                                _rowCount);
            else
                obj =
                        new schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableConcrete(
                                _def,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.ColBasedTable
                                                .ColBasedTableDescriptor.INSTANCE
                                                ._colDataSupplierInner1,
                                        _colData),
                                _rowCount);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ColBasedTable",
                    new java.lang.String[] {"Def", "ColData", "RowCount"},
                    new java.lang.Object[] {_def, _colData, _rowCount});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ColBasedTableConcrete extends _ColBasedTable__Base__ implements ColBasedTable {

        private _ColBasedTableConcrete() {
            super();
        }

        private _ColBasedTableConcrete(
                schemarise.alfa.runtime.model.TableDef _def,
                java.util.List<schemarise.alfa.runtime.model.ColumnData> _colData,
                int _rowCount) {
            super(_def, _colData, _rowCount);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ColBasedTable__Base__ {
        public schemarise.alfa.runtime.model.TableDef _def;
        public java.util.List<schemarise.alfa.runtime.model.ColumnData> _colData;
        public int _rowCount;

        public _ColBasedTable__Base__() {}

        public _ColBasedTable__Base__(
                schemarise.alfa.runtime.model.TableDef _def,
                java.util.List<schemarise.alfa.runtime.model.ColumnData> _colData,
                int _rowCount) {
            this._def = _def;
            this._colData = _colData;
            this._rowCount = _rowCount;
        }

        public schemarise.alfa.runtime.model.TableDef getDef() {
            return _def;
        }

        public java.util.List<schemarise.alfa.runtime.model.ColumnData> getColData() {
            return _colData;
        }

        public int getRowCount() {
            return _rowCount;
        }

        public int hashCode() {
            return java.util.Objects.hash(_def, _colData, _rowCount);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ColBasedTable",
                    new java.lang.String[] {"Def", "ColData", "RowCount"},
                    new java.lang.Object[] {_def, _colData, _rowCount});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableConcrete))
                return false;
            schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableConcrete rhs =
                    (schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableConcrete) o;
            return java.util.Objects.equals(_def, rhs._def)
                    && java.util.Objects.equals(_colData, rhs._colData)
                    && _rowCount == rhs._rowCount;
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Def":
                    return _def;
                case "ColData":
                    return _colData;
                case "RowCount":
                    return _rowCount;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getDef().validate(__builderConfig);
            java.util.stream.IntStream.range(0, getColData().size())
                    .forEach(
                            e0 -> {
                                getColData().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ColBasedTableDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.ColBasedTable";
        public static schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.ColBasedTable.ColBasedTableDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DEF = 0;
        public static final String FIELD_DEF = "Def";

        public static final short FIELD_ID_COLDATA = 1;
        public static final String FIELD_COLDATA = "ColData";

        public static final short FIELD_ID_ROWCOUNT = 2;
        public static final String FIELD_ROWCOUNT = "RowCount";

        private schemarise.alfa.runtime.model.UdtDataType _defType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.TableDef")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _colDataType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.ColumnData")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _rowCountType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.TableDef -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, schemarise.alfa.runtime.model.TableDef>
                _defConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _defConsumer =
                        (builder, supplier) -> {
                            builder.setDef(_defConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.ColumnData > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.ColumnData>>
                _colDataConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.ColumnData>
                                    _colDataConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _colDataType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _colDataType),
                                    _colDataConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _colDataConsumer =
                        (builder, supplier) -> {
                            builder.addAllColData(_colDataConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _rowCountConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _rowCountType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _rowCountConsumer =
                        (builder, supplier) -> {
                            builder.setRowCount(_rowCountConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.TableDef -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TableDef,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _defType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defSupplier =
                        (p, consumer) -> {
                            _defSupplierInner1.accept(p.getDef(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.ColumnData > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.ColumnData>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _colDataSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.ColumnData,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _colDataSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _colDataType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _colDataType),
                                    pInner1,
                                    _colDataSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _colDataSupplier =
                        (p, consumer) -> {
                            _colDataSupplierInner1.accept(p.getColData(), consumer);
                        };
        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _rowCountSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _rowCountType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ColBasedTable,
                        com.schemarise.alfa.runtime.DataConsumer>
                _rowCountSupplier =
                        (p, consumer) -> {
                            _rowCountSupplierInner1.accept(p.getRowCount(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ColBasedTable, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta defMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_defSupplier),
                        java.util.Optional.of(_defConsumer),
                        java.util.Optional.of(_defSupplierInner1),
                        java.util.Optional.of(_defConsumerInner1),
                        _defType,
                        FIELD_DEF,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta colDataMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_colDataSupplier),
                        java.util.Optional.of(_colDataConsumer),
                        java.util.Optional.of(_colDataSupplierInner1),
                        java.util.Optional.of(_colDataConsumerInner1),
                        _colDataType,
                        FIELD_COLDATA,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta rowCountMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_rowCountSupplier),
                        java.util.Optional.of(_rowCountConsumer),
                        java.util.Optional.of(_rowCountSupplierInner1),
                        java.util.Optional.of(_rowCountConsumerInner1),
                        _rowCountType,
                        FIELD_ROWCOUNT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ColBasedTableBuilder builder() {
            return new schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl();
        }

        @Override
        public ColBasedTableBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.ColBasedTable._ColBasedTableBuilderImpl(cc);
        }

        public ColBasedTableDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ColBasedTable>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DEF, defMeta);
                                        put(FIELD_COLDATA, colDataMeta);
                                        put(FIELD_ROWCOUNT, rowCountMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ColBasedTable>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DEF:
                    return FIELD_DEF;
                case FIELD_ID_COLDATA:
                    return FIELD_COLDATA;
                case FIELD_ID_ROWCOUNT:
                    return FIELD_ROWCOUNT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.ColBasedTable{ColData:list<schemarise.alfa.runtime.model.ColumnData[fa776d29]>;Def:schemarise.alfa.runtime.model.TableDef[c59d9793];RowCount:int;}
            schemarise.alfa.runtime.model.ColBasedTable{ColData:list<schemarise.alfa.runtime.model.ColumnData[fa776d29]>;Def:schemarise.alfa.runtime.model.TableDef[7caf1935];RowCount:int;}
            */
            return "a392837e:a9061288";
        }
    }
    // </editor-fold>

}
