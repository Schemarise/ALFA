// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface RangeValue extends com.schemarise.alfa.runtime.Union {

    public default int getIntValue() {
        throw new IllegalStateException(
                "Accessing field intValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isIntValue() {
        return false;
    }

    public default long getLongValue() {
        throw new IllegalStateException(
                "Accessing field longValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isLongValue() {
        return false;
    }

    public default double getDoubleValue() {
        throw new IllegalStateException(
                "Accessing field doubleValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDoubleValue() {
        return false;
    }

    public default java.time.LocalDate getDateValue() {
        throw new IllegalStateException(
                "Accessing field dateValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDateValue() {
        return false;
    }

    public default java.time.LocalDateTime getDatetimeValue() {
        throw new IllegalStateException(
                "Accessing field datetimeValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDatetimeValue() {
        return false;
    }

    public default java.time.ZonedDateTime getDatetimetzValue() {
        throw new IllegalStateException(
                "Accessing field datetimetzValue is not supported in "
                        + getClass().getSimpleName());
    }

    public default boolean isDatetimetzValue() {
        return false;
    }

    public default java.time.LocalTime getTimeValue() {
        throw new IllegalStateException(
                "Accessing field timeValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isTimeValue() {
        return false;
    }

    public default java.time.Duration getDurationValue() {
        throw new IllegalStateException(
                "Accessing field durationValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isDurationValue() {
        return false;
    }

    public default com.schemarise.alfa.runtime.NormalizedPeriod getPeriodValue() {
        throw new IllegalStateException(
                "Accessing field periodValue is not supported in " + getClass().getSimpleName());
    }

    public default boolean isPeriodValue() {
        return false;
    }

    // <editor-fold defaultstate="collapsed" desc="CaseintValue">
    static final class CaseintValue implements RangeValue {
        private int _intValue;

        private CaseintValue(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, int v) {
            this._intValue = v;
        }

        public int getIntValue() {
            return this._intValue;
        }

        public boolean isIntValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "intValue";
        }

        public java.lang.Object caseValue() {
            return _intValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("intValue")) return _intValue;
            else throw new IllegalStateException("Cannot access intValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaselongValue">
    static final class CaselongValue implements RangeValue {
        private long _longValue;

        private CaselongValue(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, long v) {
            this._longValue = v;
        }

        public long getLongValue() {
            return this._longValue;
        }

        public boolean isLongValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "longValue";
        }

        public java.lang.Object caseValue() {
            return _longValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("longValue")) return _longValue;
            else throw new IllegalStateException("Cannot access longValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasedoubleValue">
    static final class CasedoubleValue implements RangeValue {
        private double _doubleValue;

        private CasedoubleValue(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, double v) {
            this._doubleValue = v;
        }

        public double getDoubleValue() {
            return this._doubleValue;
        }

        public boolean isDoubleValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "doubleValue";
        }

        public java.lang.Object caseValue() {
            return _doubleValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("doubleValue")) return _doubleValue;
            else throw new IllegalStateException("Cannot access doubleValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasedateValue">
    static final class CasedateValue implements RangeValue {
        private java.time.LocalDate _dateValue;

        private CasedateValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.time.LocalDate v) {
            this._dateValue = v;
        }

        public java.time.LocalDate getDateValue() {
            return this._dateValue;
        }

        public boolean isDateValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "dateValue";
        }

        public java.lang.Object caseValue() {
            return _dateValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("dateValue")) return _dateValue;
            else throw new IllegalStateException("Cannot access dateValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasedatetimeValue">
    static final class CasedatetimeValue implements RangeValue {
        private java.time.LocalDateTime _datetimeValue;

        private CasedatetimeValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.time.LocalDateTime v) {
            this._datetimeValue = v;
        }

        public java.time.LocalDateTime getDatetimeValue() {
            return this._datetimeValue;
        }

        public boolean isDatetimeValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "datetimeValue";
        }

        public java.lang.Object caseValue() {
            return _datetimeValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("datetimeValue")) return _datetimeValue;
            else throw new IllegalStateException("Cannot access datetimeValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasedatetimetzValue">
    static final class CasedatetimetzValue implements RangeValue {
        private java.time.ZonedDateTime _datetimetzValue;

        private CasedatetimetzValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.time.ZonedDateTime v) {
            this._datetimetzValue = v;
        }

        public java.time.ZonedDateTime getDatetimetzValue() {
            return this._datetimetzValue;
        }

        public boolean isDatetimetzValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "datetimetzValue";
        }

        public java.lang.Object caseValue() {
            return _datetimetzValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("datetimetzValue")) return _datetimetzValue;
            else throw new IllegalStateException("Cannot access datetimetzValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasetimeValue">
    static final class CasetimeValue implements RangeValue {
        private java.time.LocalTime _timeValue;

        private CasetimeValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.time.LocalTime v) {
            this._timeValue = v;
        }

        public java.time.LocalTime getTimeValue() {
            return this._timeValue;
        }

        public boolean isTimeValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "timeValue";
        }

        public java.lang.Object caseValue() {
            return _timeValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("timeValue")) return _timeValue;
            else throw new IllegalStateException("Cannot access timeValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CasedurationValue">
    static final class CasedurationValue implements RangeValue {
        private java.time.Duration _durationValue;

        private CasedurationValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig, java.time.Duration v) {
            this._durationValue = v;
        }

        public java.time.Duration getDurationValue() {
            return this._durationValue;
        }

        public boolean isDurationValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "durationValue";
        }

        public java.lang.Object caseValue() {
            return _durationValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("durationValue")) return _durationValue;
            else throw new IllegalStateException("Cannot access durationValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="CaseperiodValue">
    static final class CaseperiodValue implements RangeValue {
        private com.schemarise.alfa.runtime.NormalizedPeriod _periodValue;

        private CaseperiodValue(
                com.schemarise.alfa.runtime.IBuilderConfig __builderConfig,
                com.schemarise.alfa.runtime.NormalizedPeriod v) {
            this._periodValue = v;
        }

        public com.schemarise.alfa.runtime.NormalizedPeriod getPeriodValue() {
            return this._periodValue;
        }

        public boolean isPeriodValue() {
            return true;
        }

        public java.lang.String caseName() {
            return "periodValue";
        }

        public java.lang.Object caseValue() {
            return _periodValue;
        }

        public boolean isTagged() {
            return true;
        }

        public java.lang.Object get(java.lang.String f) {
            if (f.equals("periodValue")) return _periodValue;
            else throw new IllegalStateException("Cannot access periodValue");
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public int hashCode() {
            return com.schemarise.alfa.runtime.utils.Utils.unionHashCode(this);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.unionToString(this);
        }

        public boolean equals(Object o) {
            return com.schemarise.alfa.runtime.utils.Utils.unionEquals(this, o);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder class">

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static RangeValueBuilder builder() {
        return new schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl();
    }

    public static RangeValueBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface RangeValueBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        RangeValueBuilder setIntValue(int v);

        RangeValueBuilder setLongValue(long v);

        RangeValueBuilder setDoubleValue(double v);

        RangeValueBuilder setDateValue(java.time.LocalDate v);

        RangeValueBuilder setDatetimeValue(java.time.LocalDateTime v);

        RangeValueBuilder setDatetimetzValue(java.time.ZonedDateTime v);

        RangeValueBuilder setTimeValue(java.time.LocalTime v);

        RangeValueBuilder setDurationValue(java.time.Duration v);

        RangeValueBuilder setPeriodValue(com.schemarise.alfa.runtime.NormalizedPeriod v);

        RangeValue build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _RangeValueBuilderImpl implements RangeValueBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private int _intValue;
        private long _longValue;
        private double _doubleValue;
        private java.time.LocalDate _dateValue;
        private java.time.LocalDateTime _datetimeValue;
        private java.time.ZonedDateTime _datetimetzValue;
        private java.time.LocalTime _timeValue;
        private java.time.Duration _durationValue;
        private com.schemarise.alfa.runtime.NormalizedPeriod _periodValue;

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "intValue":
                    return _intValue;
                case "longValue":
                    return _longValue;
                case "doubleValue":
                    return _doubleValue;
                case "dateValue":
                    return _dateValue;
                case "datetimeValue":
                    return _datetimeValue;
                case "datetimetzValue":
                    return _datetimetzValue;
                case "timeValue":
                    return _timeValue;
                case "durationValue":
                    return _durationValue;
                case "periodValue":
                    return _periodValue;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Request for unknown field " + fieldName);
            }
        }

        private java.util.BitSet __missingFields;

        private _RangeValueBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _RangeValueBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(9);
            __missingFields.set(0, 9);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE;
        }

        public RangeValueBuilder setIntValue(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IntValue", v);
            this._intValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_INTVALUE);
            return this;
        }

        public RangeValueBuilder setLongValue(long v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LongValue", v);
            this._longValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_LONGVALUE);
            return this;
        }

        public RangeValueBuilder setDoubleValue(double v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DoubleValue", v);
            this._doubleValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DOUBLEVALUE);
            return this;
        }

        public RangeValueBuilder setDateValue(java.time.LocalDate v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DateValue", v);
            this._dateValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATEVALUE);
            return this;
        }

        public RangeValueBuilder setDatetimeValue(java.time.LocalDateTime v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DatetimeValue", v);
            this._datetimeValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATETIMEVALUE);
            return this;
        }

        public RangeValueBuilder setDatetimetzValue(java.time.ZonedDateTime v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DatetimetzValue", v);
            this._datetimetzValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATETIMETZVALUE);
            return this;
        }

        public RangeValueBuilder setTimeValue(java.time.LocalTime v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TimeValue", v);
            this._timeValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_TIMEVALUE);
            return this;
        }

        public RangeValueBuilder setDurationValue(java.time.Duration v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DurationValue", v);
            this._durationValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DURATIONVALUE);
            return this;
        }

        public RangeValueBuilder setPeriodValue(com.schemarise.alfa.runtime.NormalizedPeriod v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PeriodValue", v);
            this._periodValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_PERIODVALUE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "intValue":
                    setIntValue((int) val);
                    break;
                case "longValue":
                    setLongValue((long) val);
                    break;
                case "doubleValue":
                    setDoubleValue((double) val);
                    break;
                case "dateValue":
                    setDateValue((java.time.LocalDate) val);
                    break;
                case "datetimeValue":
                    setDatetimeValue((java.time.LocalDateTime) val);
                    break;
                case "datetimetzValue":
                    setDatetimetzValue((java.time.ZonedDateTime) val);
                    break;
                case "timeValue":
                    setTimeValue((java.time.LocalTime) val);
                    break;
                case "durationValue":
                    setDurationValue((java.time.Duration) val);
                    break;
                case "periodValue":
                    setPeriodValue((com.schemarise.alfa.runtime.NormalizedPeriod) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public RangeValue build() {

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_INTVALUE))
                return new CaseintValue(__builderConfig, _intValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_LONGVALUE))
                return new CaselongValue(__builderConfig, _longValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DOUBLEVALUE))
                return new CasedoubleValue(__builderConfig, _doubleValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATEVALUE))
                return new CasedateValue(__builderConfig, _dateValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATETIMEVALUE))
                return new CasedatetimeValue(__builderConfig, _datetimeValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DATETIMETZVALUE))
                return new CasedatetimetzValue(__builderConfig, _datetimetzValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_TIMEVALUE))
                return new CasetimeValue(__builderConfig, _timeValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_DURATIONVALUE))
                return new CasedurationValue(__builderConfig, _durationValue);

            if (!__missingFields.get(
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor
                            .FIELD_ID_PERIODVALUE))
                return new CaseperiodValue(__builderConfig, _periodValue);

            throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                    "Union case not assigned or more than 1 case assigned");
        }

        private void clearMissingFlag(short flag) {
            com.schemarise.alfa.runtime.utils.Utils.enforceNoFieldSet(
                    __missingFields,
                    schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor.INSTANCE,
                    9,
                    flag);
            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.RangeValue",
                    new java.lang.String[] {
                        "intValue",
                        "longValue",
                        "doubleValue",
                        "dateValue",
                        "datetimeValue",
                        "datetimetzValue",
                        "timeValue",
                        "durationValue",
                        "periodValue"
                    },
                    new java.lang.Object[] {
                        _intValue,
                        _longValue,
                        _doubleValue,
                        _dateValue,
                        _datetimeValue,
                        _datetimetzValue,
                        _timeValue,
                        _durationValue,
                        _periodValue
                    });
        }
    }
    // </editor-fold>

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class RangeValueDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.RangeValue";
        public static schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.RangeValue.RangeValueDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_INTVALUE = 0;
        public static final String FIELD_INTVALUE = "intValue";

        public static final short FIELD_ID_LONGVALUE = 1;
        public static final String FIELD_LONGVALUE = "longValue";

        public static final short FIELD_ID_DOUBLEVALUE = 2;
        public static final String FIELD_DOUBLEVALUE = "doubleValue";

        public static final short FIELD_ID_DATEVALUE = 3;
        public static final String FIELD_DATEVALUE = "dateValue";

        public static final short FIELD_ID_DATETIMEVALUE = 4;
        public static final String FIELD_DATETIMEVALUE = "datetimeValue";

        public static final short FIELD_ID_DATETIMETZVALUE = 5;
        public static final String FIELD_DATETIMETZVALUE = "datetimetzValue";

        public static final short FIELD_ID_TIMEVALUE = 6;
        public static final String FIELD_TIMEVALUE = "timeValue";

        public static final short FIELD_ID_DURATIONVALUE = 7;
        public static final String FIELD_DURATIONVALUE = "durationValue";

        public static final short FIELD_ID_PERIODVALUE = 8;
        public static final String FIELD_PERIODVALUE = "periodValue";

        private schemarise.alfa.runtime.model.ScalarDataType _intValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _longValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.longType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _doubleValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.doubleType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dateValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.dateType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _datetimeValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.datetimeType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _datetimetzValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.datetimetzType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _timeValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.timeType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _durationValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.durationType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _periodValueType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.periodType)
                        .build();

        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _intValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _intValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _intValueConsumer =
                        (builder, supplier) -> {
                            builder.setIntValue(_intValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer long -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Long>
                _longValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.longValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _longValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _longValueConsumer =
                        (builder, supplier) -> {
                            builder.setLongValue(_longValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer double -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Double>
                _doubleValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.doubleValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _doubleValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _doubleValueConsumer =
                        (builder, supplier) -> {
                            builder.setDoubleValue(_doubleValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer date -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.LocalDate>
                _dateValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.dateValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _dateValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dateValueConsumer =
                        (builder, supplier) -> {
                            builder.setDateValue(_dateValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer datetime -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.LocalDateTime>
                _datetimeValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.datetimeValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _datetimeValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _datetimeValueConsumer =
                        (builder, supplier) -> {
                            builder.setDatetimeValue(_datetimeValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer datetimetz -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.ZonedDateTime>
                _datetimetzValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.datetimetzValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _datetimetzValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _datetimetzValueConsumer =
                        (builder, supplier) -> {
                            builder.setDatetimetzValue(
                                    _datetimetzValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer time -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.LocalTime>
                _timeValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.timeValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timeValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _timeValueConsumer =
                        (builder, supplier) -> {
                            builder.setTimeValue(_timeValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer duration -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.Duration>
                _durationValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.durationValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _durationValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _durationValueConsumer =
                        (builder, supplier) -> {
                            builder.setDurationValue(_durationValueConsumerInner1.apply(supplier));
                        };
        /* -- Consumer period -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        com.schemarise.alfa.runtime.NormalizedPeriod>
                _periodValueConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.periodValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _periodValueType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _periodValueConsumer =
                        (builder, supplier) -> {
                            builder.setPeriodValue(_periodValueConsumerInner1.apply(supplier));
                        };

        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _intValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _intValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _intValueSupplier =
                        (p, consumer) -> {
                            _intValueSupplierInner1.accept(p.getIntValue(), consumer);
                        };
        /* -- Supplier long -- */
        java.util.function.BiConsumer<java.lang.Long, com.schemarise.alfa.runtime.DataConsumer>
                _longValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _longValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _longValueSupplier =
                        (p, consumer) -> {
                            _longValueSupplierInner1.accept(p.getLongValue(), consumer);
                        };
        /* -- Supplier double -- */
        java.util.function.BiConsumer<java.lang.Double, com.schemarise.alfa.runtime.DataConsumer>
                _doubleValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _doubleValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _doubleValueSupplier =
                        (p, consumer) -> {
                            _doubleValueSupplierInner1.accept(p.getDoubleValue(), consumer);
                        };
        /* -- Supplier date -- */
        java.util.function.BiConsumer<java.time.LocalDate, com.schemarise.alfa.runtime.DataConsumer>
                _dateValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _dateValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dateValueSupplier =
                        (p, consumer) -> {
                            _dateValueSupplierInner1.accept(p.getDateValue(), consumer);
                        };
        /* -- Supplier datetime -- */
        java.util.function.BiConsumer<
                        java.time.LocalDateTime, com.schemarise.alfa.runtime.DataConsumer>
                _datetimeValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _datetimeValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datetimeValueSupplier =
                        (p, consumer) -> {
                            _datetimeValueSupplierInner1.accept(p.getDatetimeValue(), consumer);
                        };
        /* -- Supplier datetimetz -- */
        java.util.function.BiConsumer<
                        java.time.ZonedDateTime, com.schemarise.alfa.runtime.DataConsumer>
                _datetimetzValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _datetimetzValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _datetimetzValueSupplier =
                        (p, consumer) -> {
                            _datetimetzValueSupplierInner1.accept(p.getDatetimetzValue(), consumer);
                        };
        /* -- Supplier time -- */
        java.util.function.BiConsumer<java.time.LocalTime, com.schemarise.alfa.runtime.DataConsumer>
                _timeValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timeValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _timeValueSupplier =
                        (p, consumer) -> {
                            _timeValueSupplierInner1.accept(p.getTimeValue(), consumer);
                        };
        /* -- Supplier duration -- */
        java.util.function.BiConsumer<java.time.Duration, com.schemarise.alfa.runtime.DataConsumer>
                _durationValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _durationValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _durationValueSupplier =
                        (p, consumer) -> {
                            _durationValueSupplierInner1.accept(p.getDurationValue(), consumer);
                        };
        /* -- Supplier period -- */
        java.util.function.BiConsumer<
                        com.schemarise.alfa.runtime.NormalizedPeriod,
                        com.schemarise.alfa.runtime.DataConsumer>
                _periodValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _periodValueType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.RangeValue,
                        com.schemarise.alfa.runtime.DataConsumer>
                _periodValueSupplier =
                        (p, consumer) -> {
                            _periodValueSupplierInner1.accept(p.getPeriodValue(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                RangeValue, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta intValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_intValueSupplier),
                        java.util.Optional.of(_intValueConsumer),
                        java.util.Optional.of(_intValueSupplierInner1),
                        java.util.Optional.of(_intValueConsumerInner1),
                        _intValueType,
                        FIELD_INTVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta longValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_longValueSupplier),
                        java.util.Optional.of(_longValueConsumer),
                        java.util.Optional.of(_longValueSupplierInner1),
                        java.util.Optional.of(_longValueConsumerInner1),
                        _longValueType,
                        FIELD_LONGVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta doubleValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_doubleValueSupplier),
                        java.util.Optional.of(_doubleValueConsumer),
                        java.util.Optional.of(_doubleValueSupplierInner1),
                        java.util.Optional.of(_doubleValueConsumerInner1),
                        _doubleValueType,
                        FIELD_DOUBLEVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dateValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dateValueSupplier),
                        java.util.Optional.of(_dateValueConsumer),
                        java.util.Optional.of(_dateValueSupplierInner1),
                        java.util.Optional.of(_dateValueConsumerInner1),
                        _dateValueType,
                        FIELD_DATEVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datetimeValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_datetimeValueSupplier),
                        java.util.Optional.of(_datetimeValueConsumer),
                        java.util.Optional.of(_datetimeValueSupplierInner1),
                        java.util.Optional.of(_datetimeValueConsumerInner1),
                        _datetimeValueType,
                        FIELD_DATETIMEVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta datetimetzValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_datetimetzValueSupplier),
                        java.util.Optional.of(_datetimetzValueConsumer),
                        java.util.Optional.of(_datetimetzValueSupplierInner1),
                        java.util.Optional.of(_datetimetzValueConsumerInner1),
                        _datetimetzValueType,
                        FIELD_DATETIMETZVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta timeValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_timeValueSupplier),
                        java.util.Optional.of(_timeValueConsumer),
                        java.util.Optional.of(_timeValueSupplierInner1),
                        java.util.Optional.of(_timeValueConsumerInner1),
                        _timeValueType,
                        FIELD_TIMEVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta durationValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_durationValueSupplier),
                        java.util.Optional.of(_durationValueConsumer),
                        java.util.Optional.of(_durationValueSupplierInner1),
                        java.util.Optional.of(_durationValueConsumerInner1),
                        _durationValueType,
                        FIELD_DURATIONVALUE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta periodValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_periodValueSupplier),
                        java.util.Optional.of(_periodValueConsumer),
                        java.util.Optional.of(_periodValueSupplierInner1),
                        java.util.Optional.of(_periodValueConsumerInner1),
                        _periodValueType,
                        FIELD_PERIODVALUE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public RangeValueBuilder builder() {
            return new schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl();
        }

        @Override
        public RangeValueBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.RangeValue._RangeValueBuilderImpl(cc);
        }

        public RangeValueDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<RangeValue>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_INTVALUE, intValueMeta);
                                        put(FIELD_LONGVALUE, longValueMeta);
                                        put(FIELD_DOUBLEVALUE, doubleValueMeta);
                                        put(FIELD_DATEVALUE, dateValueMeta);
                                        put(FIELD_DATETIMEVALUE, datetimeValueMeta);
                                        put(FIELD_DATETIMETZVALUE, datetimetzValueMeta);
                                        put(FIELD_TIMEVALUE, timeValueMeta);
                                        put(FIELD_DURATIONVALUE, durationValueMeta);
                                        put(FIELD_PERIODVALUE, periodValueMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<RangeValue>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_INTVALUE:
                    return FIELD_INTVALUE;
                case FIELD_ID_LONGVALUE:
                    return FIELD_LONGVALUE;
                case FIELD_ID_DOUBLEVALUE:
                    return FIELD_DOUBLEVALUE;
                case FIELD_ID_DATEVALUE:
                    return FIELD_DATEVALUE;
                case FIELD_ID_DATETIMEVALUE:
                    return FIELD_DATETIMEVALUE;
                case FIELD_ID_DATETIMETZVALUE:
                    return FIELD_DATETIMETZVALUE;
                case FIELD_ID_TIMEVALUE:
                    return FIELD_TIMEVALUE;
                case FIELD_ID_DURATIONVALUE:
                    return FIELD_DURATIONVALUE;
                case FIELD_ID_PERIODVALUE:
                    return FIELD_PERIODVALUE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.RangeValue{dateValue:date;datetimeValue:datetime;datetimetzValue:datetimetz;doubleValue:double;durationValue:duration;intValue:int;longValue:long;periodValue:period;timeValue:time;}
            schemarise.alfa.runtime.model.RangeValue{dateValue:date;datetimeValue:datetime;datetimetzValue:datetimetz;doubleValue:double;durationValue:duration;intValue:int;longValue:long;periodValue:period;timeValue:time;}
            */
            return "4896a1e:";
        }
    }
    // </editor-fold>

}
