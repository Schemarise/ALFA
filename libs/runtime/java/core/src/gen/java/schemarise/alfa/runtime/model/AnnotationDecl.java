// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface AnnotationDecl
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.UdtBaseNode {

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<
                    java.util.Map<
                            java.lang.String,
                            java.util.Map<
                                    java.lang.String, schemarise.alfa.runtime.model.IExpression>>>
            getAnnotations();

    java.util.Optional<java.lang.String> getDoc();

    schemarise.alfa.runtime.model.UdtVersionedName getName();

    java.lang.String getChecksum();

    java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers();

    schemarise.alfa.runtime.model.Union__ModelBaseNode__Source getSource();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
            getReferencedInFieldTypeFrom();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> getIncludes();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> getScope();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
            getIncludedFrom();

    java.util.Optional<java.lang.String> getModelId();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getAllFields();

    java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> getExtends();

    java.util.List<java.lang.String> getLocalFieldNames();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
            getInheritedFields();

    boolean getIsSynthetic();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> getAsserts();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> getLinkages();

    java.util.List<schemarise.alfa.runtime.model.UdtMetaType> getTargets();

    java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> getReferencedFromUdts();

    java.util.Map<schemarise.alfa.runtime.model.UdtVersionedName, java.util.List<java.lang.String>>
            getReferencedFromUdtAttribs();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static AnnotationDeclBuilder builder() {
        return new schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl();
    }

    public static AnnotationDeclBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface AnnotationDeclBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.UdtBaseNode.UdtBaseNodeBuilder {
        AnnotationDeclBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        AnnotationDeclBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        AnnotationDeclBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v);

        AnnotationDeclBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v);

        java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations();

        AnnotationDeclBuilder setDoc(java.util.Optional<java.lang.String> v);

        AnnotationDeclBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        AnnotationDeclBuilder setName(schemarise.alfa.runtime.model.UdtVersionedName v);

        schemarise.alfa.runtime.model.UdtVersionedName getName();

        AnnotationDeclBuilder setChecksum(java.lang.String v);

        java.lang.String getChecksum();

        AnnotationDeclBuilder addModifiers(schemarise.alfa.runtime.model.ModifierType e);

        AnnotationDeclBuilder addAllModifiers(
                java.util.Set<schemarise.alfa.runtime.model.ModifierType> all);

        java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers();

        AnnotationDeclBuilder setSource(
                schemarise.alfa.runtime.model.Union__ModelBaseNode__Source v);

        schemarise.alfa.runtime.model.Union__ModelBaseNode__Source getSource();

        AnnotationDeclBuilder setReferencedInFieldTypeFrom(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        v);

        AnnotationDeclBuilder setReferencedInFieldTypeFrom(
                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                getReferencedInFieldTypeFrom();

        AnnotationDeclBuilder setIncludes(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> v);

        AnnotationDeclBuilder setIncludes(
                java.util.List<schemarise.alfa.runtime.model.UdtDataType> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> getIncludes();

        AnnotationDeclBuilder setScope(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> v);

        AnnotationDeclBuilder setScope(java.util.List<schemarise.alfa.runtime.model.UdtDataType> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> getScope();

        AnnotationDeclBuilder setIncludedFrom(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        v);

        AnnotationDeclBuilder setIncludedFrom(
                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                getIncludedFrom();

        AnnotationDeclBuilder setModelId(java.util.Optional<java.lang.String> v);

        AnnotationDeclBuilder setModelId(java.lang.String v);

        java.util.Optional<java.lang.String> getModelId();

        AnnotationDeclBuilder putAllFields(
                java.lang.String k, schemarise.alfa.runtime.model.Field v);

        AnnotationDeclBuilder putAllAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getAllFields();

        AnnotationDeclBuilder setExtends(
                java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> v);

        AnnotationDeclBuilder setExtends(schemarise.alfa.runtime.model.UdtDataType v);

        java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> getExtends();

        AnnotationDeclBuilder addLocalFieldNames(java.lang.String e);

        AnnotationDeclBuilder addAllLocalFieldNames(java.util.List<java.lang.String> all);

        java.util.List<java.lang.String> getLocalFieldNames();

        AnnotationDeclBuilder setInheritedFields(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                        v);

        AnnotationDeclBuilder setInheritedFields(
                java.util.List<schemarise.alfa.runtime.model.InheritedFields> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                getInheritedFields();

        AnnotationDeclBuilder setIsSynthetic(boolean v);

        boolean getIsSynthetic();

        AnnotationDeclBuilder setAsserts(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> v);

        AnnotationDeclBuilder setAsserts(java.util.List<schemarise.alfa.runtime.model.Assert> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> getAsserts();

        AnnotationDeclBuilder setLinkages(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> v);

        AnnotationDeclBuilder setLinkages(java.util.List<schemarise.alfa.runtime.model.Linkage> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> getLinkages();

        AnnotationDeclBuilder addTargets(schemarise.alfa.runtime.model.UdtMetaType e);

        AnnotationDeclBuilder addAllTargets(
                java.util.List<schemarise.alfa.runtime.model.UdtMetaType> all);

        java.util.List<schemarise.alfa.runtime.model.UdtMetaType> getTargets();

        AnnotationDeclBuilder addReferencedFromUdts(
                schemarise.alfa.runtime.model.UdtVersionedName e);

        AnnotationDeclBuilder addAllReferencedFromUdts(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all);

        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> getReferencedFromUdts();

        AnnotationDeclBuilder putReferencedFromUdtAttribs(
                schemarise.alfa.runtime.model.UdtVersionedName k,
                java.util.List<java.lang.String> v);

        AnnotationDeclBuilder putAllReferencedFromUdtAttribs(
                java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>
                        all);

        java.util.Map<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        java.util.List<java.lang.String>>
                getReferencedFromUdtAttribs();

        AnnotationDecl build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _AnnotationDeclBuilderImpl extends _AnnotationDecl__Base__
            implements AnnotationDeclBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _AnnotationDeclBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _AnnotationDeclBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(22);
            __missingFields.set(0, 22);
            setExtendedAttribs(java.util.Optional.empty());
            setAnnotations(java.util.Optional.empty());
            setDoc(java.util.Optional.empty());
            setReferencedInFieldTypeFrom(java.util.Optional.empty());
            setIncludes(java.util.Optional.empty());
            setScope(java.util.Optional.empty());
            setIncludedFrom(java.util.Optional.empty());
            setModelId(java.util.Optional.empty());
            setExtends(java.util.Optional.empty());
            setInheritedFields(java.util.Optional.empty());
            setAsserts(java.util.Optional.empty());
            setLinkages(java.util.Optional.empty());
            setModifiers(new java.util.LinkedHashSet<schemarise.alfa.runtime.model.ModifierType>());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor.INSTANCE;
        }

        public AnnotationDeclBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public AnnotationDeclBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public AnnotationDeclBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Annotations", v);
            this._annotations = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ANNOTATIONS);
            return this;
        }

        public AnnotationDeclBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v) {
            this._annotations = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ANNOTATIONS);
            return this;
        }

        public AnnotationDeclBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public AnnotationDeclBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_DOC);
            return this;
        }

        public AnnotationDeclBuilder setName(schemarise.alfa.runtime.model.UdtVersionedName v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_NAME);
            return this;
        }

        public AnnotationDeclBuilder setChecksum(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Checksum", v);
            this._checksum = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_CHECKSUM);
            return this;
        }

        private void createModifiers() {
            this._modifiers = new java.util.LinkedHashSet<>();
        }

        public AnnotationDeclBuilder addModifiers(schemarise.alfa.runtime.model.ModifierType e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Modifiers", e);
            if (this._modifiers == null) createModifiers();
            this._modifiers.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_MODIFIERS);
            return this;
        }

        public AnnotationDeclBuilder addAllModifiers(
                java.util.Set<schemarise.alfa.runtime.model.ModifierType> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Modifiers", all);
            if (this._modifiers == null) createModifiers();
            this._modifiers.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_MODIFIERS);
            return this;
        }

        private AnnotationDeclBuilder setModifiers(
                java.util.Set<schemarise.alfa.runtime.model.ModifierType> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Modifiers", all);
            this._modifiers = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_MODIFIERS);
            return this;
        }

        public AnnotationDeclBuilder setSource(
                schemarise.alfa.runtime.model.Union__ModelBaseNode__Source v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Source", v);
            this._source = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_SOURCE);
            return this;
        }

        public AnnotationDeclBuilder setReferencedInFieldTypeFrom(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedInFieldTypeFrom", v);
            this._referencedInFieldTypeFrom = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDINFIELDTYPEFROM);
            return this;
        }

        public AnnotationDeclBuilder setReferencedInFieldTypeFrom(
                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName> v) {
            this._referencedInFieldTypeFrom = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDINFIELDTYPEFROM);
            return this;
        }

        public AnnotationDeclBuilder setIncludes(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Includes", v);
            this._includes = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INCLUDES);
            return this;
        }

        public AnnotationDeclBuilder setIncludes(
                java.util.List<schemarise.alfa.runtime.model.UdtDataType> v) {
            this._includes = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INCLUDES);
            return this;
        }

        public AnnotationDeclBuilder setScope(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Scope", v);
            this._scope = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_SCOPE);
            return this;
        }

        public AnnotationDeclBuilder setScope(
                java.util.List<schemarise.alfa.runtime.model.UdtDataType> v) {
            this._scope = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_SCOPE);
            return this;
        }

        public AnnotationDeclBuilder setIncludedFrom(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IncludedFrom", v);
            this._includedFrom = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INCLUDEDFROM);
            return this;
        }

        public AnnotationDeclBuilder setIncludedFrom(
                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName> v) {
            this._includedFrom = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INCLUDEDFROM);
            return this;
        }

        public AnnotationDeclBuilder setModelId(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ModelId", v);
            this._modelId = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_MODELID);
            return this;
        }

        public AnnotationDeclBuilder setModelId(java.lang.String v) {
            this._modelId = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_MODELID);
            return this;
        }

        private void createAllFields() {
            this._allFields = new java.util.LinkedHashMap<>();
        }

        public AnnotationDeclBuilder putAllFields(
                java.lang.String k, schemarise.alfa.runtime.model.Field v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key AllFields", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value AllFields", v);
            if (this._allFields == null) createAllFields();
            this._allFields.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ALLFIELDS);
            return this;
        }

        public AnnotationDeclBuilder putAllAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AllFields", all);
            if (this._allFields == null) createAllFields();
            this._allFields.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ALLFIELDS);
            return this;
        }

        private AnnotationDeclBuilder setAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AllFields", all);
            _allFields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ALLFIELDS);
            return this;
        }

        public AnnotationDeclBuilder setExtends(
                java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Extends", v);
            this._extends = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_EXTENDS);
            return this;
        }

        public AnnotationDeclBuilder setExtends(schemarise.alfa.runtime.model.UdtDataType v) {
            this._extends = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_EXTENDS);
            return this;
        }

        private void createLocalFieldNames() {
            this._localFieldNames = new java.util.ArrayList<>();
        }

        public AnnotationDeclBuilder addLocalFieldNames(java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LocalFieldNames", e);
            if (this._localFieldNames == null) createLocalFieldNames();
            this._localFieldNames.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LOCALFIELDNAMES);
            return this;
        }

        public AnnotationDeclBuilder setLocalFieldNames(int index, java.lang.String e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LocalFieldNames", e);
            if (this._localFieldNames == null) createLocalFieldNames();
            this._localFieldNames.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LOCALFIELDNAMES);
            return this;
        }

        public AnnotationDeclBuilder addAllLocalFieldNames(java.util.List<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LocalFieldNames", all);
            if (this._localFieldNames == null) createLocalFieldNames();
            this._localFieldNames.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LOCALFIELDNAMES);
            return this;
        }

        private AnnotationDeclBuilder setLocalFieldNames(java.util.List<java.lang.String> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("LocalFieldNames", all);
            this._localFieldNames = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LOCALFIELDNAMES);
            return this;
        }

        public AnnotationDeclBuilder setInheritedFields(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("InheritedFields", v);
            this._inheritedFields = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INHERITEDFIELDS);
            return this;
        }

        public AnnotationDeclBuilder setInheritedFields(
                java.util.List<schemarise.alfa.runtime.model.InheritedFields> v) {
            this._inheritedFields = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_INHERITEDFIELDS);
            return this;
        }

        public AnnotationDeclBuilder setIsSynthetic(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsSynthetic", v);
            this._isSynthetic = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ISSYNTHETIC);
            return this;
        }

        public AnnotationDeclBuilder setAsserts(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Asserts", v);
            this._asserts = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ASSERTS);
            return this;
        }

        public AnnotationDeclBuilder setAsserts(
                java.util.List<schemarise.alfa.runtime.model.Assert> v) {
            this._asserts = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_ASSERTS);
            return this;
        }

        public AnnotationDeclBuilder setLinkages(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Linkages", v);
            this._linkages = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LINKAGES);
            return this;
        }

        public AnnotationDeclBuilder setLinkages(
                java.util.List<schemarise.alfa.runtime.model.Linkage> v) {
            this._linkages = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_LINKAGES);
            return this;
        }

        private void createTargets() {
            this._targets = new java.util.ArrayList<>();
        }

        public AnnotationDeclBuilder addTargets(schemarise.alfa.runtime.model.UdtMetaType e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Targets", e);
            if (this._targets == null) createTargets();
            this._targets.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_TARGETS);
            return this;
        }

        public AnnotationDeclBuilder setTargets(
                int index, schemarise.alfa.runtime.model.UdtMetaType e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Targets", e);
            if (this._targets == null) createTargets();
            this._targets.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_TARGETS);
            return this;
        }

        public AnnotationDeclBuilder addAllTargets(
                java.util.List<schemarise.alfa.runtime.model.UdtMetaType> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Targets", all);
            if (this._targets == null) createTargets();
            this._targets.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_TARGETS);
            return this;
        }

        private AnnotationDeclBuilder setTargets(
                java.util.List<schemarise.alfa.runtime.model.UdtMetaType> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Targets", all);
            this._targets = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_TARGETS);
            return this;
        }

        private void createReferencedFromUdts() {
            this._referencedFromUdts = new java.util.LinkedHashSet<>();
        }

        public AnnotationDeclBuilder addReferencedFromUdts(
                schemarise.alfa.runtime.model.UdtVersionedName e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedFromUdts", e);
            if (this._referencedFromUdts == null) createReferencedFromUdts();
            this._referencedFromUdts.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTS);
            return this;
        }

        public AnnotationDeclBuilder addAllReferencedFromUdts(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedFromUdts", all);
            if (this._referencedFromUdts == null) createReferencedFromUdts();
            this._referencedFromUdts.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTS);
            return this;
        }

        private AnnotationDeclBuilder setReferencedFromUdts(
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedFromUdts", all);
            this._referencedFromUdts = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTS);
            return this;
        }

        private void createReferencedFromUdtAttribs() {
            this._referencedFromUdtAttribs = new java.util.LinkedHashMap<>();
        }

        public AnnotationDeclBuilder putReferencedFromUdtAttribs(
                schemarise.alfa.runtime.model.UdtVersionedName k,
                java.util.List<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key ReferencedFromUdtAttribs", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value ReferencedFromUdtAttribs", v);
            if (this._referencedFromUdtAttribs == null) createReferencedFromUdtAttribs();
            this._referencedFromUdtAttribs.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTATTRIBS);
            return this;
        }

        public AnnotationDeclBuilder putAllReferencedFromUdtAttribs(
                java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedFromUdtAttribs", all);
            if (this._referencedFromUdtAttribs == null) createReferencedFromUdtAttribs();
            this._referencedFromUdtAttribs.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTATTRIBS);
            return this;
        }

        private AnnotationDeclBuilder setReferencedFromUdtAttribs(
                java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ReferencedFromUdtAttribs", all);
            _referencedFromUdtAttribs = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                            .FIELD_ID_REFERENCEDFROMUDTATTRIBS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "Annotations":
                    setAnnotations(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>)
                                    val);
                    break;
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "Name":
                    setName((schemarise.alfa.runtime.model.UdtVersionedName) val);
                    break;
                case "Checksum":
                    setChecksum((java.lang.String) val);
                    break;
                case "Modifiers":
                    setModifiers((java.util.Set<schemarise.alfa.runtime.model.ModifierType>) val);
                    break;
                case "Source":
                    setSource((schemarise.alfa.runtime.model.Union__ModelBaseNode__Source) val);
                    break;
                case "ReferencedInFieldTypeFrom":
                    setReferencedInFieldTypeFrom(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model
                                                            .UdtVersionedName>>)
                                    val);
                    break;
                case "Includes":
                    setIncludes(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>>)
                                    val);
                    break;
                case "Scope":
                    setScope(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>>)
                                    val);
                    break;
                case "IncludedFrom":
                    setIncludedFrom(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model
                                                            .UdtVersionedName>>)
                                    val);
                    break;
                case "ModelId":
                    setModelId((java.util.Optional<java.lang.String>) val);
                    break;
                case "AllFields":
                    setAllFields(
                            (java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>)
                                    val);
                    break;
                case "Extends":
                    setExtends((java.util.Optional<schemarise.alfa.runtime.model.UdtDataType>) val);
                    break;
                case "LocalFieldNames":
                    setLocalFieldNames((java.util.List<java.lang.String>) val);
                    break;
                case "InheritedFields":
                    setInheritedFields(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.InheritedFields>>)
                                    val);
                    break;
                case "IsSynthetic":
                    setIsSynthetic((boolean) val);
                    break;
                case "Asserts":
                    setAsserts(
                            (java.util.Optional<
                                            java.util.List<schemarise.alfa.runtime.model.Assert>>)
                                    val);
                    break;
                case "Linkages":
                    setLinkages(
                            (java.util.Optional<
                                            java.util.List<schemarise.alfa.runtime.model.Linkage>>)
                                    val);
                    break;
                case "Targets":
                    setTargets((java.util.List<schemarise.alfa.runtime.model.UdtMetaType>) val);
                    break;
                case "ReferencedFromUdts":
                    setReferencedFromUdts(
                            (java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>) val);
                    break;
                case "ReferencedFromUdtAttribs":
                    setReferencedFromUdtAttribs(
                            (java.util.Map<
                                            schemarise.alfa.runtime.model.UdtVersionedName,
                                            java.util.List<java.lang.String>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public AnnotationDecl build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    22,
                    schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor.INSTANCE);

            AnnotationDecl obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (AnnotationDecl)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _extendedAttribs,
                                                _annotations,
                                                _doc,
                                                _name,
                                                _checksum,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._modifiersSupplierInner1,
                                                                _modifiers),
                                                _source,
                                                _referencedInFieldTypeFrom,
                                                _includes,
                                                _scope,
                                                _includedFrom,
                                                _modelId,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._allFieldsSupplierInner1,
                                                                _allFields),
                                                _extends,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._localFieldNamesSupplierInner1,
                                                                _localFieldNames),
                                                _inheritedFields,
                                                _isSynthetic,
                                                _asserts,
                                                _linkages,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._targetsSupplierInner1,
                                                                _targets),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableSet(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._referencedFromUdtsSupplierInner1,
                                                                _referencedFromUdts),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .AnnotationDecl
                                                                        .AnnotationDeclDescriptor
                                                                        .INSTANCE
                                                                        ._referencedFromUdtAttribsSupplierInner1,
                                                                _referencedFromUdtAttribs));
            else
                obj =
                        new schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclConcrete(
                                _extendedAttribs,
                                _annotations,
                                _doc,
                                _name,
                                _checksum,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._modifiersSupplierInner1,
                                        _modifiers),
                                _source,
                                _referencedInFieldTypeFrom,
                                _includes,
                                _scope,
                                _includedFrom,
                                _modelId,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._allFieldsSupplierInner1,
                                        _allFields),
                                _extends,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._localFieldNamesSupplierInner1,
                                        _localFieldNames),
                                _inheritedFields,
                                _isSynthetic,
                                _asserts,
                                _linkages,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._targetsSupplierInner1,
                                        _targets),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableSet(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._referencedFromUdtsSupplierInner1,
                                        _referencedFromUdts),
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.AnnotationDecl
                                                .AnnotationDeclDescriptor.INSTANCE
                                                ._referencedFromUdtAttribsSupplierInner1,
                                        _referencedFromUdtAttribs));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AnnotationDecl",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "Annotations",
                        "Doc",
                        "Name",
                        "Checksum",
                        "Modifiers",
                        "Source",
                        "ReferencedInFieldTypeFrom",
                        "Includes",
                        "Scope",
                        "IncludedFrom",
                        "ModelId",
                        "AllFields",
                        "Extends",
                        "LocalFieldNames",
                        "InheritedFields",
                        "IsSynthetic",
                        "Asserts",
                        "Linkages",
                        "Targets",
                        "ReferencedFromUdts",
                        "ReferencedFromUdtAttribs"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _annotations,
                        _doc,
                        _name,
                        _checksum,
                        _modifiers,
                        _source,
                        _referencedInFieldTypeFrom,
                        _includes,
                        _scope,
                        _includedFrom,
                        _modelId,
                        _allFields,
                        _extends,
                        _localFieldNames,
                        _inheritedFields,
                        _isSynthetic,
                        _asserts,
                        _linkages,
                        _targets,
                        _referencedFromUdts,
                        _referencedFromUdtAttribs
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _AnnotationDeclConcrete extends _AnnotationDecl__Base__ implements AnnotationDecl {

        private _AnnotationDeclConcrete() {
            super();
        }

        private _AnnotationDeclConcrete(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                schemarise.alfa.runtime.model.UdtVersionedName _name,
                java.lang.String _checksum,
                java.util.Set<schemarise.alfa.runtime.model.ModifierType> _modifiers,
                schemarise.alfa.runtime.model.Union__ModelBaseNode__Source _source,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        _referencedInFieldTypeFrom,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                        _includes,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                        _scope,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        _includedFrom,
                java.util.Optional<java.lang.String> _modelId,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _allFields,
                java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> _extends,
                java.util.List<java.lang.String> _localFieldNames,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                        _inheritedFields,
                boolean _isSynthetic,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> _asserts,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> _linkages,
                java.util.List<schemarise.alfa.runtime.model.UdtMetaType> _targets,
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _referencedFromUdts,
                java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>
                        _referencedFromUdtAttribs) {
            super(
                    _extendedAttribs,
                    _annotations,
                    _doc,
                    _name,
                    _checksum,
                    _modifiers,
                    _source,
                    _referencedInFieldTypeFrom,
                    _includes,
                    _scope,
                    _includedFrom,
                    _modelId,
                    _allFields,
                    _extends,
                    _localFieldNames,
                    _inheritedFields,
                    _isSynthetic,
                    _asserts,
                    _linkages,
                    _targets,
                    _referencedFromUdts,
                    _referencedFromUdtAttribs);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _AnnotationDecl__Base__ {
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                _annotations;
        public java.util.Optional<java.lang.String> _doc;
        public schemarise.alfa.runtime.model.UdtVersionedName _name;
        public java.lang.String _checksum;
        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> _modifiers;
        public schemarise.alfa.runtime.model.Union__ModelBaseNode__Source _source;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                _referencedInFieldTypeFrom;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                _includes;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>> _scope;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                _includedFrom;
        public java.util.Optional<java.lang.String> _modelId;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _allFields;
        public java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> _extends;
        public java.util.List<java.lang.String> _localFieldNames;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                _inheritedFields;
        public boolean _isSynthetic;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> _asserts;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> _linkages;
        public java.util.List<schemarise.alfa.runtime.model.UdtMetaType> _targets;
        public java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _referencedFromUdts;
        public java.util.Map<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        java.util.List<java.lang.String>>
                _referencedFromUdtAttribs;

        public _AnnotationDecl__Base__() {}

        public _AnnotationDecl__Base__(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                schemarise.alfa.runtime.model.UdtVersionedName _name,
                java.lang.String _checksum,
                java.util.Set<schemarise.alfa.runtime.model.ModifierType> _modifiers,
                schemarise.alfa.runtime.model.Union__ModelBaseNode__Source _source,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        _referencedInFieldTypeFrom,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                        _includes,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                        _scope,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                        _includedFrom,
                java.util.Optional<java.lang.String> _modelId,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _allFields,
                java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> _extends,
                java.util.List<java.lang.String> _localFieldNames,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                        _inheritedFields,
                boolean _isSynthetic,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>> _asserts,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>> _linkages,
                java.util.List<schemarise.alfa.runtime.model.UdtMetaType> _targets,
                java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName> _referencedFromUdts,
                java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>
                        _referencedFromUdtAttribs) {
            this._extendedAttribs = _extendedAttribs;
            this._annotations = _annotations;
            this._doc = _doc;
            this._name = _name;
            this._checksum = _checksum;
            this._modifiers = _modifiers;
            this._source = _source;
            this._referencedInFieldTypeFrom = _referencedInFieldTypeFrom;
            this._includes = _includes;
            this._scope = _scope;
            this._includedFrom = _includedFrom;
            this._modelId = _modelId;
            this._allFields = _allFields;
            this._extends = _extends;
            this._localFieldNames = _localFieldNames;
            this._inheritedFields = _inheritedFields;
            this._isSynthetic = _isSynthetic;
            this._asserts = _asserts;
            this._linkages = _linkages;
            this._targets = _targets;
            this._referencedFromUdts = _referencedFromUdts;
            this._referencedFromUdtAttribs = _referencedFromUdtAttribs;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations() {
            return _annotations;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public schemarise.alfa.runtime.model.UdtVersionedName getName() {
            return _name;
        }

        public java.lang.String getChecksum() {
            return _checksum;
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return _modifiers;
        }

        public schemarise.alfa.runtime.model.Union__ModelBaseNode__Source getSource() {
            return _source;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                getReferencedInFieldTypeFrom() {
            return _referencedInFieldTypeFrom;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                getIncludes() {
            return _includes;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtDataType>>
                getScope() {
            return _scope;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>
                getIncludedFrom() {
            return _includedFrom;
        }

        public java.util.Optional<java.lang.String> getModelId() {
            return _modelId;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getAllFields() {
            return _allFields;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.UdtDataType> getExtends() {
            return _extends;
        }

        public java.util.List<java.lang.String> getLocalFieldNames() {
            return _localFieldNames;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.InheritedFields>>
                getInheritedFields() {
            return _inheritedFields;
        }

        public boolean getIsSynthetic() {
            return _isSynthetic;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>>
                getAsserts() {
            return _asserts;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>>
                getLinkages() {
            return _linkages;
        }

        public java.util.List<schemarise.alfa.runtime.model.UdtMetaType> getTargets() {
            return _targets;
        }

        public java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>
                getReferencedFromUdts() {
            return _referencedFromUdts;
        }

        public java.util.Map<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        java.util.List<java.lang.String>>
                getReferencedFromUdtAttribs() {
            return _referencedFromUdtAttribs;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _extendedAttribs,
                    _annotations,
                    _doc,
                    _name,
                    _checksum,
                    _modifiers,
                    _source,
                    _referencedInFieldTypeFrom,
                    _includes,
                    _scope,
                    _includedFrom,
                    _modelId,
                    _allFields,
                    _extends,
                    _localFieldNames,
                    _inheritedFields,
                    _isSynthetic,
                    _asserts,
                    _linkages,
                    _targets,
                    _referencedFromUdts,
                    _referencedFromUdtAttribs);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.AnnotationDecl",
                    new java.lang.String[] {
                        "ExtendedAttribs",
                        "Annotations",
                        "Doc",
                        "Name",
                        "Checksum",
                        "Modifiers",
                        "Source",
                        "ReferencedInFieldTypeFrom",
                        "Includes",
                        "Scope",
                        "IncludedFrom",
                        "ModelId",
                        "AllFields",
                        "Extends",
                        "LocalFieldNames",
                        "InheritedFields",
                        "IsSynthetic",
                        "Asserts",
                        "Linkages",
                        "Targets",
                        "ReferencedFromUdts",
                        "ReferencedFromUdtAttribs"
                    },
                    new java.lang.Object[] {
                        _extendedAttribs,
                        _annotations,
                        _doc,
                        _name,
                        _checksum,
                        _modifiers,
                        _source,
                        _referencedInFieldTypeFrom,
                        _includes,
                        _scope,
                        _includedFrom,
                        _modelId,
                        _allFields,
                        _extends,
                        _localFieldNames,
                        _inheritedFields,
                        _isSynthetic,
                        _asserts,
                        _linkages,
                        _targets,
                        _referencedFromUdts,
                        _referencedFromUdtAttribs
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclConcrete))
                return false;
            schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclConcrete rhs =
                    (schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclConcrete) o;
            return java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_annotations, rhs._annotations)
                    && java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_checksum, rhs._checksum)
                    && java.util.Objects.equals(_modifiers, rhs._modifiers)
                    && java.util.Objects.equals(_source, rhs._source)
                    && java.util.Objects.equals(
                            _referencedInFieldTypeFrom, rhs._referencedInFieldTypeFrom)
                    && java.util.Objects.equals(_includes, rhs._includes)
                    && java.util.Objects.equals(_scope, rhs._scope)
                    && java.util.Objects.equals(_includedFrom, rhs._includedFrom)
                    && java.util.Objects.equals(_modelId, rhs._modelId)
                    && java.util.Objects.equals(_allFields, rhs._allFields)
                    && java.util.Objects.equals(_extends, rhs._extends)
                    && java.util.Objects.equals(_localFieldNames, rhs._localFieldNames)
                    && java.util.Objects.equals(_inheritedFields, rhs._inheritedFields)
                    && _isSynthetic == rhs._isSynthetic
                    && java.util.Objects.equals(_asserts, rhs._asserts)
                    && java.util.Objects.equals(_linkages, rhs._linkages)
                    && java.util.Objects.equals(_targets, rhs._targets)
                    && java.util.Objects.equals(_referencedFromUdts, rhs._referencedFromUdts)
                    && java.util.Objects.equals(
                            _referencedFromUdtAttribs, rhs._referencedFromUdtAttribs);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "Annotations":
                    return _annotations;
                case "Doc":
                    return _doc;
                case "Name":
                    return _name;
                case "Checksum":
                    return _checksum;
                case "Modifiers":
                    return _modifiers;
                case "Source":
                    return _source;
                case "ReferencedInFieldTypeFrom":
                    return _referencedInFieldTypeFrom;
                case "Includes":
                    return _includes;
                case "Scope":
                    return _scope;
                case "IncludedFrom":
                    return _includedFrom;
                case "ModelId":
                    return _modelId;
                case "AllFields":
                    return _allFields;
                case "Extends":
                    return _extends;
                case "LocalFieldNames":
                    return _localFieldNames;
                case "InheritedFields":
                    return _inheritedFields;
                case "IsSynthetic":
                    return _isSynthetic;
                case "Asserts":
                    return _asserts;
                case "Linkages":
                    return _linkages;
                case "Targets":
                    return _targets;
                case "ReferencedFromUdts":
                    return _referencedFromUdts;
                case "ReferencedFromUdtAttribs":
                    return _referencedFromUdtAttribs;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getAnnotations().isPresent()) {
                getAnnotations()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue()
                                            .entrySet()
                                            .stream()
                                            .filter(e1 -> e1.getValue() != null)
                                            .forEach(
                                                    e1 -> {
                                                        e1.getValue().validate(__builderConfig);
                                                    });
                                });
            }

            getName().validate(__builderConfig);

            getModifiers()
                    .forEach(
                            e0 -> {
                                e0.validate(__builderConfig);
                            });

            if (getReferencedInFieldTypeFrom().isPresent()) {
                java.util.stream.IntStream.range(0, getReferencedInFieldTypeFrom().get().size())
                        .forEach(
                                e0 -> {
                                    getReferencedInFieldTypeFrom()
                                            .get()
                                            .get(e0)
                                            .validate(__builderConfig);
                                });
            }
            if (getIncludes().isPresent()) {
                java.util.stream.IntStream.range(0, getIncludes().get().size())
                        .forEach(
                                e0 -> {
                                    getIncludes().get().get(e0).validate(__builderConfig);
                                });
            }
            if (getScope().isPresent()) {
                java.util.stream.IntStream.range(0, getScope().get().size())
                        .forEach(
                                e0 -> {
                                    getScope().get().get(e0).validate(__builderConfig);
                                });
            }
            if (getIncludedFrom().isPresent()) {
                java.util.stream.IntStream.range(0, getIncludedFrom().get().size())
                        .forEach(
                                e0 -> {
                                    getIncludedFrom().get().get(e0).validate(__builderConfig);
                                });
            }

            getAllFields()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            if (getExtends().isPresent()) {
                getExtends().get().validate(__builderConfig);
            }

            if (getInheritedFields().isPresent()) {
                java.util.stream.IntStream.range(0, getInheritedFields().get().size())
                        .forEach(
                                e0 -> {
                                    getInheritedFields().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getAsserts().isPresent()) {
                java.util.stream.IntStream.range(0, getAsserts().get().size())
                        .forEach(
                                e0 -> {
                                    getAsserts().get().get(e0).validate(__builderConfig);
                                });
            }
            if (getLinkages().isPresent()) {
                java.util.stream.IntStream.range(0, getLinkages().get().size())
                        .forEach(
                                e0 -> {
                                    getLinkages().get().get(e0).validate(__builderConfig);
                                });
            }
            java.util.stream.IntStream.range(0, getTargets().size())
                    .forEach(
                            e0 -> {
                                getTargets().get(e0).validate(__builderConfig);
                            });

            getReferencedFromUdts()
                    .forEach(
                            e0 -> {
                                e0.validate(__builderConfig);
                            });

            getReferencedFromUdtAttribs()
                    .keySet()
                    .forEach(
                            e0 -> {
                                e0.validate(__builderConfig);
                            });
            getReferencedFromUdtAttribs()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                com.schemarise.alfa.runtime.utils.Utils.validateCollectionSize(
                                        __builderConfig.getAssertListener(),
                                        () ->
                                                new com.schemarise.alfa.runtime.utils.PathCreator(
                                                                "ReferencedFromUdtAttribs")
                                                        .mapEntryElement(e0),
                                        e0.getValue(),
                                        1,
                                        null);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class AnnotationDeclDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.AnnotationDecl";
        public static schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.AnnotationDecl.AnnotationDeclDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXTENDEDATTRIBS = 0;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_ANNOTATIONS = 1;
        public static final String FIELD_ANNOTATIONS = "Annotations";

        public static final short FIELD_ID_DOC = 2;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_NAME = 3;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_CHECKSUM = 4;
        public static final String FIELD_CHECKSUM = "Checksum";

        public static final short FIELD_ID_MODIFIERS = 5;
        public static final String FIELD_MODIFIERS = "Modifiers";

        public static final short FIELD_ID_SOURCE = 6;
        public static final String FIELD_SOURCE = "Source";

        public static final short FIELD_ID_REFERENCEDINFIELDTYPEFROM = 7;
        public static final String FIELD_REFERENCEDINFIELDTYPEFROM = "ReferencedInFieldTypeFrom";

        public static final short FIELD_ID_INCLUDES = 8;
        public static final String FIELD_INCLUDES = "Includes";

        public static final short FIELD_ID_SCOPE = 9;
        public static final String FIELD_SCOPE = "Scope";

        public static final short FIELD_ID_INCLUDEDFROM = 10;
        public static final String FIELD_INCLUDEDFROM = "IncludedFrom";

        public static final short FIELD_ID_MODELID = 11;
        public static final String FIELD_MODELID = "ModelId";

        public static final short FIELD_ID_ALLFIELDS = 12;
        public static final String FIELD_ALLFIELDS = "AllFields";

        public static final short FIELD_ID_EXTENDS = 13;
        public static final String FIELD_EXTENDS = "Extends";

        public static final short FIELD_ID_LOCALFIELDNAMES = 14;
        public static final String FIELD_LOCALFIELDNAMES = "LocalFieldNames";

        public static final short FIELD_ID_INHERITEDFIELDS = 15;
        public static final String FIELD_INHERITEDFIELDS = "InheritedFields";

        public static final short FIELD_ID_ISSYNTHETIC = 16;
        public static final String FIELD_ISSYNTHETIC = "IsSynthetic";

        public static final short FIELD_ID_ASSERTS = 17;
        public static final String FIELD_ASSERTS = "Asserts";

        public static final short FIELD_ID_LINKAGES = 18;
        public static final String FIELD_LINKAGES = "Linkages";

        public static final short FIELD_ID_TARGETS = 19;
        public static final String FIELD_TARGETS = "Targets";

        public static final short FIELD_ID_REFERENCEDFROMUDTS = 20;
        public static final String FIELD_REFERENCEDFROMUDTS = "ReferencedFromUdts";

        public static final short FIELD_ID_REFERENCEDFROMUDTATTRIBS = 21;
        public static final String FIELD_REFERENCEDFROMUDTATTRIBS = "ReferencedFromUdtAttribs";

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _annotationsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("AnnotationName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.MapDataType.builder()
                                                        .setKeyType(
                                                                schemarise.alfa.runtime.model
                                                                        .ScalarDataType.builder()
                                                                        .setScalarType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .ScalarType
                                                                                        .stringType)
                                                                        .build())
                                                        .setValueType(
                                                                schemarise.alfa.runtime.model.UdtDataType
                                                                        .builder()
                                                                        .setFullyQualifiedName(
                                                                                "schemarise.alfa.runtime.model.IExpression")
                                                                        .setUdtType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .UdtMetaType
                                                                                        .traitType)
                                                                        .build())
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _nameType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtVersionedName")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _checksumType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _modifiersType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.ModifierType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UnionDataType _sourceType =
                schemarise.alfa.runtime.model.UnionDataType.builder()
                        .setSynthFullyQualifiedName(
                                "schemarise.alfa.runtime.model.Union__ModelBaseNode__Source")
                        .setUnionType(schemarise.alfa.runtime.model.UnionType.Tagged)
                        .
                        // setSyntheticFieldNames(false).
                        putAllFields(
                                schemarise.alfa.runtime.model.Union__ModelBaseNode__Source
                                        .Union__ModelBaseNode__SourceDescriptor.INSTANCE
                                        .getAllFieldsMeta()
                                        .entrySet()
                                        .stream()
                                        .collect(
                                                java.util.stream.Collectors.toMap(
                                                        e -> e.getKey(),
                                                        e ->
                                                                schemarise.alfa.runtime.model.Field
                                                                        .builder()
                                                                        .setName(e.getKey())
                                                                        .setDataType(
                                                                                e.getValue()
                                                                                        .getDataType())
                                                                        .build())))
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _referencedInFieldTypeFromType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _includesType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.UdtDataType")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _scopeType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.UdtDataType")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _includedFromType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _modelIdType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _allFieldsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Field")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _extendsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtDataType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _localFieldNamesType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _inheritedFieldsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.InheritedFields")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _isSyntheticType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _assertsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.Assert")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _linkagesType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.Linkage")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _targetsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtMetaType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.SetDataType _referencedFromUdtsType =
                schemarise.alfa.runtime.model.SetDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _referencedFromUdtAttribsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.UdtVersionedName")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setSizeMin(java.util.Optional.of(1))
                                        .build())
                        .setValueName(java.util.Optional.of("AttribNames"))
                        .build();

        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>>
                _annotationsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>
                                    _annotationsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _annotationsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _annotationsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>>
                                                        _annotationsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    java.lang
                                                                                            .String>
                                                                            _annotationsConsumerInner4Key =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .stringValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()));
                                                                                    };
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression>
                                                                            _annotationsConsumerInner4Val =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .objectValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()));
                                                                                    };
                                                                    return supplierInner3.mapValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            _annotationsConsumerInner4Key,
                                                                            _annotationsConsumerInner4Val);
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        _annotationsConsumerInner3Key,
                                                        _annotationsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    _annotationsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _annotationsConsumer =
                        (builder, supplier) -> {
                            builder.setAnnotations(_annotationsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtVersionedName>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _checksumConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _checksumType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _checksumConsumer =
                        (builder, supplier) -> {
                            builder.setChecksum(_checksumConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< schemarise.alfa.runtime.model.ModifierType > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Set<schemarise.alfa.runtime.model.ModifierType>>
                _modifiersConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.ModifierType>
                                    _modifiersConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _modifiersType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType) _modifiersType),
                                    _modifiersConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _modifiersConsumer =
                        (builder, supplier) -> {
                            builder.addAllModifiers(_modifiersConsumerInner1.apply(supplier));
                        };
        /* -- Consumer union< loc : schemarise.alfa.runtime.model.Location, Contents : string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.Union__ModelBaseNode__Source>
                _sourceConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.unionValue(
                                    ((schemarise.alfa.runtime.model.UnionDataType) _sourceType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceConsumer =
                        (builder, supplier) -> {
                            builder.setSource(_sourceConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtVersionedName > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>>
                _referencedInFieldTypeFromConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtVersionedName>>
                                    _referencedInFieldTypeFromConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .UdtVersionedName>
                                                        _referencedInFieldTypeFromConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _referencedInFieldTypeFromType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _referencedInFieldTypeFromType)
                                                                        .getComponentType()),
                                                        _referencedInFieldTypeFromConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _referencedInFieldTypeFromType),
                                    _referencedInFieldTypeFromConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _referencedInFieldTypeFromConsumer =
                        (builder, supplier) -> {
                            builder.setReferencedInFieldTypeFrom(
                                    _referencedInFieldTypeFromConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtDataType > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtDataType>>>
                _includesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>>
                                    _includesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .UdtDataType>
                                                        _includesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _includesType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _includesType)
                                                                        .getComponentType()),
                                                        _includesConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _includesType),
                                    _includesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _includesConsumer =
                        (builder, supplier) -> {
                            builder.setIncludes(_includesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtDataType > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtDataType>>>
                _scopeConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>>
                                    _scopeConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .UdtDataType>
                                                        _scopeConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _scopeType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _scopeType)
                                                                        .getComponentType()),
                                                        _scopeConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _scopeType),
                                    _scopeConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _scopeConsumer =
                        (builder, supplier) -> {
                            builder.setScope(_scopeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtVersionedName > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>>
                _includedFromConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtVersionedName>>
                                    _includedFromConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .UdtVersionedName>
                                                        _includedFromConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _includedFromType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _includedFromType)
                                                                        .getComponentType()),
                                                        _includedFromConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _includedFromType),
                                    _includedFromConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _includedFromConsumer =
                        (builder, supplier) -> {
                            builder.setIncludedFrom(_includedFromConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _modelIdConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _modelIdConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _modelIdType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _modelIdType),
                                    _modelIdConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _modelIdConsumer =
                        (builder, supplier) -> {
                            builder.setModelId(_modelIdConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>>
                _allFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _allFieldsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _allFieldsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Field>
                                    _allFieldsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _allFieldsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _allFieldsType),
                                    _allFieldsConsumerInner2Key,
                                    _allFieldsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _allFieldsConsumer =
                        (builder, supplier) -> {
                            builder.putAllAllFields(_allFieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtDataType ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.UdtDataType>>
                _extendsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtDataType>
                                    _extendsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _extendsType),
                                    _extendsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendsConsumer =
                        (builder, supplier) -> {
                            builder.setExtends(_extendsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< string > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.List<java.lang.String>>
                _localFieldNamesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _localFieldNamesConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _localFieldNamesType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _localFieldNamesType),
                                    _localFieldNamesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _localFieldNamesConsumer =
                        (builder, supplier) -> {
                            builder.addAllLocalFieldNames(
                                    _localFieldNamesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.InheritedFields > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.InheritedFields>>>
                _inheritedFieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.InheritedFields>>
                                    _inheritedFieldsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .InheritedFields>
                                                        _inheritedFieldsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _inheritedFieldsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _inheritedFieldsType)
                                                                        .getComponentType()),
                                                        _inheritedFieldsConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _inheritedFieldsType),
                                    _inheritedFieldsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _inheritedFieldsConsumer =
                        (builder, supplier) -> {
                            builder.setInheritedFields(
                                    _inheritedFieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _isSyntheticConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isSyntheticType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isSyntheticConsumer =
                        (builder, supplier) -> {
                            builder.setIsSynthetic(_isSyntheticConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.Assert > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>>>
                _assertsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<schemarise.alfa.runtime.model.Assert>>
                                    _assertsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .Assert>
                                                        _assertsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _assertsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _assertsType)
                                                                        .getComponentType()),
                                                        _assertsConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _assertsType),
                                    _assertsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _assertsConsumer =
                        (builder, supplier) -> {
                            builder.setAsserts(_assertsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.Linkage > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>>>
                _linkagesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<schemarise.alfa.runtime.model.Linkage>>
                                    _linkagesConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model
                                                                        .Linkage>
                                                        _linkagesConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _linkagesType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _linkagesType)
                                                                        .getComponentType()),
                                                        _linkagesConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _linkagesType),
                                    _linkagesConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _linkagesConsumer =
                        (builder, supplier) -> {
                            builder.setLinkages(_linkagesConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.UdtMetaType > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.UdtMetaType>>
                _targetsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtMetaType>
                                    _targetsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _targetsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _targetsType),
                                    _targetsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _targetsConsumer =
                        (builder, supplier) -> {
                            builder.addAllTargets(_targetsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer set< schemarise.alfa.runtime.model.UdtVersionedName > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>>
                _referencedFromUdtsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtVersionedName>
                                    _referencedFromUdtsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _referencedFromUdtsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.setValue(
                                    ((schemarise.alfa.runtime.model.SetDataType)
                                            _referencedFromUdtsType),
                                    _referencedFromUdtsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _referencedFromUdtsConsumer =
                        (builder, supplier) -> {
                            builder.addAllReferencedFromUdts(
                                    _referencedFromUdtsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< schemarise.alfa.runtime.model.UdtVersionedName , AttribNames : list< string >(1,*) > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>>
                _referencedFromUdtAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.UdtVersionedName>
                                    _referencedFromUdtAttribsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _referencedFromUdtAttribsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<java.lang.String>>
                                    _referencedFromUdtAttribsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _referencedFromUdtAttribsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .MapDataType)
                                                                                                                            _referencedFromUdtAttribsType)
                                                                                                                    .getValueType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _referencedFromUdtAttribsType)
                                                                        .getValueType()),
                                                        _referencedFromUdtAttribsConsumerInner3);
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType)
                                            _referencedFromUdtAttribsType),
                                    _referencedFromUdtAttribsConsumerInner2Key,
                                    _referencedFromUdtAttribsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _referencedFromUdtAttribsConsumer =
                        (builder, supplier) -> {
                            builder.putAllReferencedFromUdtAttribs(
                                    _referencedFromUdtAttribsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _annotationsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    java.util.function.BiConsumer<
                                                                                    java.lang
                                                                                            .String,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Key =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    java.util.function.BiConsumer<
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Val =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3,
                                                                            _annotationsSupplierInner4Key,
                                                                            _annotationsSupplierInner4Val);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _annotationsSupplierInner3Key,
                                                        _annotationsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    pInner1,
                                    _annotationsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplier =
                        (p, consumer) -> {
                            _annotationsSupplierInner1.accept(p.getAnnotations(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtVersionedName -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtVersionedName,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _checksumSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _checksumType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _checksumSupplier =
                        (p, consumer) -> {
                            _checksumSupplierInner1.accept(p.getChecksum(), consumer);
                        };
        /* -- Supplier set< schemarise.alfa.runtime.model.ModifierType > -- */
        java.util.function.BiConsumer<
                        java.util.Set<schemarise.alfa.runtime.model.ModifierType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _modifiersSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.ModifierType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _modifiersSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _modifiersType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType) _modifiersType),
                                    pInner1,
                                    _modifiersSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _modifiersSupplier =
                        (p, consumer) -> {
                            _modifiersSupplierInner1.accept(p.getModifiers(), consumer);
                        };
        /* -- Supplier union< loc : schemarise.alfa.runtime.model.Location, Contents : string > -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Union__ModelBaseNode__Source,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UnionDataType) _sourceType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSupplier =
                        (p, consumer) -> {
                            _sourceSupplierInner1.accept(p.getSource(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtVersionedName > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedInFieldTypeFromSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtVersionedName>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _referencedInFieldTypeFromSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .UdtVersionedName,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _referencedInFieldTypeFromSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _referencedInFieldTypeFromType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _referencedInFieldTypeFromType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _referencedInFieldTypeFromSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _referencedInFieldTypeFromType),
                                    pInner1,
                                    _referencedInFieldTypeFromSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedInFieldTypeFromSupplier =
                        (p, consumer) -> {
                            _referencedInFieldTypeFromSupplierInner1.accept(
                                    p.getReferencedInFieldTypeFrom(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtDataType > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtDataType>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _includesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _includesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .UdtDataType,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _includesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _includesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _includesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _includesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _includesType),
                                    pInner1,
                                    _includesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _includesSupplier =
                        (p, consumer) -> {
                            _includesSupplierInner1.accept(p.getIncludes(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtDataType > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtDataType>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _scopeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtDataType>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _scopeSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .UdtDataType,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _scopeSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _scopeType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _scopeType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _scopeSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _scopeType),
                                    pInner1,
                                    _scopeSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _scopeSupplier =
                        (p, consumer) -> {
                            _scopeSupplierInner1.accept(p.getScope(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtVersionedName > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.UdtVersionedName>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _includedFromSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.UdtVersionedName>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _includedFromSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .UdtVersionedName,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _includedFromSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _includedFromType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _includedFromType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _includedFromSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _includedFromType),
                                    pInner1,
                                    _includedFromSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _includedFromSupplier =
                        (p, consumer) -> {
                            _includedFromSupplierInner1.accept(p.getIncludedFrom(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _modelIdSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _modelIdSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _modelIdType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _modelIdType),
                                    pInner1,
                                    _modelIdSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _modelIdSupplier =
                        (p, consumer) -> {
                            _modelIdSupplierInner1.accept(p.getModelId(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _allFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _allFieldsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _allFieldsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Field,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _allFieldsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _allFieldsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _allFieldsType),
                                    pInner1,
                                    _allFieldsSupplierInner2Key,
                                    _allFieldsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _allFieldsSupplier =
                        (p, consumer) -> {
                            _allFieldsSupplierInner1.accept(p.getAllFields(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtDataType ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.UdtDataType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtDataType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _extendsType),
                                    pInner1,
                                    _extendsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendsSupplier =
                        (p, consumer) -> {
                            _extendsSupplierInner1.accept(p.getExtends(), consumer);
                        };
        /* -- Supplier list< string > -- */
        java.util.function.BiConsumer<
                        java.util.List<java.lang.String>, com.schemarise.alfa.runtime.DataConsumer>
                _localFieldNamesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _localFieldNamesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _localFieldNamesType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _localFieldNamesType),
                                    pInner1,
                                    _localFieldNamesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _localFieldNamesSupplier =
                        (p, consumer) -> {
                            _localFieldNamesSupplierInner1.accept(p.getLocalFieldNames(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.InheritedFields > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.InheritedFields>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inheritedFieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.InheritedFields>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _inheritedFieldsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .InheritedFields,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _inheritedFieldsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _inheritedFieldsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _inheritedFieldsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _inheritedFieldsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _inheritedFieldsType),
                                    pInner1,
                                    _inheritedFieldsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inheritedFieldsSupplier =
                        (p, consumer) -> {
                            _inheritedFieldsSupplierInner1.accept(p.getInheritedFields(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _isSyntheticType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplier =
                        (p, consumer) -> {
                            _isSyntheticSupplierInner1.accept(p.getIsSynthetic(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.Assert > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Assert>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assertsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<schemarise.alfa.runtime.model.Assert>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _assertsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .Assert,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _assertsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _assertsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _assertsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _assertsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _assertsType),
                                    pInner1,
                                    _assertsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _assertsSupplier =
                        (p, consumer) -> {
                            _assertsSupplierInner1.accept(p.getAsserts(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.Linkage > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.Linkage>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _linkagesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<schemarise.alfa.runtime.model.Linkage>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _linkagesSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model
                                                                        .Linkage,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _linkagesSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _linkagesType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _linkagesType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _linkagesSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _linkagesType),
                                    pInner1,
                                    _linkagesSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _linkagesSupplier =
                        (p, consumer) -> {
                            _linkagesSupplierInner1.accept(p.getLinkages(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.UdtMetaType > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.UdtMetaType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtMetaType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _targetsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _targetsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _targetsType),
                                    pInner1,
                                    _targetsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetsSupplier =
                        (p, consumer) -> {
                            _targetsSupplierInner1.accept(p.getTargets(), consumer);
                        };
        /* -- Supplier set< schemarise.alfa.runtime.model.UdtVersionedName > -- */
        java.util.function.BiConsumer<
                        java.util.Set<schemarise.alfa.runtime.model.UdtVersionedName>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedFromUdtsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtVersionedName,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _referencedFromUdtsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .SetDataType)
                                                                                _referencedFromUdtsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.SetDataType)
                                            _referencedFromUdtsType),
                                    pInner1,
                                    _referencedFromUdtsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedFromUdtsSupplier =
                        (p, consumer) -> {
                            _referencedFromUdtsSupplierInner1.accept(
                                    p.getReferencedFromUdts(), consumer);
                        };
        /* -- Supplier map< schemarise.alfa.runtime.model.UdtVersionedName , AttribNames : list< string >(1,*) > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                schemarise.alfa.runtime.model.UdtVersionedName,
                                java.util.List<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedFromUdtAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.UdtVersionedName,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _referencedFromUdtAttribsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _referencedFromUdtAttribsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            java.util.List<java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _referencedFromUdtAttribsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _referencedFromUdtAttribsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .MapDataType)
                                                                                                                    _referencedFromUdtAttribsType)
                                                                                                            .getValueType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _referencedFromUdtAttribsType)
                                                                        .getValueType()),
                                                        pInner2,
                                                        _referencedFromUdtAttribsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType)
                                            _referencedFromUdtAttribsType),
                                    pInner1,
                                    _referencedFromUdtAttribsSupplierInner2Key,
                                    _referencedFromUdtAttribsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.AnnotationDecl,
                        com.schemarise.alfa.runtime.DataConsumer>
                _referencedFromUdtAttribsSupplier =
                        (p, consumer) -> {
                            _referencedFromUdtAttribsSupplierInner1.accept(
                                    p.getReferencedFromUdtAttribs(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                AnnotationDecl, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta annotationsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_annotationsSupplier),
                        java.util.Optional.of(_annotationsConsumer),
                        java.util.Optional.of(_annotationsSupplierInner1),
                        java.util.Optional.of(_annotationsConsumerInner1),
                        _annotationsType,
                        FIELD_ANNOTATIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta checksumMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_checksumSupplier),
                        java.util.Optional.of(_checksumConsumer),
                        java.util.Optional.of(_checksumSupplierInner1),
                        java.util.Optional.of(_checksumConsumerInner1),
                        _checksumType,
                        FIELD_CHECKSUM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta modifiersMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_modifiersSupplier),
                        java.util.Optional.of(_modifiersConsumer),
                        java.util.Optional.of(_modifiersSupplierInner1),
                        java.util.Optional.of(_modifiersConsumerInner1),
                        _modifiersType,
                        FIELD_MODIFIERS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceSupplier),
                        java.util.Optional.of(_sourceConsumer),
                        java.util.Optional.of(_sourceSupplierInner1),
                        java.util.Optional.of(_sourceConsumerInner1),
                        _sourceType,
                        FIELD_SOURCE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta referencedInFieldTypeFromMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_referencedInFieldTypeFromSupplier),
                        java.util.Optional.of(_referencedInFieldTypeFromConsumer),
                        java.util.Optional.of(_referencedInFieldTypeFromSupplierInner1),
                        java.util.Optional.of(_referencedInFieldTypeFromConsumerInner1),
                        _referencedInFieldTypeFromType,
                        FIELD_REFERENCEDINFIELDTYPEFROM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta includesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_includesSupplier),
                        java.util.Optional.of(_includesConsumer),
                        java.util.Optional.of(_includesSupplierInner1),
                        java.util.Optional.of(_includesConsumerInner1),
                        _includesType,
                        FIELD_INCLUDES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta scopeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_scopeSupplier),
                        java.util.Optional.of(_scopeConsumer),
                        java.util.Optional.of(_scopeSupplierInner1),
                        java.util.Optional.of(_scopeConsumerInner1),
                        _scopeType,
                        FIELD_SCOPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta includedFromMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_includedFromSupplier),
                        java.util.Optional.of(_includedFromConsumer),
                        java.util.Optional.of(_includedFromSupplierInner1),
                        java.util.Optional.of(_includedFromConsumerInner1),
                        _includedFromType,
                        FIELD_INCLUDEDFROM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta modelIdMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_modelIdSupplier),
                        java.util.Optional.of(_modelIdConsumer),
                        java.util.Optional.of(_modelIdSupplierInner1),
                        java.util.Optional.of(_modelIdConsumerInner1),
                        _modelIdType,
                        FIELD_MODELID,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta allFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_allFieldsSupplier),
                        java.util.Optional.of(_allFieldsConsumer),
                        java.util.Optional.of(_allFieldsSupplierInner1),
                        java.util.Optional.of(_allFieldsConsumerInner1),
                        _allFieldsType,
                        FIELD_ALLFIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta _extendsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendsSupplier),
                        java.util.Optional.of(_extendsConsumer),
                        java.util.Optional.of(_extendsSupplierInner1),
                        java.util.Optional.of(_extendsConsumerInner1),
                        _extendsType,
                        FIELD_EXTENDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta localFieldNamesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_localFieldNamesSupplier),
                        java.util.Optional.of(_localFieldNamesConsumer),
                        java.util.Optional.of(_localFieldNamesSupplierInner1),
                        java.util.Optional.of(_localFieldNamesConsumerInner1),
                        _localFieldNamesType,
                        FIELD_LOCALFIELDNAMES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta inheritedFieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_inheritedFieldsSupplier),
                        java.util.Optional.of(_inheritedFieldsConsumer),
                        java.util.Optional.of(_inheritedFieldsSupplierInner1),
                        java.util.Optional.of(_inheritedFieldsConsumerInner1),
                        _inheritedFieldsType,
                        FIELD_INHERITEDFIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isSyntheticMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isSyntheticSupplier),
                        java.util.Optional.of(_isSyntheticConsumer),
                        java.util.Optional.of(_isSyntheticSupplierInner1),
                        java.util.Optional.of(_isSyntheticConsumerInner1),
                        _isSyntheticType,
                        FIELD_ISSYNTHETIC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta assertsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_assertsSupplier),
                        java.util.Optional.of(_assertsConsumer),
                        java.util.Optional.of(_assertsSupplierInner1),
                        java.util.Optional.of(_assertsConsumerInner1),
                        _assertsType,
                        FIELD_ASSERTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta linkagesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_linkagesSupplier),
                        java.util.Optional.of(_linkagesConsumer),
                        java.util.Optional.of(_linkagesSupplierInner1),
                        java.util.Optional.of(_linkagesConsumerInner1),
                        _linkagesType,
                        FIELD_LINKAGES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta targetsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_targetsSupplier),
                        java.util.Optional.of(_targetsConsumer),
                        java.util.Optional.of(_targetsSupplierInner1),
                        java.util.Optional.of(_targetsConsumerInner1),
                        _targetsType,
                        FIELD_TARGETS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta referencedFromUdtsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_referencedFromUdtsSupplier),
                        java.util.Optional.of(_referencedFromUdtsConsumer),
                        java.util.Optional.of(_referencedFromUdtsSupplierInner1),
                        java.util.Optional.of(_referencedFromUdtsConsumerInner1),
                        _referencedFromUdtsType,
                        FIELD_REFERENCEDFROMUDTS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta referencedFromUdtAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_referencedFromUdtAttribsSupplier),
                        java.util.Optional.of(_referencedFromUdtAttribsConsumer),
                        java.util.Optional.of(_referencedFromUdtAttribsSupplierInner1),
                        java.util.Optional.of(_referencedFromUdtAttribsConsumerInner1),
                        _referencedFromUdtAttribsType,
                        FIELD_REFERENCEDFROMUDTATTRIBS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public AnnotationDeclBuilder builder() {
            return new schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl();
        }

        @Override
        public AnnotationDeclBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.AnnotationDecl._AnnotationDeclBuilderImpl(cc);
        }

        public AnnotationDeclDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AnnotationDecl>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_ANNOTATIONS, annotationsMeta);
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_CHECKSUM, checksumMeta);
                                        put(FIELD_MODIFIERS, modifiersMeta);
                                        put(FIELD_SOURCE, sourceMeta);
                                        put(
                                                FIELD_REFERENCEDINFIELDTYPEFROM,
                                                referencedInFieldTypeFromMeta);
                                        put(FIELD_INCLUDES, includesMeta);
                                        put(FIELD_SCOPE, scopeMeta);
                                        put(FIELD_INCLUDEDFROM, includedFromMeta);
                                        put(FIELD_MODELID, modelIdMeta);
                                        put(FIELD_ALLFIELDS, allFieldsMeta);
                                        put(FIELD_EXTENDS, _extendsMeta);
                                        put(FIELD_LOCALFIELDNAMES, localFieldNamesMeta);
                                        put(FIELD_INHERITEDFIELDS, inheritedFieldsMeta);
                                        put(FIELD_ISSYNTHETIC, isSyntheticMeta);
                                        put(FIELD_ASSERTS, assertsMeta);
                                        put(FIELD_LINKAGES, linkagesMeta);
                                        put(FIELD_TARGETS, targetsMeta);
                                        put(FIELD_REFERENCEDFROMUDTS, referencedFromUdtsMeta);
                                        put(
                                                FIELD_REFERENCEDFROMUDTATTRIBS,
                                                referencedFromUdtAttribsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<AnnotationDecl>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_ANNOTATIONS:
                    return FIELD_ANNOTATIONS;
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_CHECKSUM:
                    return FIELD_CHECKSUM;
                case FIELD_ID_MODIFIERS:
                    return FIELD_MODIFIERS;
                case FIELD_ID_SOURCE:
                    return FIELD_SOURCE;
                case FIELD_ID_REFERENCEDINFIELDTYPEFROM:
                    return FIELD_REFERENCEDINFIELDTYPEFROM;
                case FIELD_ID_INCLUDES:
                    return FIELD_INCLUDES;
                case FIELD_ID_SCOPE:
                    return FIELD_SCOPE;
                case FIELD_ID_INCLUDEDFROM:
                    return FIELD_INCLUDEDFROM;
                case FIELD_ID_MODELID:
                    return FIELD_MODELID;
                case FIELD_ID_ALLFIELDS:
                    return FIELD_ALLFIELDS;
                case FIELD_ID_EXTENDS:
                    return FIELD_EXTENDS;
                case FIELD_ID_LOCALFIELDNAMES:
                    return FIELD_LOCALFIELDNAMES;
                case FIELD_ID_INHERITEDFIELDS:
                    return FIELD_INHERITEDFIELDS;
                case FIELD_ID_ISSYNTHETIC:
                    return FIELD_ISSYNTHETIC;
                case FIELD_ID_ASSERTS:
                    return FIELD_ASSERTS;
                case FIELD_ID_LINKAGES:
                    return FIELD_LINKAGES;
                case FIELD_ID_TARGETS:
                    return FIELD_TARGETS;
                case FIELD_ID_REFERENCEDFROMUDTS:
                    return FIELD_REFERENCEDFROMUDTS;
                case FIELD_ID_REFERENCEDFROMUDTATTRIBS:
                    return FIELD_REFERENCEDFROMUDTATTRIBS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.AnnotationDecl{AllFields:map<string,string>;Annotations:optional<map<string,string>;>;Asserts:optional<list<schemarise.alfa.runtime.model.Assert[cbba5d77]>;>;Checksum:string;Doc:optional<string;>;ExtendedAttribs:optional<map<string,string>;>;Extends:optional<schemarise.alfa.runtime.model.UdtDataType[b49aa6a7];>;IncludedFrom:optional<list<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725]>;>;Includes:optional<list<schemarise.alfa.runtime.model.UdtDataType[b49aa6a7]>;>;InheritedFields:optional<list<schemarise.alfa.runtime.model.InheritedFields[3f0b5a94]>;>;IsSynthetic:boolean;Linkages:optional<list<schemarise.alfa.runtime.model.Linkage[e04026a]>;>;LocalFieldNames:list<string>;ModelId:optional<string;>;Modifiers:set<schemarise.alfa.runtime.model.ModifierType[db5c8911]>={  };Name:schemarise.alfa.runtime.model.UdtVersionedName[dd07c725];ReferencedFromUdtAttribs:map<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725],schemarise.alfa.runtime.model.UdtVersionedName[dd07c725]>;ReferencedFromUdts:set<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725]>;ReferencedInFieldTypeFrom:optional<list<schemarise.alfa.runtime.model.UdtVersionedName[dd07c725]>;>;Scope:optional<list<schemarise.alfa.runtime.model.UdtDataType[b49aa6a7]>;>;Source:union<Contents:string;loc:schemarise.alfa.runtime.model.Location[946b249f];>;Targets:list<schemarise.alfa.runtime.model.UdtMetaType[85998f5f]>;}
            schemarise.alfa.runtime.model.AnnotationDecl{AllFields:map<string,string>;Checksum:string;IsSynthetic:boolean;LocalFieldNames:list<string>;Name:schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb];ReferencedFromUdtAttribs:map<schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb],schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb]>;ReferencedFromUdts:set<schemarise.alfa.runtime.model.UdtVersionedName[4c83e4bb]>;Source:union<Contents:string;loc:schemarise.alfa.runtime.model.Location[946b249f];>;Targets:list<schemarise.alfa.runtime.model.UdtMetaType[85998f5f]>;}
            */
            return "2b5482ec:ff7996a4";
        }
    }
    // </editor-fold>

}
