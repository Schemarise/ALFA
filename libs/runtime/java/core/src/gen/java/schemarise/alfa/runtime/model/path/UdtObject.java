// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.path;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface UdtObject extends com.schemarise.alfa.runtime.Record {

    java.lang.String getType();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement> getPaths();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtObjectBuilder builder() {
        return new schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl();
    }

    public static UdtObjectBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtObjectBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        UdtObjectBuilder setType(java.lang.String v);

        java.lang.String getType();

        UdtObjectBuilder putPaths(
                java.lang.String k, schemarise.alfa.runtime.model.path.PathElement v);

        UdtObjectBuilder putAllPaths(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                        all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement> getPaths();

        UdtObject build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtObjectBuilderImpl extends _UdtObject__Base__ implements UdtObjectBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtObjectBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtObjectBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor.INSTANCE;
        }

        public UdtObjectBuilder setType(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Type", v);
            this._type = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor.FIELD_ID_TYPE);
            return this;
        }

        private void createPaths() {
            this._paths = new java.util.LinkedHashMap<>();
        }

        public UdtObjectBuilder putPaths(
                java.lang.String k, schemarise.alfa.runtime.model.path.PathElement v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Paths", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Paths", v);
            if (this._paths == null) createPaths();
            this._paths.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor
                            .FIELD_ID_PATHS);
            return this;
        }

        public UdtObjectBuilder putAllPaths(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Paths", all);
            if (this._paths == null) createPaths();
            this._paths.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor
                            .FIELD_ID_PATHS);
            return this;
        }

        private UdtObjectBuilder setPaths(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Paths", all);
            _paths = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor
                            .FIELD_ID_PATHS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Type":
                    setType((java.lang.String) val);
                    break;
                case "Paths":
                    setPaths(
                            (java.util.Map<
                                            java.lang.String,
                                            schemarise.alfa.runtime.model.path.PathElement>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtObject build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor.INSTANCE);

            UdtObject obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtObject)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _type,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model.path
                                                                        .UdtObject
                                                                        .UdtObjectDescriptor
                                                                        .INSTANCE
                                                                        ._pathsSupplierInner1,
                                                                _paths));
            else
                obj =
                        new schemarise.alfa.runtime.model.path.UdtObject._UdtObjectConcrete(
                                _type,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.path.UdtObject
                                                .UdtObjectDescriptor.INSTANCE
                                                ._pathsSupplierInner1,
                                        _paths));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.UdtObject",
                    new java.lang.String[] {"Type", "Paths"},
                    new java.lang.Object[] {_type, _paths});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtObjectConcrete extends _UdtObject__Base__ implements UdtObject {

        private _UdtObjectConcrete() {
            super();
        }

        private _UdtObjectConcrete(
                java.lang.String _type,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                        _paths) {
            super(_type, _paths);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtObject__Base__ {
        public java.lang.String _type;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                _paths;

        public _UdtObject__Base__() {}

        public _UdtObject__Base__(
                java.lang.String _type,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                        _paths) {
            this._type = _type;
            this._paths = _paths;
        }

        public java.lang.String getType() {
            return _type;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.path.PathElement>
                getPaths() {
            return _paths;
        }

        public int hashCode() {
            return java.util.Objects.hash(_type, _paths);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.path.UdtObject",
                    new java.lang.String[] {"Type", "Paths"},
                    new java.lang.Object[] {_type, _paths});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.path.UdtObject._UdtObjectConcrete))
                return false;
            schemarise.alfa.runtime.model.path.UdtObject._UdtObjectConcrete rhs =
                    (schemarise.alfa.runtime.model.path.UdtObject._UdtObjectConcrete) o;
            return java.util.Objects.equals(_type, rhs._type)
                    && java.util.Objects.equals(_paths, rhs._paths);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Type":
                    return _type;
                case "Paths":
                    return _paths;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getPaths()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtObjectDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.path.UdtObject";
        public static schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.path.UdtObject.UdtObjectDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TYPE = 0;
        public static final String FIELD_TYPE = "Type";

        public static final short FIELD_ID_PATHS = 1;
        public static final String FIELD_PATHS = "Paths";

        private schemarise.alfa.runtime.model.ScalarDataType _typeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _pathsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.path.PathElement")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.unionType)
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _typeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeConsumer =
                        (builder, supplier) -> {
                            builder.setType(_typeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.path.PathElement>>
                _pathsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _pathsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _pathsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.path.PathElement>
                                    _pathsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _pathsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _pathsType),
                                    _pathsConsumerInner2Key,
                                    _pathsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _pathsConsumer =
                        (builder, supplier) -> {
                            builder.putAllPaths(_pathsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.UdtObject,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplier =
                        (p, consumer) -> {
                            _typeSupplierInner1.accept(p.getType(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.path.PathElement > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.path.PathElement>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _pathsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _pathsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _pathsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.path.PathElement,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _pathsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _pathsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _pathsType),
                                    pInner1,
                                    _pathsSupplierInner2Key,
                                    _pathsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.path.UdtObject,
                        com.schemarise.alfa.runtime.DataConsumer>
                _pathsSupplier =
                        (p, consumer) -> {
                            _pathsSupplierInner1.accept(p.getPaths(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtObject, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta typeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeSupplier),
                        java.util.Optional.of(_typeConsumer),
                        java.util.Optional.of(_typeSupplierInner1),
                        java.util.Optional.of(_typeConsumerInner1),
                        _typeType,
                        FIELD_TYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta pathsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_pathsSupplier),
                        java.util.Optional.of(_pathsConsumer),
                        java.util.Optional.of(_pathsSupplierInner1),
                        java.util.Optional.of(_pathsConsumerInner1),
                        _pathsType,
                        FIELD_PATHS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtObjectBuilder builder() {
            return new schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl();
        }

        @Override
        public UdtObjectBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.path.UdtObject._UdtObjectBuilderImpl(cc);
        }

        public UdtObjectDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtObject>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TYPE, typeMeta);
                                        put(FIELD_PATHS, pathsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtObject>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TYPE:
                    return FIELD_TYPE;
                case FIELD_ID_PATHS:
                    return FIELD_PATHS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.path.UdtObject{Paths:map<string,string>;Type:string;}
            schemarise.alfa.runtime.model.path.UdtObject{Paths:map<string,string>;Type:string;}
            */
            return "be2e69b1:";
        }
    }
    // </editor-fold>

}
