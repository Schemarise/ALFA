// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.blk;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Blocks extends com.schemarise.alfa.runtime.Record {

    java.util.List<schemarise.alfa.runtime.model.blk.Block> getBlocks();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static BlocksBuilder builder() {
        return new schemarise.alfa.runtime.model.blk.Blocks._BlocksBuilderImpl();
    }

    public static BlocksBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc, schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.blk.Blocks._BlocksBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface BlocksBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        BlocksBuilder addBlocks(schemarise.alfa.runtime.model.blk.Block e);

        BlocksBuilder addAllBlocks(java.util.List<schemarise.alfa.runtime.model.blk.Block> all);

        java.util.List<schemarise.alfa.runtime.model.blk.Block> getBlocks();

        Blocks build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _BlocksBuilderImpl extends _Blocks__Base__ implements BlocksBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _BlocksBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _BlocksBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(1);
            __missingFields.set(0, 1);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.INSTANCE;
        }

        private void createBlocks() {
            this._blocks = new java.util.ArrayList<>();
        }

        public BlocksBuilder addBlocks(schemarise.alfa.runtime.model.blk.Block e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Blocks", e);
            if (this._blocks == null) createBlocks();
            this._blocks.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.FIELD_ID_BLOCKS);
            return this;
        }

        public BlocksBuilder setBlocks(int index, schemarise.alfa.runtime.model.blk.Block e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Blocks", e);
            if (this._blocks == null) createBlocks();
            this._blocks.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.FIELD_ID_BLOCKS);
            return this;
        }

        public BlocksBuilder addAllBlocks(
                java.util.List<schemarise.alfa.runtime.model.blk.Block> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Blocks", all);
            if (this._blocks == null) createBlocks();
            this._blocks.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.FIELD_ID_BLOCKS);
            return this;
        }

        private BlocksBuilder setBlocks(
                java.util.List<schemarise.alfa.runtime.model.blk.Block> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Blocks", all);
            this._blocks = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.FIELD_ID_BLOCKS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "blocks":
                    setBlocks((java.util.List<schemarise.alfa.runtime.model.blk.Block>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Blocks build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    1,
                    schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.INSTANCE);

            Blocks obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Blocks)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model.blk
                                                                        .Blocks.BlocksDescriptor
                                                                        .INSTANCE
                                                                        ._blocksSupplierInner1,
                                                                _blocks));
            else
                obj =
                        new schemarise.alfa.runtime.model.blk.Blocks._BlocksConcrete(
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor
                                                .INSTANCE
                                                ._blocksSupplierInner1,
                                        _blocks));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.Blocks",
                    new java.lang.String[] {"blocks"},
                    new java.lang.Object[] {_blocks});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _BlocksConcrete extends _Blocks__Base__ implements Blocks {

        private _BlocksConcrete() {
            super();
        }

        private _BlocksConcrete(java.util.List<schemarise.alfa.runtime.model.blk.Block> _blocks) {
            super(_blocks);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Blocks__Base__ {
        public java.util.List<schemarise.alfa.runtime.model.blk.Block> _blocks;

        public _Blocks__Base__() {}

        public _Blocks__Base__(java.util.List<schemarise.alfa.runtime.model.blk.Block> _blocks) {
            this._blocks = _blocks;
        }

        public java.util.List<schemarise.alfa.runtime.model.blk.Block> getBlocks() {
            return _blocks;
        }

        public int hashCode() {
            return java.util.Objects.hash(_blocks);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.Blocks",
                    new java.lang.String[] {"blocks"},
                    new java.lang.Object[] {_blocks});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.blk.Blocks._BlocksConcrete))
                return false;
            schemarise.alfa.runtime.model.blk.Blocks._BlocksConcrete rhs =
                    (schemarise.alfa.runtime.model.blk.Blocks._BlocksConcrete) o;
            return java.util.Objects.equals(_blocks, rhs._blocks);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "blocks":
                    return _blocks;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            java.util.stream.IntStream.range(0, getBlocks().size())
                    .forEach(
                            e0 -> {
                                getBlocks().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class BlocksDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.blk.Blocks";
        public static schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.blk.Blocks.BlocksDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_BLOCKS = 0;
        public static final String FIELD_BLOCKS = "blocks";

        private schemarise.alfa.runtime.model.ListDataType _blocksType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.blk.Block")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer list< schemarise.alfa.runtime.model.blk.Block > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.blk.Block>>
                _blocksConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.blk.Block>
                                    _blocksConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _blocksType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _blocksType),
                                    _blocksConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Blocks._BlocksBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _blocksConsumer =
                        (builder, supplier) -> {
                            builder.addAllBlocks(_blocksConsumerInner1.apply(supplier));
                        };

        /* -- Supplier list< schemarise.alfa.runtime.model.blk.Block > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.blk.Block>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _blocksSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.blk.Block,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _blocksSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _blocksType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _blocksType),
                                    pInner1,
                                    _blocksSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Blocks,
                        com.schemarise.alfa.runtime.DataConsumer>
                _blocksSupplier =
                        (p, consumer) -> {
                            _blocksSupplierInner1.accept(p.getBlocks(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Blocks, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta blocksMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_blocksSupplier),
                        java.util.Optional.of(_blocksConsumer),
                        java.util.Optional.of(_blocksSupplierInner1),
                        java.util.Optional.of(_blocksConsumerInner1),
                        _blocksType,
                        FIELD_BLOCKS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public BlocksBuilder builder() {
            return new schemarise.alfa.runtime.model.blk.Blocks._BlocksBuilderImpl();
        }

        @Override
        public BlocksBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.blk.Blocks._BlocksBuilderImpl(cc);
        }

        public BlocksDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Blocks>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_BLOCKS, blocksMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Blocks>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_BLOCKS:
                    return FIELD_BLOCKS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.blk.Blocks{blocks:list<schemarise.alfa.runtime.model.blk.Block[193ad9a]>;}
            schemarise.alfa.runtime.model.blk.Blocks{blocks:list<schemarise.alfa.runtime.model.blk.Block[a6881077]>;}
            */
            return "8bcc44f0:3ec52c08";
        }
    }
    // </editor-fold>

}
