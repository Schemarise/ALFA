// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.blk;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Block extends com.schemarise.alfa.runtime.Record {

    java.lang.String getType();

    java.lang.String getCategory();

    java.util.Optional<java.lang.String> getMessage0();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs0();

    java.util.Optional<java.lang.String> getMessage1();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs1();

    java.util.Optional<java.lang.String> getMessage2();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs2();

    java.util.Optional<java.lang.String> getMessage3();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs3();

    java.util.Optional<java.lang.String> getMessage4();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs4();

    java.util.Optional<java.lang.String> getMessage5();

    java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>> getArgs5();

    int getColour();

    java.lang.String getTooltip();

    java.lang.String getHelpUrl();

    java.util.Optional<java.lang.String> getPreviousStatement();

    java.util.Optional<java.lang.String> getNextStatement();

    java.util.Optional<java.lang.Boolean> getInputsInline();

    java.util.Optional<java.lang.String> getOutput();

    java.util.Optional<java.lang.String> getStyle();

    java.util.Optional<java.lang.String> getMutator();

    java.util.Optional<java.util.List<java.lang.String>> getExtensions();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static BlockBuilder builder() {
        return new schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl();
    }

    public static BlockBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface BlockBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        BlockBuilder setType(java.lang.String v);

        java.lang.String getType();

        BlockBuilder setCategory(java.lang.String v);

        java.lang.String getCategory();

        BlockBuilder setMessage0(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage0(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage0();

        BlockBuilder setArgs0(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs0(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs0();

        BlockBuilder setMessage1(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage1(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage1();

        BlockBuilder setArgs1(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs1(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs1();

        BlockBuilder setMessage2(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage2(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage2();

        BlockBuilder setArgs2(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs2(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs2();

        BlockBuilder setMessage3(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage3(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage3();

        BlockBuilder setArgs3(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs3(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs3();

        BlockBuilder setMessage4(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage4(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage4();

        BlockBuilder setArgs4(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs4(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs4();

        BlockBuilder setMessage5(java.util.Optional<java.lang.String> v);

        BlockBuilder setMessage5(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage5();

        BlockBuilder setArgs5(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v);

        BlockBuilder setArgs5(java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v);

        java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs5();

        BlockBuilder setColour(int v);

        int getColour();

        BlockBuilder setTooltip(java.lang.String v);

        java.lang.String getTooltip();

        BlockBuilder setHelpUrl(java.lang.String v);

        java.lang.String getHelpUrl();

        BlockBuilder setPreviousStatement(java.util.Optional<java.lang.String> v);

        BlockBuilder setPreviousStatement(java.lang.String v);

        java.util.Optional<java.lang.String> getPreviousStatement();

        BlockBuilder setNextStatement(java.util.Optional<java.lang.String> v);

        BlockBuilder setNextStatement(java.lang.String v);

        java.util.Optional<java.lang.String> getNextStatement();

        BlockBuilder setInputsInline(java.util.Optional<java.lang.Boolean> v);

        BlockBuilder setInputsInline(boolean v);

        java.util.Optional<java.lang.Boolean> getInputsInline();

        BlockBuilder setOutput(java.util.Optional<java.lang.String> v);

        BlockBuilder setOutput(java.lang.String v);

        java.util.Optional<java.lang.String> getOutput();

        BlockBuilder setStyle(java.util.Optional<java.lang.String> v);

        BlockBuilder setStyle(java.lang.String v);

        java.util.Optional<java.lang.String> getStyle();

        BlockBuilder setMutator(java.util.Optional<java.lang.String> v);

        BlockBuilder setMutator(java.lang.String v);

        java.util.Optional<java.lang.String> getMutator();

        BlockBuilder setExtensions(java.util.Optional<java.util.List<java.lang.String>> v);

        BlockBuilder setExtensions(java.util.List<java.lang.String> v);

        java.util.Optional<java.util.List<java.lang.String>> getExtensions();

        Block build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _BlockBuilderImpl extends _Block__Base__ implements BlockBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _BlockBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _BlockBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(24);
            __missingFields.set(0, 24);
            setMessage0(java.util.Optional.empty());
            setArgs0(java.util.Optional.empty());
            setMessage1(java.util.Optional.empty());
            setArgs1(java.util.Optional.empty());
            setMessage2(java.util.Optional.empty());
            setArgs2(java.util.Optional.empty());
            setMessage3(java.util.Optional.empty());
            setArgs3(java.util.Optional.empty());
            setMessage4(java.util.Optional.empty());
            setArgs4(java.util.Optional.empty());
            setMessage5(java.util.Optional.empty());
            setArgs5(java.util.Optional.empty());
            setPreviousStatement(java.util.Optional.empty());
            setNextStatement(java.util.Optional.empty());
            setInputsInline(java.util.Optional.empty());
            setOutput(java.util.Optional.empty());
            setStyle(java.util.Optional.empty());
            setMutator(java.util.Optional.empty());
            setExtensions(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.INSTANCE;
        }

        public BlockBuilder setType(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Type", v);
            this._type = v;
            clearMissingFlag(schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_TYPE);
            return this;
        }

        public BlockBuilder setCategory(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Category", v);
            this._category = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_CATEGORY);
            return this;
        }

        public BlockBuilder setMessage0(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message0", v);
            this._message0 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE0);
            return this;
        }

        public BlockBuilder setMessage0(java.lang.String v) {
            this._message0 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE0);
            return this;
        }

        public BlockBuilder setArgs0(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args0", v);
            this._args0 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS0);
            return this;
        }

        public BlockBuilder setArgs0(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args0 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS0);
            return this;
        }

        public BlockBuilder setMessage1(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message1", v);
            this._message1 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE1);
            return this;
        }

        public BlockBuilder setMessage1(java.lang.String v) {
            this._message1 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE1);
            return this;
        }

        public BlockBuilder setArgs1(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args1", v);
            this._args1 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS1);
            return this;
        }

        public BlockBuilder setArgs1(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args1 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS1);
            return this;
        }

        public BlockBuilder setMessage2(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message2", v);
            this._message2 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE2);
            return this;
        }

        public BlockBuilder setMessage2(java.lang.String v) {
            this._message2 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE2);
            return this;
        }

        public BlockBuilder setArgs2(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args2", v);
            this._args2 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS2);
            return this;
        }

        public BlockBuilder setArgs2(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args2 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS2);
            return this;
        }

        public BlockBuilder setMessage3(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message3", v);
            this._message3 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE3);
            return this;
        }

        public BlockBuilder setMessage3(java.lang.String v) {
            this._message3 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE3);
            return this;
        }

        public BlockBuilder setArgs3(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args3", v);
            this._args3 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS3);
            return this;
        }

        public BlockBuilder setArgs3(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args3 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS3);
            return this;
        }

        public BlockBuilder setMessage4(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message4", v);
            this._message4 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE4);
            return this;
        }

        public BlockBuilder setMessage4(java.lang.String v) {
            this._message4 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE4);
            return this;
        }

        public BlockBuilder setArgs4(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args4", v);
            this._args4 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS4);
            return this;
        }

        public BlockBuilder setArgs4(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args4 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS4);
            return this;
        }

        public BlockBuilder setMessage5(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message5", v);
            this._message5 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE5);
            return this;
        }

        public BlockBuilder setMessage5(java.lang.String v) {
            this._message5 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MESSAGE5);
            return this;
        }

        public BlockBuilder setArgs5(
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Args5", v);
            this._args5 = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS5);
            return this;
        }

        public BlockBuilder setArgs5(
                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg> v) {
            this._args5 = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_ARGS5);
            return this;
        }

        public BlockBuilder setColour(int v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Colour", v);
            this._colour = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_COLOUR);
            return this;
        }

        public BlockBuilder setTooltip(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Tooltip", v);
            this._tooltip = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_TOOLTIP);
            return this;
        }

        public BlockBuilder setHelpUrl(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("HelpUrl", v);
            this._helpUrl = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_HELPURL);
            return this;
        }

        public BlockBuilder setPreviousStatement(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("PreviousStatement", v);
            this._previousStatement = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor
                            .FIELD_ID_PREVIOUSSTATEMENT);
            return this;
        }

        public BlockBuilder setPreviousStatement(java.lang.String v) {
            this._previousStatement = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor
                            .FIELD_ID_PREVIOUSSTATEMENT);
            return this;
        }

        public BlockBuilder setNextStatement(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NextStatement", v);
            this._nextStatement = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_NEXTSTATEMENT);
            return this;
        }

        public BlockBuilder setNextStatement(java.lang.String v) {
            this._nextStatement = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_NEXTSTATEMENT);
            return this;
        }

        public BlockBuilder setInputsInline(java.util.Optional<java.lang.Boolean> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("InputsInline", v);
            this._inputsInline = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_INPUTSINLINE);
            return this;
        }

        public BlockBuilder setInputsInline(boolean v) {
            this._inputsInline = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_INPUTSINLINE);
            return this;
        }

        public BlockBuilder setOutput(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Output", v);
            this._output = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_OUTPUT);
            return this;
        }

        public BlockBuilder setOutput(java.lang.String v) {
            this._output = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_OUTPUT);
            return this;
        }

        public BlockBuilder setStyle(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Style", v);
            this._style = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_STYLE);
            return this;
        }

        public BlockBuilder setStyle(java.lang.String v) {
            this._style = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_STYLE);
            return this;
        }

        public BlockBuilder setMutator(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Mutator", v);
            this._mutator = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MUTATOR);
            return this;
        }

        public BlockBuilder setMutator(java.lang.String v) {
            this._mutator = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_MUTATOR);
            return this;
        }

        public BlockBuilder setExtensions(java.util.Optional<java.util.List<java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Extensions", v);
            this._extensions = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_EXTENSIONS);
            return this;
        }

        public BlockBuilder setExtensions(java.util.List<java.lang.String> v) {
            this._extensions = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.FIELD_ID_EXTENSIONS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "type":
                    setType((java.lang.String) val);
                    break;
                case "category":
                    setCategory((java.lang.String) val);
                    break;
                case "message0":
                    setMessage0((java.util.Optional<java.lang.String>) val);
                    break;
                case "args0":
                    setArgs0(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "message1":
                    setMessage1((java.util.Optional<java.lang.String>) val);
                    break;
                case "args1":
                    setArgs1(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "message2":
                    setMessage2((java.util.Optional<java.lang.String>) val);
                    break;
                case "args2":
                    setArgs2(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "message3":
                    setMessage3((java.util.Optional<java.lang.String>) val);
                    break;
                case "args3":
                    setArgs3(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "message4":
                    setMessage4((java.util.Optional<java.lang.String>) val);
                    break;
                case "args4":
                    setArgs4(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "message5":
                    setMessage5((java.util.Optional<java.lang.String>) val);
                    break;
                case "args5":
                    setArgs5(
                            (java.util.Optional<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk
                                                            .BlockBodyArg>>)
                                    val);
                    break;
                case "colour":
                    setColour((int) val);
                    break;
                case "tooltip":
                    setTooltip((java.lang.String) val);
                    break;
                case "helpUrl":
                    setHelpUrl((java.lang.String) val);
                    break;
                case "previousStatement":
                    setPreviousStatement((java.util.Optional<java.lang.String>) val);
                    break;
                case "nextStatement":
                    setNextStatement((java.util.Optional<java.lang.String>) val);
                    break;
                case "inputsInline":
                    setInputsInline((java.util.Optional<java.lang.Boolean>) val);
                    break;
                case "output":
                    setOutput((java.util.Optional<java.lang.String>) val);
                    break;
                case "style":
                    setStyle((java.util.Optional<java.lang.String>) val);
                    break;
                case "mutator":
                    setMutator((java.util.Optional<java.lang.String>) val);
                    break;
                case "extensions":
                    setExtensions((java.util.Optional<java.util.List<java.lang.String>>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Block build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    24,
                    schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.INSTANCE);

            Block obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Block)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _type,
                                                _category,
                                                _message0,
                                                _args0,
                                                _message1,
                                                _args1,
                                                _message2,
                                                _args2,
                                                _message3,
                                                _args3,
                                                _message4,
                                                _args4,
                                                _message5,
                                                _args5,
                                                _colour,
                                                _tooltip,
                                                _helpUrl,
                                                _previousStatement,
                                                _nextStatement,
                                                _inputsInline,
                                                _output,
                                                _style,
                                                _mutator,
                                                _extensions);
            else
                obj =
                        new schemarise.alfa.runtime.model.blk.Block._BlockConcrete(
                                _type,
                                _category,
                                _message0,
                                _args0,
                                _message1,
                                _args1,
                                _message2,
                                _args2,
                                _message3,
                                _args3,
                                _message4,
                                _args4,
                                _message5,
                                _args5,
                                _colour,
                                _tooltip,
                                _helpUrl,
                                _previousStatement,
                                _nextStatement,
                                _inputsInline,
                                _output,
                                _style,
                                _mutator,
                                _extensions);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.Block",
                    new java.lang.String[] {
                        "type",
                        "category",
                        "message0",
                        "args0",
                        "message1",
                        "args1",
                        "message2",
                        "args2",
                        "message3",
                        "args3",
                        "message4",
                        "args4",
                        "message5",
                        "args5",
                        "colour",
                        "tooltip",
                        "helpUrl",
                        "previousStatement",
                        "nextStatement",
                        "inputsInline",
                        "output",
                        "style",
                        "mutator",
                        "extensions"
                    },
                    new java.lang.Object[] {
                        _type,
                        _category,
                        _message0,
                        _args0,
                        _message1,
                        _args1,
                        _message2,
                        _args2,
                        _message3,
                        _args3,
                        _message4,
                        _args4,
                        _message5,
                        _args5,
                        _colour,
                        _tooltip,
                        _helpUrl,
                        _previousStatement,
                        _nextStatement,
                        _inputsInline,
                        _output,
                        _style,
                        _mutator,
                        _extensions
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _BlockConcrete extends _Block__Base__ implements Block {

        private _BlockConcrete() {
            super();
        }

        private _BlockConcrete(
                java.lang.String _type,
                java.lang.String _category,
                java.util.Optional<java.lang.String> _message0,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args0,
                java.util.Optional<java.lang.String> _message1,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args1,
                java.util.Optional<java.lang.String> _message2,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args2,
                java.util.Optional<java.lang.String> _message3,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args3,
                java.util.Optional<java.lang.String> _message4,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args4,
                java.util.Optional<java.lang.String> _message5,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args5,
                int _colour,
                java.lang.String _tooltip,
                java.lang.String _helpUrl,
                java.util.Optional<java.lang.String> _previousStatement,
                java.util.Optional<java.lang.String> _nextStatement,
                java.util.Optional<java.lang.Boolean> _inputsInline,
                java.util.Optional<java.lang.String> _output,
                java.util.Optional<java.lang.String> _style,
                java.util.Optional<java.lang.String> _mutator,
                java.util.Optional<java.util.List<java.lang.String>> _extensions) {
            super(
                    _type,
                    _category,
                    _message0,
                    _args0,
                    _message1,
                    _args1,
                    _message2,
                    _args2,
                    _message3,
                    _args3,
                    _message4,
                    _args4,
                    _message5,
                    _args5,
                    _colour,
                    _tooltip,
                    _helpUrl,
                    _previousStatement,
                    _nextStatement,
                    _inputsInline,
                    _output,
                    _style,
                    _mutator,
                    _extensions);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Block__Base__ {
        public java.lang.String _type;
        public java.lang.String _category;
        public java.util.Optional<java.lang.String> _message0;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args0;
        public java.util.Optional<java.lang.String> _message1;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args1;
        public java.util.Optional<java.lang.String> _message2;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args2;
        public java.util.Optional<java.lang.String> _message3;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args3;
        public java.util.Optional<java.lang.String> _message4;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args4;
        public java.util.Optional<java.lang.String> _message5;
        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                _args5;
        public int _colour;
        public java.lang.String _tooltip;
        public java.lang.String _helpUrl;
        public java.util.Optional<java.lang.String> _previousStatement;
        public java.util.Optional<java.lang.String> _nextStatement;
        public java.util.Optional<java.lang.Boolean> _inputsInline;
        public java.util.Optional<java.lang.String> _output;
        public java.util.Optional<java.lang.String> _style;
        public java.util.Optional<java.lang.String> _mutator;
        public java.util.Optional<java.util.List<java.lang.String>> _extensions;

        public _Block__Base__() {}

        public _Block__Base__(
                java.lang.String _type,
                java.lang.String _category,
                java.util.Optional<java.lang.String> _message0,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args0,
                java.util.Optional<java.lang.String> _message1,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args1,
                java.util.Optional<java.lang.String> _message2,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args2,
                java.util.Optional<java.lang.String> _message3,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args3,
                java.util.Optional<java.lang.String> _message4,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args4,
                java.util.Optional<java.lang.String> _message5,
                java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                        _args5,
                int _colour,
                java.lang.String _tooltip,
                java.lang.String _helpUrl,
                java.util.Optional<java.lang.String> _previousStatement,
                java.util.Optional<java.lang.String> _nextStatement,
                java.util.Optional<java.lang.Boolean> _inputsInline,
                java.util.Optional<java.lang.String> _output,
                java.util.Optional<java.lang.String> _style,
                java.util.Optional<java.lang.String> _mutator,
                java.util.Optional<java.util.List<java.lang.String>> _extensions) {
            this._type = _type;
            this._category = _category;
            this._message0 = _message0;
            this._args0 = _args0;
            this._message1 = _message1;
            this._args1 = _args1;
            this._message2 = _message2;
            this._args2 = _args2;
            this._message3 = _message3;
            this._args3 = _args3;
            this._message4 = _message4;
            this._args4 = _args4;
            this._message5 = _message5;
            this._args5 = _args5;
            this._colour = _colour;
            this._tooltip = _tooltip;
            this._helpUrl = _helpUrl;
            this._previousStatement = _previousStatement;
            this._nextStatement = _nextStatement;
            this._inputsInline = _inputsInline;
            this._output = _output;
            this._style = _style;
            this._mutator = _mutator;
            this._extensions = _extensions;
        }

        public java.lang.String getType() {
            return _type;
        }

        public java.lang.String getCategory() {
            return _category;
        }

        public java.util.Optional<java.lang.String> getMessage0() {
            return _message0;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs0() {
            return _args0;
        }

        public java.util.Optional<java.lang.String> getMessage1() {
            return _message1;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs1() {
            return _args1;
        }

        public java.util.Optional<java.lang.String> getMessage2() {
            return _message2;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs2() {
            return _args2;
        }

        public java.util.Optional<java.lang.String> getMessage3() {
            return _message3;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs3() {
            return _args3;
        }

        public java.util.Optional<java.lang.String> getMessage4() {
            return _message4;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs4() {
            return _args4;
        }

        public java.util.Optional<java.lang.String> getMessage5() {
            return _message5;
        }

        public java.util.Optional<java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                getArgs5() {
            return _args5;
        }

        public int getColour() {
            return _colour;
        }

        public java.lang.String getTooltip() {
            return _tooltip;
        }

        public java.lang.String getHelpUrl() {
            return _helpUrl;
        }

        public java.util.Optional<java.lang.String> getPreviousStatement() {
            return _previousStatement;
        }

        public java.util.Optional<java.lang.String> getNextStatement() {
            return _nextStatement;
        }

        public java.util.Optional<java.lang.Boolean> getInputsInline() {
            return _inputsInline;
        }

        public java.util.Optional<java.lang.String> getOutput() {
            return _output;
        }

        public java.util.Optional<java.lang.String> getStyle() {
            return _style;
        }

        public java.util.Optional<java.lang.String> getMutator() {
            return _mutator;
        }

        public java.util.Optional<java.util.List<java.lang.String>> getExtensions() {
            return _extensions;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _type,
                    _category,
                    _message0,
                    _args0,
                    _message1,
                    _args1,
                    _message2,
                    _args2,
                    _message3,
                    _args3,
                    _message4,
                    _args4,
                    _message5,
                    _args5,
                    _colour,
                    _tooltip,
                    _helpUrl,
                    _previousStatement,
                    _nextStatement,
                    _inputsInline,
                    _output,
                    _style,
                    _mutator,
                    _extensions);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.blk.Block",
                    new java.lang.String[] {
                        "type",
                        "category",
                        "message0",
                        "args0",
                        "message1",
                        "args1",
                        "message2",
                        "args2",
                        "message3",
                        "args3",
                        "message4",
                        "args4",
                        "message5",
                        "args5",
                        "colour",
                        "tooltip",
                        "helpUrl",
                        "previousStatement",
                        "nextStatement",
                        "inputsInline",
                        "output",
                        "style",
                        "mutator",
                        "extensions"
                    },
                    new java.lang.Object[] {
                        _type,
                        _category,
                        _message0,
                        _args0,
                        _message1,
                        _args1,
                        _message2,
                        _args2,
                        _message3,
                        _args3,
                        _message4,
                        _args4,
                        _message5,
                        _args5,
                        _colour,
                        _tooltip,
                        _helpUrl,
                        _previousStatement,
                        _nextStatement,
                        _inputsInline,
                        _output,
                        _style,
                        _mutator,
                        _extensions
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.blk.Block._BlockConcrete))
                return false;
            schemarise.alfa.runtime.model.blk.Block._BlockConcrete rhs =
                    (schemarise.alfa.runtime.model.blk.Block._BlockConcrete) o;
            return java.util.Objects.equals(_type, rhs._type)
                    && java.util.Objects.equals(_category, rhs._category)
                    && java.util.Objects.equals(_message0, rhs._message0)
                    && java.util.Objects.equals(_args0, rhs._args0)
                    && java.util.Objects.equals(_message1, rhs._message1)
                    && java.util.Objects.equals(_args1, rhs._args1)
                    && java.util.Objects.equals(_message2, rhs._message2)
                    && java.util.Objects.equals(_args2, rhs._args2)
                    && java.util.Objects.equals(_message3, rhs._message3)
                    && java.util.Objects.equals(_args3, rhs._args3)
                    && java.util.Objects.equals(_message4, rhs._message4)
                    && java.util.Objects.equals(_args4, rhs._args4)
                    && java.util.Objects.equals(_message5, rhs._message5)
                    && java.util.Objects.equals(_args5, rhs._args5)
                    && _colour == rhs._colour
                    && java.util.Objects.equals(_tooltip, rhs._tooltip)
                    && java.util.Objects.equals(_helpUrl, rhs._helpUrl)
                    && java.util.Objects.equals(_previousStatement, rhs._previousStatement)
                    && java.util.Objects.equals(_nextStatement, rhs._nextStatement)
                    && java.util.Objects.equals(_inputsInline, rhs._inputsInline)
                    && java.util.Objects.equals(_output, rhs._output)
                    && java.util.Objects.equals(_style, rhs._style)
                    && java.util.Objects.equals(_mutator, rhs._mutator)
                    && java.util.Objects.equals(_extensions, rhs._extensions);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.blk.Block.BlockDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "type":
                    return _type;
                case "category":
                    return _category;
                case "message0":
                    return _message0;
                case "args0":
                    return _args0;
                case "message1":
                    return _message1;
                case "args1":
                    return _args1;
                case "message2":
                    return _message2;
                case "args2":
                    return _args2;
                case "message3":
                    return _message3;
                case "args3":
                    return _args3;
                case "message4":
                    return _message4;
                case "args4":
                    return _args4;
                case "message5":
                    return _message5;
                case "args5":
                    return _args5;
                case "colour":
                    return _colour;
                case "tooltip":
                    return _tooltip;
                case "helpUrl":
                    return _helpUrl;
                case "previousStatement":
                    return _previousStatement;
                case "nextStatement":
                    return _nextStatement;
                case "inputsInline":
                    return _inputsInline;
                case "output":
                    return _output;
                case "style":
                    return _style;
                case "mutator":
                    return _mutator;
                case "extensions":
                    return _extensions;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            if (getArgs0().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs0().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs0().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getArgs1().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs1().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs1().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getArgs2().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs2().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs2().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getArgs3().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs3().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs3().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getArgs4().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs4().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs4().get().get(e0).validate(__builderConfig);
                                });
            }

            if (getArgs5().isPresent()) {
                java.util.stream.IntStream.range(0, getArgs5().get().size())
                        .forEach(
                                e0 -> {
                                    getArgs5().get().get(e0).validate(__builderConfig);
                                });
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class BlockDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.blk.Block";
        public static schemarise.alfa.runtime.model.blk.Block.BlockDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.blk.Block.BlockDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TYPE = 0;
        public static final String FIELD_TYPE = "type";

        public static final short FIELD_ID_CATEGORY = 1;
        public static final String FIELD_CATEGORY = "category";

        public static final short FIELD_ID_MESSAGE0 = 2;
        public static final String FIELD_MESSAGE0 = "message0";

        public static final short FIELD_ID_ARGS0 = 3;
        public static final String FIELD_ARGS0 = "args0";

        public static final short FIELD_ID_MESSAGE1 = 4;
        public static final String FIELD_MESSAGE1 = "message1";

        public static final short FIELD_ID_ARGS1 = 5;
        public static final String FIELD_ARGS1 = "args1";

        public static final short FIELD_ID_MESSAGE2 = 6;
        public static final String FIELD_MESSAGE2 = "message2";

        public static final short FIELD_ID_ARGS2 = 7;
        public static final String FIELD_ARGS2 = "args2";

        public static final short FIELD_ID_MESSAGE3 = 8;
        public static final String FIELD_MESSAGE3 = "message3";

        public static final short FIELD_ID_ARGS3 = 9;
        public static final String FIELD_ARGS3 = "args3";

        public static final short FIELD_ID_MESSAGE4 = 10;
        public static final String FIELD_MESSAGE4 = "message4";

        public static final short FIELD_ID_ARGS4 = 11;
        public static final String FIELD_ARGS4 = "args4";

        public static final short FIELD_ID_MESSAGE5 = 12;
        public static final String FIELD_MESSAGE5 = "message5";

        public static final short FIELD_ID_ARGS5 = 13;
        public static final String FIELD_ARGS5 = "args5";

        public static final short FIELD_ID_COLOUR = 14;
        public static final String FIELD_COLOUR = "colour";

        public static final short FIELD_ID_TOOLTIP = 15;
        public static final String FIELD_TOOLTIP = "tooltip";

        public static final short FIELD_ID_HELPURL = 16;
        public static final String FIELD_HELPURL = "helpUrl";

        public static final short FIELD_ID_PREVIOUSSTATEMENT = 17;
        public static final String FIELD_PREVIOUSSTATEMENT = "previousStatement";

        public static final short FIELD_ID_NEXTSTATEMENT = 18;
        public static final String FIELD_NEXTSTATEMENT = "nextStatement";

        public static final short FIELD_ID_INPUTSINLINE = 19;
        public static final String FIELD_INPUTSINLINE = "inputsInline";

        public static final short FIELD_ID_OUTPUT = 20;
        public static final String FIELD_OUTPUT = "output";

        public static final short FIELD_ID_STYLE = 21;
        public static final String FIELD_STYLE = "style";

        public static final short FIELD_ID_MUTATOR = 22;
        public static final String FIELD_MUTATOR = "mutator";

        public static final short FIELD_ID_EXTENSIONS = 23;
        public static final String FIELD_EXTENSIONS = "extensions";

        private schemarise.alfa.runtime.model.ScalarDataType _typeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _categoryType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message0Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args0Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message1Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args1Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message2Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args2Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message3Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args3Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message4Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args4Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _message5Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _args5Type =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                                        .setFullyQualifiedName(
                                                                "schemarise.alfa.runtime.model.blk.BlockBodyArg")
                                                        .setUdtType(
                                                                schemarise.alfa.runtime.model.UdtMetaType
                                                                        .recordType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _colourType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _tooltipType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _helpUrlType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _previousStatementType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _nextStatementType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _inputsInlineType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.booleanType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _outputType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _styleType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _mutatorType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _extensionsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ListDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _typeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeConsumer =
                        (builder, supplier) -> {
                            builder.setType(_typeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _categoryConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _categoryType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _categoryConsumer =
                        (builder, supplier) -> {
                            builder.setCategory(_categoryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message0ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message0ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message0Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message0Type),
                                    _message0ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message0Consumer =
                        (builder, supplier) -> {
                            builder.setMessage0(_message0ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args0ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args0ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args0ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args0Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args0Type)
                                                                        .getComponentType()),
                                                        _args0ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args0Type),
                                    _args0ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args0Consumer =
                        (builder, supplier) -> {
                            builder.setArgs0(_args0ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message1ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message1ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message1Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message1Type),
                                    _message1ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message1Consumer =
                        (builder, supplier) -> {
                            builder.setMessage1(_message1ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args1ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args1ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args1ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args1Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args1Type)
                                                                        .getComponentType()),
                                                        _args1ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args1Type),
                                    _args1ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args1Consumer =
                        (builder, supplier) -> {
                            builder.setArgs1(_args1ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message2ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message2ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message2Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message2Type),
                                    _message2ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message2Consumer =
                        (builder, supplier) -> {
                            builder.setMessage2(_message2ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args2ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args2ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args2ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args2Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args2Type)
                                                                        .getComponentType()),
                                                        _args2ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args2Type),
                                    _args2ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args2Consumer =
                        (builder, supplier) -> {
                            builder.setArgs2(_args2ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message3ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message3ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message3Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message3Type),
                                    _message3ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message3Consumer =
                        (builder, supplier) -> {
                            builder.setMessage3(_message3ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args3ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args3ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args3ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args3Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args3Type)
                                                                        .getComponentType()),
                                                        _args3ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args3Type),
                                    _args3ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args3Consumer =
                        (builder, supplier) -> {
                            builder.setArgs3(_args3ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message4ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message4ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message4Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message4Type),
                                    _message4ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message4Consumer =
                        (builder, supplier) -> {
                            builder.setMessage4(_message4ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args4ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args4ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args4ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args4Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args4Type)
                                                                        .getComponentType()),
                                                        _args4ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args4Type),
                                    _args4ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args4Consumer =
                        (builder, supplier) -> {
                            builder.setArgs4(_args4ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _message5ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _message5ConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message5Type)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message5Type),
                                    _message5ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _message5Consumer =
                        (builder, supplier) -> {
                            builder.setMessage5(_message5ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>>
                _args5ConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>>
                                    _args5ConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg>
                                                        _args5ConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .objectValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .UdtDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _args5Type)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args5Type)
                                                                        .getComponentType()),
                                                        _args5ConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args5Type),
                                    _args5ConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _args5Consumer =
                        (builder, supplier) -> {
                            builder.setArgs5(_args5ConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                _colourConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.intValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _colourType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _colourConsumer =
                        (builder, supplier) -> {
                            builder.setColour(_colourConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _tooltipConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _tooltipType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _tooltipConsumer =
                        (builder, supplier) -> {
                            builder.setTooltip(_tooltipConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _helpUrlConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _helpUrlType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _helpUrlConsumer =
                        (builder, supplier) -> {
                            builder.setHelpUrl(_helpUrlConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _previousStatementConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _previousStatementConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _previousStatementType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _previousStatementType),
                                    _previousStatementConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _previousStatementConsumer =
                        (builder, supplier) -> {
                            builder.setPreviousStatement(
                                    _previousStatementConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _nextStatementConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _nextStatementConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _nextStatementType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _nextStatementType),
                                    _nextStatementConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nextStatementConsumer =
                        (builder, supplier) -> {
                            builder.setNextStatement(_nextStatementConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Boolean>>
                _inputsInlineConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                                    _inputsInlineConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.booleanValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _inputsInlineType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _inputsInlineType),
                                    _inputsInlineConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _inputsInlineConsumer =
                        (builder, supplier) -> {
                            builder.setInputsInline(_inputsInlineConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _outputConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _outputConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _outputType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _outputType),
                                    _outputConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _outputConsumer =
                        (builder, supplier) -> {
                            builder.setOutput(_outputConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _styleConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _styleConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _styleType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _styleType),
                                    _styleConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _styleConsumer =
                        (builder, supplier) -> {
                            builder.setStyle(_styleConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _mutatorConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _mutatorConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _mutatorType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _mutatorType),
                                    _mutatorConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _mutatorConsumer =
                        (builder, supplier) -> {
                            builder.setMutator(_mutatorConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.List<java.lang.String>>>
                _extensionsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.List<java.lang.String>>
                                    _extensionsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extensionsConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .ListDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extensionsType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.listValue(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extensionsType)
                                                                        .getComponentType()),
                                                        _extensionsConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _extensionsType),
                                    _extensionsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extensionsConsumer =
                        (builder, supplier) -> {
                            builder.setExtensions(_extensionsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _typeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeSupplier =
                        (p, consumer) -> {
                            _typeSupplierInner1.accept(p.getType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _categorySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _categoryType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _categorySupplier =
                        (p, consumer) -> {
                            _categorySupplierInner1.accept(p.getCategory(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message0SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message0SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message0Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message0Type),
                                    pInner1,
                                    _message0SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message0Supplier =
                        (p, consumer) -> {
                            _message0SupplierInner1.accept(p.getMessage0(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args0SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args0SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args0SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args0Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args0Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args0SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args0Type),
                                    pInner1,
                                    _args0SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args0Supplier =
                        (p, consumer) -> {
                            _args0SupplierInner1.accept(p.getArgs0(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message1SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message1SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message1Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message1Type),
                                    pInner1,
                                    _message1SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message1Supplier =
                        (p, consumer) -> {
                            _message1SupplierInner1.accept(p.getMessage1(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args1SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args1SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args1SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args1Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args1Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args1SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args1Type),
                                    pInner1,
                                    _args1SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args1Supplier =
                        (p, consumer) -> {
                            _args1SupplierInner1.accept(p.getArgs1(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message2SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message2SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message2Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message2Type),
                                    pInner1,
                                    _message2SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message2Supplier =
                        (p, consumer) -> {
                            _message2SupplierInner1.accept(p.getMessage2(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args2SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args2SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args2SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args2Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args2Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args2SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args2Type),
                                    pInner1,
                                    _args2SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args2Supplier =
                        (p, consumer) -> {
                            _args2SupplierInner1.accept(p.getArgs2(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message3SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message3SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message3Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message3Type),
                                    pInner1,
                                    _message3SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message3Supplier =
                        (p, consumer) -> {
                            _message3SupplierInner1.accept(p.getMessage3(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args3SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args3SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args3SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args3Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args3Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args3SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args3Type),
                                    pInner1,
                                    _args3SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args3Supplier =
                        (p, consumer) -> {
                            _args3SupplierInner1.accept(p.getArgs3(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message4SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message4SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message4Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message4Type),
                                    pInner1,
                                    _message4SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message4Supplier =
                        (p, consumer) -> {
                            _message4SupplierInner1.accept(p.getMessage4(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args4SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args4SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args4SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args4Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args4Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args4SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args4Type),
                                    pInner1,
                                    _args4SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args4Supplier =
                        (p, consumer) -> {
                            _args4SupplierInner1.accept(p.getArgs4(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message5SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _message5SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _message5Type)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _message5Type),
                                    pInner1,
                                    _message5SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _message5Supplier =
                        (p, consumer) -> {
                            _message5SupplierInner1.accept(p.getMessage5(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.blk.BlockBodyArg > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.List<schemarise.alfa.runtime.model.blk.BlockBodyArg>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args5SupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<
                                                    schemarise.alfa.runtime.model.blk.BlockBodyArg>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _args5SupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                schemarise.alfa.runtime.model.blk
                                                                        .BlockBodyArg,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _args5SupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .UdtDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _args5Type)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _args5Type)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _args5SupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _args5Type),
                                    pInner1,
                                    _args5SupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _args5Supplier =
                        (p, consumer) -> {
                            _args5SupplierInner1.accept(p.getArgs5(), consumer);
                        };
        /* -- Supplier int -- */
        java.util.function.BiConsumer<java.lang.Integer, com.schemarise.alfa.runtime.DataConsumer>
                _colourSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _colourType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _colourSupplier =
                        (p, consumer) -> {
                            _colourSupplierInner1.accept(p.getColour(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _tooltipSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _tooltipType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _tooltipSupplier =
                        (p, consumer) -> {
                            _tooltipSupplierInner1.accept(p.getTooltip(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _helpUrlSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _helpUrlType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _helpUrlSupplier =
                        (p, consumer) -> {
                            _helpUrlSupplierInner1.accept(p.getHelpUrl(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _previousStatementSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _previousStatementSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _previousStatementType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _previousStatementType),
                                    pInner1,
                                    _previousStatementSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _previousStatementSupplier =
                        (p, consumer) -> {
                            _previousStatementSupplierInner1.accept(
                                    p.getPreviousStatement(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nextStatementSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _nextStatementSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _nextStatementType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _nextStatementType),
                                    pInner1,
                                    _nextStatementSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nextStatementSupplier =
                        (p, consumer) -> {
                            _nextStatementSupplierInner1.accept(p.getNextStatement(), consumer);
                        };
        /* -- Supplier boolean ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Boolean>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inputsInlineSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Boolean,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _inputsInlineSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _inputsInlineType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _inputsInlineType),
                                    pInner1,
                                    _inputsInlineSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _inputsInlineSupplier =
                        (p, consumer) -> {
                            _inputsInlineSupplierInner1.accept(p.getInputsInline(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _outputSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _outputSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _outputType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _outputType),
                                    pInner1,
                                    _outputSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _outputSupplier =
                        (p, consumer) -> {
                            _outputSupplierInner1.accept(p.getOutput(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _styleSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _styleSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _styleType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _styleType),
                                    pInner1,
                                    _styleSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _styleSupplier =
                        (p, consumer) -> {
                            _styleSupplierInner1.accept(p.getStyle(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mutatorSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _mutatorSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _mutatorType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _mutatorType),
                                    pInner1,
                                    _mutatorSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _mutatorSupplier =
                        (p, consumer) -> {
                            _mutatorSupplierInner1.accept(p.getMutator(), consumer);
                        };
        /* -- Supplier list< string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.List<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extensionsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.List<java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extensionsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extensionsSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .ListDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extensionsType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ListDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extensionsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extensionsSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _extensionsType),
                                    pInner1,
                                    _extensionsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.blk.Block,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extensionsSupplier =
                        (p, consumer) -> {
                            _extensionsSupplierInner1.accept(p.getExtensions(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Block, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta typeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeSupplier),
                        java.util.Optional.of(_typeConsumer),
                        java.util.Optional.of(_typeSupplierInner1),
                        java.util.Optional.of(_typeConsumerInner1),
                        _typeType,
                        FIELD_TYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta categoryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_categorySupplier),
                        java.util.Optional.of(_categoryConsumer),
                        java.util.Optional.of(_categorySupplierInner1),
                        java.util.Optional.of(_categoryConsumerInner1),
                        _categoryType,
                        FIELD_CATEGORY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message0Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message0Supplier),
                        java.util.Optional.of(_message0Consumer),
                        java.util.Optional.of(_message0SupplierInner1),
                        java.util.Optional.of(_message0ConsumerInner1),
                        _message0Type,
                        FIELD_MESSAGE0,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args0Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args0Supplier),
                        java.util.Optional.of(_args0Consumer),
                        java.util.Optional.of(_args0SupplierInner1),
                        java.util.Optional.of(_args0ConsumerInner1),
                        _args0Type,
                        FIELD_ARGS0,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message1Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message1Supplier),
                        java.util.Optional.of(_message1Consumer),
                        java.util.Optional.of(_message1SupplierInner1),
                        java.util.Optional.of(_message1ConsumerInner1),
                        _message1Type,
                        FIELD_MESSAGE1,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args1Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args1Supplier),
                        java.util.Optional.of(_args1Consumer),
                        java.util.Optional.of(_args1SupplierInner1),
                        java.util.Optional.of(_args1ConsumerInner1),
                        _args1Type,
                        FIELD_ARGS1,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message2Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message2Supplier),
                        java.util.Optional.of(_message2Consumer),
                        java.util.Optional.of(_message2SupplierInner1),
                        java.util.Optional.of(_message2ConsumerInner1),
                        _message2Type,
                        FIELD_MESSAGE2,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args2Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args2Supplier),
                        java.util.Optional.of(_args2Consumer),
                        java.util.Optional.of(_args2SupplierInner1),
                        java.util.Optional.of(_args2ConsumerInner1),
                        _args2Type,
                        FIELD_ARGS2,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message3Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message3Supplier),
                        java.util.Optional.of(_message3Consumer),
                        java.util.Optional.of(_message3SupplierInner1),
                        java.util.Optional.of(_message3ConsumerInner1),
                        _message3Type,
                        FIELD_MESSAGE3,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args3Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args3Supplier),
                        java.util.Optional.of(_args3Consumer),
                        java.util.Optional.of(_args3SupplierInner1),
                        java.util.Optional.of(_args3ConsumerInner1),
                        _args3Type,
                        FIELD_ARGS3,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message4Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message4Supplier),
                        java.util.Optional.of(_message4Consumer),
                        java.util.Optional.of(_message4SupplierInner1),
                        java.util.Optional.of(_message4ConsumerInner1),
                        _message4Type,
                        FIELD_MESSAGE4,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args4Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args4Supplier),
                        java.util.Optional.of(_args4Consumer),
                        java.util.Optional.of(_args4SupplierInner1),
                        java.util.Optional.of(_args4ConsumerInner1),
                        _args4Type,
                        FIELD_ARGS4,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta message5Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_message5Supplier),
                        java.util.Optional.of(_message5Consumer),
                        java.util.Optional.of(_message5SupplierInner1),
                        java.util.Optional.of(_message5ConsumerInner1),
                        _message5Type,
                        FIELD_MESSAGE5,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta args5Meta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_args5Supplier),
                        java.util.Optional.of(_args5Consumer),
                        java.util.Optional.of(_args5SupplierInner1),
                        java.util.Optional.of(_args5ConsumerInner1),
                        _args5Type,
                        FIELD_ARGS5,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta colourMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_colourSupplier),
                        java.util.Optional.of(_colourConsumer),
                        java.util.Optional.of(_colourSupplierInner1),
                        java.util.Optional.of(_colourConsumerInner1),
                        _colourType,
                        FIELD_COLOUR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta tooltipMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_tooltipSupplier),
                        java.util.Optional.of(_tooltipConsumer),
                        java.util.Optional.of(_tooltipSupplierInner1),
                        java.util.Optional.of(_tooltipConsumerInner1),
                        _tooltipType,
                        FIELD_TOOLTIP,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta helpUrlMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_helpUrlSupplier),
                        java.util.Optional.of(_helpUrlConsumer),
                        java.util.Optional.of(_helpUrlSupplierInner1),
                        java.util.Optional.of(_helpUrlConsumerInner1),
                        _helpUrlType,
                        FIELD_HELPURL,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta previousStatementMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_previousStatementSupplier),
                        java.util.Optional.of(_previousStatementConsumer),
                        java.util.Optional.of(_previousStatementSupplierInner1),
                        java.util.Optional.of(_previousStatementConsumerInner1),
                        _previousStatementType,
                        FIELD_PREVIOUSSTATEMENT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nextStatementMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nextStatementSupplier),
                        java.util.Optional.of(_nextStatementConsumer),
                        java.util.Optional.of(_nextStatementSupplierInner1),
                        java.util.Optional.of(_nextStatementConsumerInner1),
                        _nextStatementType,
                        FIELD_NEXTSTATEMENT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta inputsInlineMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_inputsInlineSupplier),
                        java.util.Optional.of(_inputsInlineConsumer),
                        java.util.Optional.of(_inputsInlineSupplierInner1),
                        java.util.Optional.of(_inputsInlineConsumerInner1),
                        _inputsInlineType,
                        FIELD_INPUTSINLINE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta outputMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_outputSupplier),
                        java.util.Optional.of(_outputConsumer),
                        java.util.Optional.of(_outputSupplierInner1),
                        java.util.Optional.of(_outputConsumerInner1),
                        _outputType,
                        FIELD_OUTPUT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta styleMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_styleSupplier),
                        java.util.Optional.of(_styleConsumer),
                        java.util.Optional.of(_styleSupplierInner1),
                        java.util.Optional.of(_styleConsumerInner1),
                        _styleType,
                        FIELD_STYLE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta mutatorMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_mutatorSupplier),
                        java.util.Optional.of(_mutatorConsumer),
                        java.util.Optional.of(_mutatorSupplierInner1),
                        java.util.Optional.of(_mutatorConsumerInner1),
                        _mutatorType,
                        FIELD_MUTATOR,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extensionsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extensionsSupplier),
                        java.util.Optional.of(_extensionsConsumer),
                        java.util.Optional.of(_extensionsSupplierInner1),
                        java.util.Optional.of(_extensionsConsumerInner1),
                        _extensionsType,
                        FIELD_EXTENSIONS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public BlockBuilder builder() {
            return new schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl();
        }

        @Override
        public BlockBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.blk.Block._BlockBuilderImpl(cc);
        }

        public BlockDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Block>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TYPE, typeMeta);
                                        put(FIELD_CATEGORY, categoryMeta);
                                        put(FIELD_MESSAGE0, message0Meta);
                                        put(FIELD_ARGS0, args0Meta);
                                        put(FIELD_MESSAGE1, message1Meta);
                                        put(FIELD_ARGS1, args1Meta);
                                        put(FIELD_MESSAGE2, message2Meta);
                                        put(FIELD_ARGS2, args2Meta);
                                        put(FIELD_MESSAGE3, message3Meta);
                                        put(FIELD_ARGS3, args3Meta);
                                        put(FIELD_MESSAGE4, message4Meta);
                                        put(FIELD_ARGS4, args4Meta);
                                        put(FIELD_MESSAGE5, message5Meta);
                                        put(FIELD_ARGS5, args5Meta);
                                        put(FIELD_COLOUR, colourMeta);
                                        put(FIELD_TOOLTIP, tooltipMeta);
                                        put(FIELD_HELPURL, helpUrlMeta);
                                        put(FIELD_PREVIOUSSTATEMENT, previousStatementMeta);
                                        put(FIELD_NEXTSTATEMENT, nextStatementMeta);
                                        put(FIELD_INPUTSINLINE, inputsInlineMeta);
                                        put(FIELD_OUTPUT, outputMeta);
                                        put(FIELD_STYLE, styleMeta);
                                        put(FIELD_MUTATOR, mutatorMeta);
                                        put(FIELD_EXTENSIONS, extensionsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Block>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TYPE:
                    return FIELD_TYPE;
                case FIELD_ID_CATEGORY:
                    return FIELD_CATEGORY;
                case FIELD_ID_MESSAGE0:
                    return FIELD_MESSAGE0;
                case FIELD_ID_ARGS0:
                    return FIELD_ARGS0;
                case FIELD_ID_MESSAGE1:
                    return FIELD_MESSAGE1;
                case FIELD_ID_ARGS1:
                    return FIELD_ARGS1;
                case FIELD_ID_MESSAGE2:
                    return FIELD_MESSAGE2;
                case FIELD_ID_ARGS2:
                    return FIELD_ARGS2;
                case FIELD_ID_MESSAGE3:
                    return FIELD_MESSAGE3;
                case FIELD_ID_ARGS3:
                    return FIELD_ARGS3;
                case FIELD_ID_MESSAGE4:
                    return FIELD_MESSAGE4;
                case FIELD_ID_ARGS4:
                    return FIELD_ARGS4;
                case FIELD_ID_MESSAGE5:
                    return FIELD_MESSAGE5;
                case FIELD_ID_ARGS5:
                    return FIELD_ARGS5;
                case FIELD_ID_COLOUR:
                    return FIELD_COLOUR;
                case FIELD_ID_TOOLTIP:
                    return FIELD_TOOLTIP;
                case FIELD_ID_HELPURL:
                    return FIELD_HELPURL;
                case FIELD_ID_PREVIOUSSTATEMENT:
                    return FIELD_PREVIOUSSTATEMENT;
                case FIELD_ID_NEXTSTATEMENT:
                    return FIELD_NEXTSTATEMENT;
                case FIELD_ID_INPUTSINLINE:
                    return FIELD_INPUTSINLINE;
                case FIELD_ID_OUTPUT:
                    return FIELD_OUTPUT;
                case FIELD_ID_STYLE:
                    return FIELD_STYLE;
                case FIELD_ID_MUTATOR:
                    return FIELD_MUTATOR;
                case FIELD_ID_EXTENSIONS:
                    return FIELD_EXTENSIONS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.blk.Block{args0:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;args1:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;args2:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;args3:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;args4:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;args5:optional<list<schemarise.alfa.runtime.model.blk.BlockBodyArg[b83e9cda]>;>;category:string;colour:int;extensions:optional<list<string>;>;helpUrl:string;inputsInline:optional<boolean;>;message0:optional<string;>;message1:optional<string;>;message2:optional<string;>;message3:optional<string;>;message4:optional<string;>;message5:optional<string;>;mutator:optional<string;>;nextStatement:optional<string;>;output:optional<string;>;previousStatement:optional<string;>;style:optional<string;>;tooltip:string;type:string;}
            schemarise.alfa.runtime.model.blk.Block{category:string;colour:int;helpUrl:string;tooltip:string;type:string;}
            */
            return "193ad9a:a6881077";
        }
    }
    // </editor-fold>

}
