// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__RaiseExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.asserts.SeverityType getSeverity();

    schemarise.alfa.runtime.model.asserts.DataQualityType getDqType();

    schemarise.alfa.runtime.model.asserts.ConstraintType getConstraintType();

    schemarise.alfa.runtime.model.IExpression getMessage();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__RaiseExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__RaiseExpr
                ._Expression__RaiseExprBuilderImpl();
    }

    public static Expression__RaiseExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__RaiseExpr
                                    .Expression__RaiseExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__RaiseExpr
                    ._Expression__RaiseExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__RaiseExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__RaiseExprBuilder setSeverity(
                schemarise.alfa.runtime.model.asserts.SeverityType v);

        schemarise.alfa.runtime.model.asserts.SeverityType getSeverity();

        Expression__RaiseExprBuilder setDqType(
                schemarise.alfa.runtime.model.asserts.DataQualityType v);

        schemarise.alfa.runtime.model.asserts.DataQualityType getDqType();

        Expression__RaiseExprBuilder setConstraintType(
                schemarise.alfa.runtime.model.asserts.ConstraintType v);

        schemarise.alfa.runtime.model.asserts.ConstraintType getConstraintType();

        Expression__RaiseExprBuilder setMessage(schemarise.alfa.runtime.model.IExpression v);

        schemarise.alfa.runtime.model.IExpression getMessage();

        Expression__RaiseExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__RaiseExprBuilderImpl extends _Expression__RaiseExpr__Base__
            implements Expression__RaiseExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__RaiseExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__RaiseExprBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(4);
            __missingFields.set(0, 4);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__RaiseExpr
                    .Expression__RaiseExprDescriptor.INSTANCE;
        }

        public Expression__RaiseExprBuilder setSeverity(
                schemarise.alfa.runtime.model.asserts.SeverityType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Severity", v);
            this._severity = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            .Expression__RaiseExprDescriptor.FIELD_ID_SEVERITY);
            return this;
        }

        public Expression__RaiseExprBuilder setDqType(
                schemarise.alfa.runtime.model.asserts.DataQualityType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DqType", v);
            this._dqType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            .Expression__RaiseExprDescriptor.FIELD_ID_DQTYPE);
            return this;
        }

        public Expression__RaiseExprBuilder setConstraintType(
                schemarise.alfa.runtime.model.asserts.ConstraintType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ConstraintType", v);
            this._constraintType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            .Expression__RaiseExprDescriptor.FIELD_ID_CONSTRAINTTYPE);
            return this;
        }

        public Expression__RaiseExprBuilder setMessage(
                schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message", v);
            this._message = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            .Expression__RaiseExprDescriptor.FIELD_ID_MESSAGE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "severity":
                    setSeverity((schemarise.alfa.runtime.model.asserts.SeverityType) val);
                    break;
                case "dqType":
                    setDqType((schemarise.alfa.runtime.model.asserts.DataQualityType) val);
                    break;
                case "constraintType":
                    setConstraintType((schemarise.alfa.runtime.model.asserts.ConstraintType) val);
                    break;
                case "message":
                    setMessage((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__RaiseExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    4,
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            .Expression__RaiseExprDescriptor.INSTANCE);

            Expression__RaiseExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__RaiseExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _severity,
                                                _dqType,
                                                _constraintType,
                                                _message);
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__RaiseExpr
                                ._Expression__RaiseExprConcrete(
                                _severity, _dqType, _constraintType, _message);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__RaiseExpr",
                    new java.lang.String[] {"severity", "dqType", "constraintType", "message"},
                    new java.lang.Object[] {_severity, _dqType, _constraintType, _message});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__RaiseExprConcrete extends _Expression__RaiseExpr__Base__
            implements Expression__RaiseExpr {

        private _Expression__RaiseExprConcrete() {
            super();
        }

        private _Expression__RaiseExprConcrete(
                schemarise.alfa.runtime.model.asserts.SeverityType _severity,
                schemarise.alfa.runtime.model.asserts.DataQualityType _dqType,
                schemarise.alfa.runtime.model.asserts.ConstraintType _constraintType,
                schemarise.alfa.runtime.model.IExpression _message) {
            super(_severity, _dqType, _constraintType, _message);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__RaiseExpr__Base__ {
        public schemarise.alfa.runtime.model.asserts.SeverityType _severity;
        public schemarise.alfa.runtime.model.asserts.DataQualityType _dqType;
        public schemarise.alfa.runtime.model.asserts.ConstraintType _constraintType;
        public schemarise.alfa.runtime.model.IExpression _message;

        public _Expression__RaiseExpr__Base__() {}

        public _Expression__RaiseExpr__Base__(
                schemarise.alfa.runtime.model.asserts.SeverityType _severity,
                schemarise.alfa.runtime.model.asserts.DataQualityType _dqType,
                schemarise.alfa.runtime.model.asserts.ConstraintType _constraintType,
                schemarise.alfa.runtime.model.IExpression _message) {
            this._severity = _severity;
            this._dqType = _dqType;
            this._constraintType = _constraintType;
            this._message = _message;
        }

        public schemarise.alfa.runtime.model.asserts.SeverityType getSeverity() {
            return _severity;
        }

        public schemarise.alfa.runtime.model.asserts.DataQualityType getDqType() {
            return _dqType;
        }

        public schemarise.alfa.runtime.model.asserts.ConstraintType getConstraintType() {
            return _constraintType;
        }

        public schemarise.alfa.runtime.model.IExpression getMessage() {
            return _message;
        }

        public int hashCode() {
            return java.util.Objects.hash(_severity, _dqType, _constraintType, _message);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__RaiseExpr",
                    new java.lang.String[] {"severity", "dqType", "constraintType", "message"},
                    new java.lang.Object[] {_severity, _dqType, _constraintType, _message});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__RaiseExpr
                            ._Expression__RaiseExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__RaiseExpr._Expression__RaiseExprConcrete rhs =
                    (schemarise.alfa.runtime.model.Expression__RaiseExpr
                                    ._Expression__RaiseExprConcrete)
                            o;
            return java.util.Objects.equals(_severity, rhs._severity)
                    && java.util.Objects.equals(_dqType, rhs._dqType)
                    && java.util.Objects.equals(_constraintType, rhs._constraintType)
                    && java.util.Objects.equals(_message, rhs._message);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__RaiseExpr
                    .Expression__RaiseExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "severity":
                    return _severity;
                case "dqType":
                    return _dqType;
                case "constraintType":
                    return _constraintType;
                case "message":
                    return _message;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getSeverity().validate(__builderConfig);
            getDqType().validate(__builderConfig);
            getConstraintType().validate(__builderConfig);
            getMessage().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__RaiseExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__RaiseExpr";
        public static schemarise.alfa.runtime.model.Expression__RaiseExpr
                        .Expression__RaiseExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__RaiseExpr
                                .Expression__RaiseExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_SEVERITY = 0;
        public static final String FIELD_SEVERITY = "severity";

        public static final short FIELD_ID_DQTYPE = 1;
        public static final String FIELD_DQTYPE = "dqType";

        public static final short FIELD_ID_CONSTRAINTTYPE = 2;
        public static final String FIELD_CONSTRAINTTYPE = "constraintType";

        public static final short FIELD_ID_MESSAGE = 3;
        public static final String FIELD_MESSAGE = "message";

        private schemarise.alfa.runtime.model.UdtDataType _severityType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.asserts.SeverityType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _dqTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName(
                                "schemarise.alfa.runtime.model.asserts.DataQualityType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _constraintTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName(
                                "schemarise.alfa.runtime.model.asserts.ConstraintType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _messageType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.asserts.SeverityType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.asserts.SeverityType>
                _severityConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _severityType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr
                                ._Expression__RaiseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _severityConsumer =
                        (builder, supplier) -> {
                            builder.setSeverity(_severityConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.asserts.DataQualityType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.asserts.DataQualityType>
                _dqTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dqTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr
                                ._Expression__RaiseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dqTypeConsumer =
                        (builder, supplier) -> {
                            builder.setDqType(_dqTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.asserts.ConstraintType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.asserts.ConstraintType>
                _constraintTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _constraintTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr
                                ._Expression__RaiseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _constraintTypeConsumer =
                        (builder, supplier) -> {
                            builder.setConstraintType(
                                    _constraintTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _messageConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _messageType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr
                                ._Expression__RaiseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _messageConsumer =
                        (builder, supplier) -> {
                            builder.setMessage(_messageConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.asserts.SeverityType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.SeverityType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _severitySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _severityType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _severitySupplier =
                        (p, consumer) -> {
                            _severitySupplierInner1.accept(p.getSeverity(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.asserts.DataQualityType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.DataQualityType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dqTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dqTypeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dqTypeSupplier =
                        (p, consumer) -> {
                            _dqTypeSupplierInner1.accept(p.getDqType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.asserts.ConstraintType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ConstraintType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _constraintTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _constraintTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _constraintTypeSupplier =
                        (p, consumer) -> {
                            _constraintTypeSupplierInner1.accept(p.getConstraintType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _messageType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__RaiseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplier =
                        (p, consumer) -> {
                            _messageSupplierInner1.accept(p.getMessage(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__RaiseExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta severityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_severitySupplier),
                        java.util.Optional.of(_severityConsumer),
                        java.util.Optional.of(_severitySupplierInner1),
                        java.util.Optional.of(_severityConsumerInner1),
                        _severityType,
                        FIELD_SEVERITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dqTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dqTypeSupplier),
                        java.util.Optional.of(_dqTypeConsumer),
                        java.util.Optional.of(_dqTypeSupplierInner1),
                        java.util.Optional.of(_dqTypeConsumerInner1),
                        _dqTypeType,
                        FIELD_DQTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta constraintTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_constraintTypeSupplier),
                        java.util.Optional.of(_constraintTypeConsumer),
                        java.util.Optional.of(_constraintTypeSupplierInner1),
                        java.util.Optional.of(_constraintTypeConsumerInner1),
                        _constraintTypeType,
                        FIELD_CONSTRAINTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta messageMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_messageSupplier),
                        java.util.Optional.of(_messageConsumer),
                        java.util.Optional.of(_messageSupplierInner1),
                        java.util.Optional.of(_messageConsumerInner1),
                        _messageType,
                        FIELD_MESSAGE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__RaiseExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__RaiseExpr
                    ._Expression__RaiseExprBuilderImpl();
        }

        @Override
        public Expression__RaiseExprBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__RaiseExpr
                    ._Expression__RaiseExprBuilderImpl(cc);
        }

        public Expression__RaiseExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__RaiseExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_SEVERITY, severityMeta);
                                        put(FIELD_DQTYPE, dqTypeMeta);
                                        put(FIELD_CONSTRAINTTYPE, constraintTypeMeta);
                                        put(FIELD_MESSAGE, messageMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__RaiseExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_SEVERITY:
                    return FIELD_SEVERITY;
                case FIELD_ID_DQTYPE:
                    return FIELD_DQTYPE;
                case FIELD_ID_CONSTRAINTTYPE:
                    return FIELD_CONSTRAINTTYPE;
                case FIELD_ID_MESSAGE:
                    return FIELD_MESSAGE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__RaiseExpr{constraintType:schemarise.alfa.runtime.model.asserts.ConstraintType[bedbd588];dqType:schemarise.alfa.runtime.model.asserts.DataQualityType[2812750d];message:schemarise.alfa.runtime.model.IExpression[5fb330b3];severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];}
            schemarise.alfa.runtime.model.Expression__RaiseExpr{constraintType:schemarise.alfa.runtime.model.asserts.ConstraintType[bedbd588];dqType:schemarise.alfa.runtime.model.asserts.DataQualityType[2812750d];message:schemarise.alfa.runtime.model.IExpression[5fb330b3];severity:schemarise.alfa.runtime.model.asserts.SeverityType[d5587b0b];}
            */
            return "af4c4fab:";
        }
    }
    // </editor-fold>

}
