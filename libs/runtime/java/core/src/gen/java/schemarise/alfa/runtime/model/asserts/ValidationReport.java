// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.asserts;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ValidationReport extends com.schemarise.alfa.runtime.Entity {

    java.time.LocalDateTime getTimestamp();

    java.util.Optional<java.lang.String> getSourceSystem();

    java.util.Optional<java.lang.String> getSourceSubsystem();

    java.util.Optional<java.lang.String> getSourceFeed();

    java.util.Optional<java.lang.String> getSourceSubfeed();

    java.util.Optional<java.lang.String> getSourceInfo();

    java.util.Optional<java.lang.String> getDataFormat();

    java.util.Optional<java.lang.String> getDataFormatInfo();

    long getTotalRecords();

    long getTotalErrors();

    long getTotalWarnings();

    java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> getAlerts();

    public java.util.Optional<schemarise.alfa.runtime.model.asserts.ValidationReportKey> get$key();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ValidationReportBuilder builder() {
        return new schemarise.alfa.runtime.model.asserts.ValidationReport
                ._ValidationReportBuilderImpl();
    }

    public static ValidationReportBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.asserts.ValidationReport
                                    .ValidationReportDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.asserts.ValidationReport
                    ._ValidationReportBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ValidationReportBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    com.schemarise.alfa.runtime.EntityBuilder<
                            schemarise.alfa.runtime.model.asserts.ValidationReportKey> {
        ValidationReportBuilder setTimestamp(java.time.LocalDateTime v);

        java.time.LocalDateTime getTimestamp();

        ValidationReportBuilder setSourceSystem(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setSourceSystem(java.lang.String v);

        java.util.Optional<java.lang.String> getSourceSystem();

        ValidationReportBuilder setSourceSubsystem(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setSourceSubsystem(java.lang.String v);

        java.util.Optional<java.lang.String> getSourceSubsystem();

        ValidationReportBuilder setSourceFeed(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setSourceFeed(java.lang.String v);

        java.util.Optional<java.lang.String> getSourceFeed();

        ValidationReportBuilder setSourceSubfeed(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setSourceSubfeed(java.lang.String v);

        java.util.Optional<java.lang.String> getSourceSubfeed();

        ValidationReportBuilder setSourceInfo(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setSourceInfo(java.lang.String v);

        java.util.Optional<java.lang.String> getSourceInfo();

        ValidationReportBuilder setDataFormat(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setDataFormat(java.lang.String v);

        java.util.Optional<java.lang.String> getDataFormat();

        ValidationReportBuilder setDataFormatInfo(java.util.Optional<java.lang.String> v);

        ValidationReportBuilder setDataFormatInfo(java.lang.String v);

        java.util.Optional<java.lang.String> getDataFormatInfo();

        ValidationReportBuilder setTotalRecords(long v);

        long getTotalRecords();

        ValidationReportBuilder setTotalErrors(long v);

        long getTotalErrors();

        ValidationReportBuilder setTotalWarnings(long v);

        long getTotalWarnings();

        ValidationReportBuilder addAlerts(schemarise.alfa.runtime.model.asserts.ValidationAlert e);

        ValidationReportBuilder addAllAlerts(
                java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> all);

        java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> getAlerts();

        public ValidationReportBuilder set$key(
                schemarise.alfa.runtime.model.asserts.ValidationReportKey k);

        ValidationReport build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ValidationReportBuilderImpl extends _ValidationReport__Base__
            implements ValidationReportBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ValidationReportBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ValidationReportBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(12);
            __missingFields.set(0, 12);
            setSourceSystem(java.util.Optional.empty());
            setSourceSubsystem(java.util.Optional.empty());
            setSourceFeed(java.util.Optional.empty());
            setSourceSubfeed(java.util.Optional.empty());
            setSourceInfo(java.util.Optional.empty());
            setDataFormat(java.util.Optional.empty());
            setDataFormatInfo(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationReport.ValidationReportDescriptor
                    .INSTANCE;
        }

        public ValidationReportBuilder setTimestamp(java.time.LocalDateTime v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Timestamp", v);
            this._timestamp = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_TIMESTAMP);
            return this;
        }

        public ValidationReportBuilder setSourceSystem(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceSystem", v);
            this._sourceSystem = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESYSTEM);
            return this;
        }

        public ValidationReportBuilder setSourceSystem(java.lang.String v) {
            this._sourceSystem = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESYSTEM);
            return this;
        }

        public ValidationReportBuilder setSourceSubsystem(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceSubsystem", v);
            this._sourceSubsystem = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESUBSYSTEM);
            return this;
        }

        public ValidationReportBuilder setSourceSubsystem(java.lang.String v) {
            this._sourceSubsystem = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESUBSYSTEM);
            return this;
        }

        public ValidationReportBuilder setSourceFeed(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceFeed", v);
            this._sourceFeed = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCEFEED);
            return this;
        }

        public ValidationReportBuilder setSourceFeed(java.lang.String v) {
            this._sourceFeed = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCEFEED);
            return this;
        }

        public ValidationReportBuilder setSourceSubfeed(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceSubfeed", v);
            this._sourceSubfeed = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESUBFEED);
            return this;
        }

        public ValidationReportBuilder setSourceSubfeed(java.lang.String v) {
            this._sourceSubfeed = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCESUBFEED);
            return this;
        }

        public ValidationReportBuilder setSourceInfo(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SourceInfo", v);
            this._sourceInfo = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCEINFO);
            return this;
        }

        public ValidationReportBuilder setSourceInfo(java.lang.String v) {
            this._sourceInfo = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_SOURCEINFO);
            return this;
        }

        public ValidationReportBuilder setDataFormat(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DataFormat", v);
            this._dataFormat = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_DATAFORMAT);
            return this;
        }

        public ValidationReportBuilder setDataFormat(java.lang.String v) {
            this._dataFormat = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_DATAFORMAT);
            return this;
        }

        public ValidationReportBuilder setDataFormatInfo(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DataFormatInfo", v);
            this._dataFormatInfo = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_DATAFORMATINFO);
            return this;
        }

        public ValidationReportBuilder setDataFormatInfo(java.lang.String v) {
            this._dataFormatInfo = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_DATAFORMATINFO);
            return this;
        }

        public ValidationReportBuilder setTotalRecords(long v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TotalRecords", v);
            this._totalRecords = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_TOTALRECORDS);
            return this;
        }

        public ValidationReportBuilder setTotalErrors(long v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TotalErrors", v);
            this._totalErrors = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_TOTALERRORS);
            return this;
        }

        public ValidationReportBuilder setTotalWarnings(long v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TotalWarnings", v);
            this._totalWarnings = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_TOTALWARNINGS);
            return this;
        }

        private void createAlerts() {
            this._alerts = new java.util.ArrayList<>();
        }

        public ValidationReportBuilder addAlerts(
                schemarise.alfa.runtime.model.asserts.ValidationAlert e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Alerts", e);
            if (this._alerts == null) createAlerts();
            this._alerts.add(e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_ALERTS);
            return this;
        }

        public ValidationReportBuilder setAlerts(
                int index, schemarise.alfa.runtime.model.asserts.ValidationAlert e) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Alerts", e);
            if (this._alerts == null) createAlerts();
            this._alerts.set(index, e);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_ALERTS);
            return this;
        }

        public ValidationReportBuilder addAllAlerts(
                java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Alerts", all);
            if (this._alerts == null) createAlerts();
            this._alerts.addAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_ALERTS);
            return this;
        }

        private ValidationReportBuilder setAlerts(
                java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Alerts", all);
            this._alerts = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.FIELD_ID_ALERTS);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Timestamp":
                    setTimestamp((java.time.LocalDateTime) val);
                    break;
                case "SourceSystem":
                    setSourceSystem((java.util.Optional<java.lang.String>) val);
                    break;
                case "SourceSubsystem":
                    setSourceSubsystem((java.util.Optional<java.lang.String>) val);
                    break;
                case "SourceFeed":
                    setSourceFeed((java.util.Optional<java.lang.String>) val);
                    break;
                case "SourceSubfeed":
                    setSourceSubfeed((java.util.Optional<java.lang.String>) val);
                    break;
                case "SourceInfo":
                    setSourceInfo((java.util.Optional<java.lang.String>) val);
                    break;
                case "DataFormat":
                    setDataFormat((java.util.Optional<java.lang.String>) val);
                    break;
                case "DataFormatInfo":
                    setDataFormatInfo((java.util.Optional<java.lang.String>) val);
                    break;
                case "TotalRecords":
                    setTotalRecords((long) val);
                    break;
                case "TotalErrors":
                    setTotalErrors((long) val);
                    break;
                case "TotalWarnings":
                    setTotalWarnings((long) val);
                    break;
                case "Alerts":
                    setAlerts(
                            (java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ValidationReportBuilder set$key(
                schemarise.alfa.runtime.model.asserts.ValidationReportKey k) {
            this._key = k;
            return this;
        }

        public schemarise.alfa.runtime.model.asserts.ValidationReportKey assignedKey() {
            return this._key;
        }

        public ValidationReport build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    12,
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            .ValidationReportDescriptor.INSTANCE);
            if (_key == null)
                builderConfig()
                        .getAssertListener()
                        .addFailure(
                                schemarise.alfa.runtime.model.asserts.ValidationAlert.builder()
                                        .setMessage("Entity key not set")
                                        .setTypeName(
                                                java.util.Optional.of(
                                                        "schemarise.alfa.runtime.model.asserts.ValidationReport"))
                                        .setViolatedConstraint(
                                                java.util.Optional.of(
                                                        schemarise.alfa.runtime.model.asserts
                                                                .ConstraintType
                                                                .MandatoryFieldNotSet)));
            ValidationReport obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ValidationReport)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _key,
                                                _timestamp,
                                                _sourceSystem,
                                                _sourceSubsystem,
                                                _sourceFeed,
                                                _sourceSubfeed,
                                                _sourceInfo,
                                                _dataFormat,
                                                _dataFormatInfo,
                                                _totalRecords,
                                                _totalErrors,
                                                _totalWarnings,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableList(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .asserts.ValidationReport
                                                                        .ValidationReportDescriptor
                                                                        .INSTANCE
                                                                        ._alertsSupplierInner1,
                                                                _alerts));
            else
                obj =
                        new schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportConcrete(
                                _key,
                                _timestamp,
                                _sourceSystem,
                                _sourceSubsystem,
                                _sourceFeed,
                                _sourceSubfeed,
                                _sourceInfo,
                                _dataFormat,
                                _dataFormatInfo,
                                _totalRecords,
                                _totalErrors,
                                _totalWarnings,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableList(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                                .ValidationReportDescriptor.INSTANCE
                                                ._alertsSupplierInner1,
                                        _alerts));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationReport",
                    new java.lang.String[] {
                        "Id",
                        "Timestamp",
                        "SourceSystem",
                        "SourceSubsystem",
                        "SourceFeed",
                        "SourceSubfeed",
                        "SourceInfo",
                        "DataFormat",
                        "DataFormatInfo",
                        "TotalRecords",
                        "TotalErrors",
                        "TotalWarnings",
                        "Alerts"
                    },
                    new java.lang.Object[] {
                        _key.getId(),
                        _timestamp,
                        _sourceSystem,
                        _sourceSubsystem,
                        _sourceFeed,
                        _sourceSubfeed,
                        _sourceInfo,
                        _dataFormat,
                        _dataFormatInfo,
                        _totalRecords,
                        _totalErrors,
                        _totalWarnings,
                        _alerts
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ValidationReportConcrete extends _ValidationReport__Base__
            implements ValidationReport {

        private _ValidationReportConcrete() {
            super();
        }

        private _ValidationReportConcrete(
                schemarise.alfa.runtime.model.asserts.ValidationReportKey _key,
                java.time.LocalDateTime _timestamp,
                java.util.Optional<java.lang.String> _sourceSystem,
                java.util.Optional<java.lang.String> _sourceSubsystem,
                java.util.Optional<java.lang.String> _sourceFeed,
                java.util.Optional<java.lang.String> _sourceSubfeed,
                java.util.Optional<java.lang.String> _sourceInfo,
                java.util.Optional<java.lang.String> _dataFormat,
                java.util.Optional<java.lang.String> _dataFormatInfo,
                long _totalRecords,
                long _totalErrors,
                long _totalWarnings,
                java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> _alerts) {
            super(
                    _key,
                    _timestamp,
                    _sourceSystem,
                    _sourceSubsystem,
                    _sourceFeed,
                    _sourceSubfeed,
                    _sourceInfo,
                    _dataFormat,
                    _dataFormatInfo,
                    _totalRecords,
                    _totalErrors,
                    _totalWarnings,
                    _alerts);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ValidationReport__Base__ {
        public java.time.LocalDateTime _timestamp;
        public java.util.Optional<java.lang.String> _sourceSystem;
        public java.util.Optional<java.lang.String> _sourceSubsystem;
        public java.util.Optional<java.lang.String> _sourceFeed;
        public java.util.Optional<java.lang.String> _sourceSubfeed;
        public java.util.Optional<java.lang.String> _sourceInfo;
        public java.util.Optional<java.lang.String> _dataFormat;
        public java.util.Optional<java.lang.String> _dataFormatInfo;
        public long _totalRecords;
        public long _totalErrors;
        public long _totalWarnings;
        public java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> _alerts;
        public schemarise.alfa.runtime.model.asserts.ValidationReportKey _key;

        public _ValidationReport__Base__() {}

        public _ValidationReport__Base__(
                schemarise.alfa.runtime.model.asserts.ValidationReportKey _key,
                java.time.LocalDateTime _timestamp,
                java.util.Optional<java.lang.String> _sourceSystem,
                java.util.Optional<java.lang.String> _sourceSubsystem,
                java.util.Optional<java.lang.String> _sourceFeed,
                java.util.Optional<java.lang.String> _sourceSubfeed,
                java.util.Optional<java.lang.String> _sourceInfo,
                java.util.Optional<java.lang.String> _dataFormat,
                java.util.Optional<java.lang.String> _dataFormatInfo,
                long _totalRecords,
                long _totalErrors,
                long _totalWarnings,
                java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> _alerts) {
            this._timestamp = _timestamp;
            this._sourceSystem = _sourceSystem;
            this._sourceSubsystem = _sourceSubsystem;
            this._sourceFeed = _sourceFeed;
            this._sourceSubfeed = _sourceSubfeed;
            this._sourceInfo = _sourceInfo;
            this._dataFormat = _dataFormat;
            this._dataFormatInfo = _dataFormatInfo;
            this._totalRecords = _totalRecords;
            this._totalErrors = _totalErrors;
            this._totalWarnings = _totalWarnings;
            this._alerts = _alerts;
            this._key = _key;
        }

        public java.time.LocalDateTime getTimestamp() {
            return _timestamp;
        }

        public java.util.Optional<java.lang.String> getSourceSystem() {
            return _sourceSystem;
        }

        public java.util.Optional<java.lang.String> getSourceSubsystem() {
            return _sourceSubsystem;
        }

        public java.util.Optional<java.lang.String> getSourceFeed() {
            return _sourceFeed;
        }

        public java.util.Optional<java.lang.String> getSourceSubfeed() {
            return _sourceSubfeed;
        }

        public java.util.Optional<java.lang.String> getSourceInfo() {
            return _sourceInfo;
        }

        public java.util.Optional<java.lang.String> getDataFormat() {
            return _dataFormat;
        }

        public java.util.Optional<java.lang.String> getDataFormatInfo() {
            return _dataFormatInfo;
        }

        public long getTotalRecords() {
            return _totalRecords;
        }

        public long getTotalErrors() {
            return _totalErrors;
        }

        public long getTotalWarnings() {
            return _totalWarnings;
        }

        public java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert> getAlerts() {
            return _alerts;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _key,
                    _timestamp,
                    _sourceSystem,
                    _sourceSubsystem,
                    _sourceFeed,
                    _sourceSubfeed,
                    _sourceInfo,
                    _dataFormat,
                    _dataFormatInfo,
                    _totalRecords,
                    _totalErrors,
                    _totalWarnings,
                    _alerts);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.asserts.ValidationReport",
                    new java.lang.String[] {
                        "Id",
                        "Timestamp",
                        "SourceSystem",
                        "SourceSubsystem",
                        "SourceFeed",
                        "SourceSubfeed",
                        "SourceInfo",
                        "DataFormat",
                        "DataFormatInfo",
                        "TotalRecords",
                        "TotalErrors",
                        "TotalWarnings",
                        "Alerts"
                    },
                    new java.lang.Object[] {
                        _key.getId(),
                        _timestamp,
                        _sourceSystem,
                        _sourceSubsystem,
                        _sourceFeed,
                        _sourceSubfeed,
                        _sourceInfo,
                        _dataFormat,
                        _dataFormatInfo,
                        _totalRecords,
                        _totalErrors,
                        _totalWarnings,
                        _alerts
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.asserts.ValidationReport
                            ._ValidationReportConcrete)) return false;
            schemarise.alfa.runtime.model.asserts.ValidationReport._ValidationReportConcrete rhs =
                    (schemarise.alfa.runtime.model.asserts.ValidationReport
                                    ._ValidationReportConcrete)
                            o;
            return java.util.Objects.equals(_timestamp, rhs._timestamp)
                    && java.util.Objects.equals(_sourceSystem, rhs._sourceSystem)
                    && java.util.Objects.equals(_sourceSubsystem, rhs._sourceSubsystem)
                    && java.util.Objects.equals(_sourceFeed, rhs._sourceFeed)
                    && java.util.Objects.equals(_sourceSubfeed, rhs._sourceSubfeed)
                    && java.util.Objects.equals(_sourceInfo, rhs._sourceInfo)
                    && java.util.Objects.equals(_dataFormat, rhs._dataFormat)
                    && java.util.Objects.equals(_dataFormatInfo, rhs._dataFormatInfo)
                    && _totalRecords == rhs._totalRecords
                    && _totalErrors == rhs._totalErrors
                    && _totalWarnings == rhs._totalWarnings
                    && java.util.Objects.equals(_alerts, rhs._alerts)
                    && java.util.Objects.equals(_key, rhs._key);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<schemarise.alfa.runtime.model.asserts.ValidationReportKey>
                get$key() {
            return java.util.Optional.ofNullable(_key);
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.asserts.ValidationReport.ValidationReportDescriptor
                    .INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Timestamp":
                    return _timestamp;
                case "SourceSystem":
                    return _sourceSystem;
                case "SourceSubsystem":
                    return _sourceSubsystem;
                case "SourceFeed":
                    return _sourceFeed;
                case "SourceSubfeed":
                    return _sourceSubfeed;
                case "SourceInfo":
                    return _sourceInfo;
                case "DataFormat":
                    return _dataFormat;
                case "DataFormatInfo":
                    return _dataFormatInfo;
                case "TotalRecords":
                    return _totalRecords;
                case "TotalErrors":
                    return _totalErrors;
                case "TotalWarnings":
                    return _totalWarnings;
                case "Alerts":
                    return _alerts;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            java.util.stream.IntStream.range(0, getAlerts().size())
                    .forEach(
                            e0 -> {
                                getAlerts().get(e0).validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ValidationReportDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.asserts.ValidationReport";
        public static schemarise.alfa.runtime.model.asserts.ValidationReport
                        .ValidationReportDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.asserts.ValidationReport
                                .ValidationReportDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.entityType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TIMESTAMP = 0;
        public static final String FIELD_TIMESTAMP = "Timestamp";

        public static final short FIELD_ID_SOURCESYSTEM = 1;
        public static final String FIELD_SOURCESYSTEM = "SourceSystem";

        public static final short FIELD_ID_SOURCESUBSYSTEM = 2;
        public static final String FIELD_SOURCESUBSYSTEM = "SourceSubsystem";

        public static final short FIELD_ID_SOURCEFEED = 3;
        public static final String FIELD_SOURCEFEED = "SourceFeed";

        public static final short FIELD_ID_SOURCESUBFEED = 4;
        public static final String FIELD_SOURCESUBFEED = "SourceSubfeed";

        public static final short FIELD_ID_SOURCEINFO = 5;
        public static final String FIELD_SOURCEINFO = "SourceInfo";

        public static final short FIELD_ID_DATAFORMAT = 6;
        public static final String FIELD_DATAFORMAT = "DataFormat";

        public static final short FIELD_ID_DATAFORMATINFO = 7;
        public static final String FIELD_DATAFORMATINFO = "DataFormatInfo";

        public static final short FIELD_ID_TOTALRECORDS = 8;
        public static final String FIELD_TOTALRECORDS = "TotalRecords";

        public static final short FIELD_ID_TOTALERRORS = 9;
        public static final String FIELD_TOTALERRORS = "TotalErrors";

        public static final short FIELD_ID_TOTALWARNINGS = 10;
        public static final String FIELD_TOTALWARNINGS = "TotalWarnings";

        public static final short FIELD_ID_ALERTS = 11;
        public static final String FIELD_ALERTS = "Alerts";

        private schemarise.alfa.runtime.model.ScalarDataType _timestampType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.datetimeType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceSystemType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceSubsystemType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceFeedType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceSubfeedType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _sourceInfoType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _dataFormatType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _dataFormatInfoType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _totalRecordsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.longType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _totalErrorsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.longType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _totalWarningsType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.longType)
                        .build();

        private schemarise.alfa.runtime.model.ListDataType _alertsType =
                schemarise.alfa.runtime.model.ListDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.asserts.ValidationAlert")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer datetime -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.time.LocalDateTime>
                _timestampConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.datetimeValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timestampType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _timestampConsumer =
                        (builder, supplier) -> {
                            builder.setTimestamp(_timestampConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceSystemConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceSystemConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSystemType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceSystemType),
                                    _sourceSystemConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceSystemConsumer =
                        (builder, supplier) -> {
                            builder.setSourceSystem(_sourceSystemConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceSubsystemConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceSubsystemConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSubsystemType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _sourceSubsystemType),
                                    _sourceSubsystemConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceSubsystemConsumer =
                        (builder, supplier) -> {
                            builder.setSourceSubsystem(
                                    _sourceSubsystemConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceFeedConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceFeedConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceFeedType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceFeedType),
                                    _sourceFeedConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceFeedConsumer =
                        (builder, supplier) -> {
                            builder.setSourceFeed(_sourceFeedConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceSubfeedConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceSubfeedConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSubfeedType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _sourceSubfeedType),
                                    _sourceSubfeedConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceSubfeedConsumer =
                        (builder, supplier) -> {
                            builder.setSourceSubfeed(_sourceSubfeedConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _sourceInfoConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _sourceInfoConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceInfoType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceInfoType),
                                    _sourceInfoConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _sourceInfoConsumer =
                        (builder, supplier) -> {
                            builder.setSourceInfo(_sourceInfoConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _dataFormatConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _dataFormatConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataFormatType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _dataFormatType),
                                    _dataFormatConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dataFormatConsumer =
                        (builder, supplier) -> {
                            builder.setDataFormat(_dataFormatConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _dataFormatInfoConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _dataFormatInfoConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataFormatInfoType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _dataFormatInfoType),
                                    _dataFormatInfoConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dataFormatInfoConsumer =
                        (builder, supplier) -> {
                            builder.setDataFormatInfo(
                                    _dataFormatInfoConsumerInner1.apply(supplier));
                        };
        /* -- Consumer long -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Long>
                _totalRecordsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.longValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalRecordsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _totalRecordsConsumer =
                        (builder, supplier) -> {
                            builder.setTotalRecords(_totalRecordsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer long -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Long>
                _totalErrorsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.longValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalErrorsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _totalErrorsConsumer =
                        (builder, supplier) -> {
                            builder.setTotalErrors(_totalErrorsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer long -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Long>
                _totalWarningsConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.longValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalWarningsType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _totalWarningsConsumer =
                        (builder, supplier) -> {
                            builder.setTotalWarnings(_totalWarningsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer list< schemarise.alfa.runtime.model.asserts.ValidationAlert > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert>>
                _alertsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.asserts.ValidationAlert>
                                    _alertsConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _alertsType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.listValue(
                                    ((schemarise.alfa.runtime.model.ListDataType) _alertsType),
                                    _alertsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport
                                ._ValidationReportBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _alertsConsumer =
                        (builder, supplier) -> {
                            builder.addAllAlerts(_alertsConsumerInner1.apply(supplier));
                        };

        /* -- Supplier datetime -- */
        java.util.function.BiConsumer<
                        java.time.LocalDateTime, com.schemarise.alfa.runtime.DataConsumer>
                _timestampSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _timestampType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _timestampSupplier =
                        (p, consumer) -> {
                            _timestampSupplierInner1.accept(p.getTimestamp(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSystemSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceSystemSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSystemType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceSystemType),
                                    pInner1,
                                    _sourceSystemSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSystemSupplier =
                        (p, consumer) -> {
                            _sourceSystemSupplierInner1.accept(p.getSourceSystem(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSubsystemSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceSubsystemSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSubsystemType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _sourceSubsystemType),
                                    pInner1,
                                    _sourceSubsystemSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSubsystemSupplier =
                        (p, consumer) -> {
                            _sourceSubsystemSupplierInner1.accept(p.getSourceSubsystem(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceFeedSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceFeedSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceFeedType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceFeedType),
                                    pInner1,
                                    _sourceFeedSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceFeedSupplier =
                        (p, consumer) -> {
                            _sourceFeedSupplierInner1.accept(p.getSourceFeed(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSubfeedSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceSubfeedSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceSubfeedType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _sourceSubfeedType),
                                    pInner1,
                                    _sourceSubfeedSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceSubfeedSupplier =
                        (p, consumer) -> {
                            _sourceSubfeedSupplierInner1.accept(p.getSourceSubfeed(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceInfoSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _sourceInfoSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _sourceInfoType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _sourceInfoType),
                                    pInner1,
                                    _sourceInfoSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _sourceInfoSupplier =
                        (p, consumer) -> {
                            _sourceInfoSupplierInner1.accept(p.getSourceInfo(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataFormatSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _dataFormatSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataFormatType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _dataFormatType),
                                    pInner1,
                                    _dataFormatSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataFormatSupplier =
                        (p, consumer) -> {
                            _dataFormatSupplierInner1.accept(p.getDataFormat(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataFormatInfoSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _dataFormatInfoSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _dataFormatInfoType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _dataFormatInfoType),
                                    pInner1,
                                    _dataFormatInfoSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataFormatInfoSupplier =
                        (p, consumer) -> {
                            _dataFormatInfoSupplierInner1.accept(p.getDataFormatInfo(), consumer);
                        };
        /* -- Supplier long -- */
        java.util.function.BiConsumer<java.lang.Long, com.schemarise.alfa.runtime.DataConsumer>
                _totalRecordsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalRecordsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _totalRecordsSupplier =
                        (p, consumer) -> {
                            _totalRecordsSupplierInner1.accept(p.getTotalRecords(), consumer);
                        };
        /* -- Supplier long -- */
        java.util.function.BiConsumer<java.lang.Long, com.schemarise.alfa.runtime.DataConsumer>
                _totalErrorsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalErrorsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _totalErrorsSupplier =
                        (p, consumer) -> {
                            _totalErrorsSupplierInner1.accept(p.getTotalErrors(), consumer);
                        };
        /* -- Supplier long -- */
        java.util.function.BiConsumer<java.lang.Long, com.schemarise.alfa.runtime.DataConsumer>
                _totalWarningsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _totalWarningsType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _totalWarningsSupplier =
                        (p, consumer) -> {
                            _totalWarningsSupplierInner1.accept(p.getTotalWarnings(), consumer);
                        };
        /* -- Supplier list< schemarise.alfa.runtime.model.asserts.ValidationAlert > -- */
        java.util.function.BiConsumer<
                        java.util.List<schemarise.alfa.runtime.model.asserts.ValidationAlert>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _alertsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.asserts.ValidationAlert,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _alertsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .ListDataType)
                                                                                _alertsType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ListDataType) _alertsType),
                                    pInner1,
                                    _alertsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.asserts.ValidationReport,
                        com.schemarise.alfa.runtime.DataConsumer>
                _alertsSupplier =
                        (p, consumer) -> {
                            _alertsSupplierInner1.accept(p.getAlerts(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ValidationReport, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta timestampMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_timestampSupplier),
                        java.util.Optional.of(_timestampConsumer),
                        java.util.Optional.of(_timestampSupplierInner1),
                        java.util.Optional.of(_timestampConsumerInner1),
                        _timestampType,
                        FIELD_TIMESTAMP,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceSystemMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceSystemSupplier),
                        java.util.Optional.of(_sourceSystemConsumer),
                        java.util.Optional.of(_sourceSystemSupplierInner1),
                        java.util.Optional.of(_sourceSystemConsumerInner1),
                        _sourceSystemType,
                        FIELD_SOURCESYSTEM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceSubsystemMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceSubsystemSupplier),
                        java.util.Optional.of(_sourceSubsystemConsumer),
                        java.util.Optional.of(_sourceSubsystemSupplierInner1),
                        java.util.Optional.of(_sourceSubsystemConsumerInner1),
                        _sourceSubsystemType,
                        FIELD_SOURCESUBSYSTEM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceFeedMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceFeedSupplier),
                        java.util.Optional.of(_sourceFeedConsumer),
                        java.util.Optional.of(_sourceFeedSupplierInner1),
                        java.util.Optional.of(_sourceFeedConsumerInner1),
                        _sourceFeedType,
                        FIELD_SOURCEFEED,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceSubfeedMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceSubfeedSupplier),
                        java.util.Optional.of(_sourceSubfeedConsumer),
                        java.util.Optional.of(_sourceSubfeedSupplierInner1),
                        java.util.Optional.of(_sourceSubfeedConsumerInner1),
                        _sourceSubfeedType,
                        FIELD_SOURCESUBFEED,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta sourceInfoMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_sourceInfoSupplier),
                        java.util.Optional.of(_sourceInfoConsumer),
                        java.util.Optional.of(_sourceInfoSupplierInner1),
                        java.util.Optional.of(_sourceInfoConsumerInner1),
                        _sourceInfoType,
                        FIELD_SOURCEINFO,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataFormatMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dataFormatSupplier),
                        java.util.Optional.of(_dataFormatConsumer),
                        java.util.Optional.of(_dataFormatSupplierInner1),
                        java.util.Optional.of(_dataFormatConsumerInner1),
                        _dataFormatType,
                        FIELD_DATAFORMAT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataFormatInfoMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dataFormatInfoSupplier),
                        java.util.Optional.of(_dataFormatInfoConsumer),
                        java.util.Optional.of(_dataFormatInfoSupplierInner1),
                        java.util.Optional.of(_dataFormatInfoConsumerInner1),
                        _dataFormatInfoType,
                        FIELD_DATAFORMATINFO,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta totalRecordsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_totalRecordsSupplier),
                        java.util.Optional.of(_totalRecordsConsumer),
                        java.util.Optional.of(_totalRecordsSupplierInner1),
                        java.util.Optional.of(_totalRecordsConsumerInner1),
                        _totalRecordsType,
                        FIELD_TOTALRECORDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta totalErrorsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_totalErrorsSupplier),
                        java.util.Optional.of(_totalErrorsConsumer),
                        java.util.Optional.of(_totalErrorsSupplierInner1),
                        java.util.Optional.of(_totalErrorsConsumerInner1),
                        _totalErrorsType,
                        FIELD_TOTALERRORS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta totalWarningsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_totalWarningsSupplier),
                        java.util.Optional.of(_totalWarningsConsumer),
                        java.util.Optional.of(_totalWarningsSupplierInner1),
                        java.util.Optional.of(_totalWarningsConsumerInner1),
                        _totalWarningsType,
                        FIELD_TOTALWARNINGS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta alertsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_alertsSupplier),
                        java.util.Optional.of(_alertsConsumer),
                        java.util.Optional.of(_alertsSupplierInner1),
                        java.util.Optional.of(_alertsConsumerInner1),
                        _alertsType,
                        FIELD_ALERTS,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ValidationReportBuilder builder() {
            return new schemarise.alfa.runtime.model.asserts.ValidationReport
                    ._ValidationReportBuilderImpl();
        }

        @Override
        public ValidationReportBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.asserts.ValidationReport
                    ._ValidationReportBuilderImpl(cc);
        }

        public ValidationReportDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationReport>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TIMESTAMP, timestampMeta);
                                        put(FIELD_SOURCESYSTEM, sourceSystemMeta);
                                        put(FIELD_SOURCESUBSYSTEM, sourceSubsystemMeta);
                                        put(FIELD_SOURCEFEED, sourceFeedMeta);
                                        put(FIELD_SOURCESUBFEED, sourceSubfeedMeta);
                                        put(FIELD_SOURCEINFO, sourceInfoMeta);
                                        put(FIELD_DATAFORMAT, dataFormatMeta);
                                        put(FIELD_DATAFORMATINFO, dataFormatInfoMeta);
                                        put(FIELD_TOTALRECORDS, totalRecordsMeta);
                                        put(FIELD_TOTALERRORS, totalErrorsMeta);
                                        put(FIELD_TOTALWARNINGS, totalWarningsMeta);
                                        put(FIELD_ALERTS, alertsMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ValidationReport>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Key descriptor for this entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.of(
                    schemarise.alfa.runtime.model.asserts.ValidationReportKey
                            .ValidationReportKeyDescriptor.INSTANCE);
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TIMESTAMP:
                    return FIELD_TIMESTAMP;
                case FIELD_ID_SOURCESYSTEM:
                    return FIELD_SOURCESYSTEM;
                case FIELD_ID_SOURCESUBSYSTEM:
                    return FIELD_SOURCESUBSYSTEM;
                case FIELD_ID_SOURCEFEED:
                    return FIELD_SOURCEFEED;
                case FIELD_ID_SOURCESUBFEED:
                    return FIELD_SOURCESUBFEED;
                case FIELD_ID_SOURCEINFO:
                    return FIELD_SOURCEINFO;
                case FIELD_ID_DATAFORMAT:
                    return FIELD_DATAFORMAT;
                case FIELD_ID_DATAFORMATINFO:
                    return FIELD_DATAFORMATINFO;
                case FIELD_ID_TOTALRECORDS:
                    return FIELD_TOTALRECORDS;
                case FIELD_ID_TOTALERRORS:
                    return FIELD_TOTALERRORS;
                case FIELD_ID_TOTALWARNINGS:
                    return FIELD_TOTALWARNINGS;
                case FIELD_ID_ALERTS:
                    return FIELD_ALERTS;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.of(
                    new java.util.HashMap() {
                        {
                            put(
                                    "alfa.db.Table",
                                    com.schemarise.alfa.runtime.Alfa.jsonCodec()
                                            .uncheckedFromJson(
                                                    "{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"ObjectExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__ObjectExpr\",\"udtName\":\"alfa.db.Table\",\"fieldValues\":{\"StorageMode\":{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"QualifiedIdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__QualifiedIdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.UdtDataType\",\"FullyQualifiedName\":\"alfa.db.StorageMode\",\"UdtType\":\"enumType\"},\"path\":[\"alfa\",\"db\",\"StorageMode\",\"JSONB\"],\"IdentifierType\":\"EnumReference\"}},\"Queryable\":{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"SetExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__SetExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.SetDataType\",\"ComponentType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"}},\"expr\":[{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"TotalErrors\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"SourceFeed\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"SourceInfo\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"SourceSubsystem\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"DataFormat\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"Timestamp\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"SourceSystem\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"SourceSubfeed\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"TotalWarnings\"}},{\"$type\":\"schemarise.alfa.runtime.model.Expression\",\"IdentifierExpr\":{\"$type\":\"schemarise.alfa.runtime.model.Expression__IdentifierExpr\",\"ExprType\":{\"$type\":\"schemarise.alfa.runtime.model.MetaDataType\",\"MetaType\":\"FieldName\"},\"fieldName\":\"DataFormatInfo\"}}]}}}}}"));
                        }
                    });
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.asserts.ValidationReport{Alerts:list<schemarise.alfa.runtime.model.asserts.ValidationAlert[38eb9579]>;DataFormat:optional<string;>;DataFormatInfo:optional<string;>;SourceFeed:optional<string;>;SourceInfo:optional<string;>;SourceSubfeed:optional<string;>;SourceSubsystem:optional<string;>;SourceSystem:optional<string;>;Timestamp:datetime;TotalErrors:long;TotalRecords:long;TotalWarnings:long;}
            schemarise.alfa.runtime.model.asserts.ValidationReport{Alerts:list<schemarise.alfa.runtime.model.asserts.ValidationAlert[8f7002fe]>;Timestamp:datetime;TotalErrors:long;TotalRecords:long;TotalWarnings:long;}
            */
            return "df7b291a:579a5d0e";
        }
    }
    // </editor-fold>

}
