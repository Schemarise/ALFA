// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TryFailure extends com.schemarise.alfa.runtime.Record {

    java.lang.String getMessage();

    java.util.Optional<java.lang.String> getErrorCode();

    java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>> getStacktrace();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TryFailureBuilder builder() {
        return new schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl();
    }

    public static TryFailureBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TryFailureBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        TryFailureBuilder setMessage(java.lang.String v);

        java.lang.String getMessage();

        TryFailureBuilder setErrorCode(java.util.Optional<java.lang.String> v);

        TryFailureBuilder setErrorCode(java.lang.String v);

        java.util.Optional<java.lang.String> getErrorCode();

        TryFailureBuilder setStacktrace(
                java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>> v);

        TryFailureBuilder setStacktrace(com.schemarise.alfa.runtime.Compressed<java.lang.String> v);

        java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>>
                getStacktrace();

        TryFailure build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TryFailureBuilderImpl extends _TryFailure__Base__ implements TryFailureBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TryFailureBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TryFailureBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setErrorCode(java.util.Optional.empty());
            setStacktrace(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor.INSTANCE;
        }

        public TryFailureBuilder setMessage(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message", v);
            this._message = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor.FIELD_ID_MESSAGE);
            return this;
        }

        public TryFailureBuilder setErrorCode(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ErrorCode", v);
            this._errorCode = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor
                            .FIELD_ID_ERRORCODE);
            return this;
        }

        public TryFailureBuilder setErrorCode(java.lang.String v) {
            this._errorCode = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor
                            .FIELD_ID_ERRORCODE);
            return this;
        }

        public TryFailureBuilder setStacktrace(
                java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Stacktrace", v);
            this._stacktrace = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor
                            .FIELD_ID_STACKTRACE);
            return this;
        }

        public TryFailureBuilder setStacktrace(
                com.schemarise.alfa.runtime.Compressed<java.lang.String> v) {
            this._stacktrace = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor
                            .FIELD_ID_STACKTRACE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Message":
                    setMessage((java.lang.String) val);
                    break;
                case "ErrorCode":
                    setErrorCode((java.util.Optional<java.lang.String>) val);
                    break;
                case "Stacktrace":
                    setStacktrace(
                            (java.util.Optional<
                                            com.schemarise.alfa.runtime.Compressed<
                                                    java.lang.String>>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TryFailure build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor.INSTANCE);

            TryFailure obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TryFailure)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _message,
                                                _errorCode,
                                                _stacktrace);
            else
                obj =
                        new schemarise.alfa.runtime.model.TryFailure._TryFailureConcrete(
                                _message, _errorCode, _stacktrace);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TryFailure",
                    new java.lang.String[] {"Message", "ErrorCode", "Stacktrace"},
                    new java.lang.Object[] {_message, _errorCode, _stacktrace});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TryFailureConcrete extends _TryFailure__Base__ implements TryFailure {

        private _TryFailureConcrete() {
            super();
        }

        private _TryFailureConcrete(
                java.lang.String _message,
                java.util.Optional<java.lang.String> _errorCode,
                java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>>
                        _stacktrace) {
            super(_message, _errorCode, _stacktrace);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TryFailure__Base__ {
        public java.lang.String _message;
        public java.util.Optional<java.lang.String> _errorCode;
        public java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>>
                _stacktrace;

        public _TryFailure__Base__() {}

        public _TryFailure__Base__(
                java.lang.String _message,
                java.util.Optional<java.lang.String> _errorCode,
                java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>>
                        _stacktrace) {
            this._message = _message;
            this._errorCode = _errorCode;
            this._stacktrace = _stacktrace;
        }

        public java.lang.String getMessage() {
            return _message;
        }

        public java.util.Optional<java.lang.String> getErrorCode() {
            return _errorCode;
        }

        public java.util.Optional<com.schemarise.alfa.runtime.Compressed<java.lang.String>>
                getStacktrace() {
            return _stacktrace;
        }

        public int hashCode() {
            return java.util.Objects.hash(_message, _errorCode, _stacktrace);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TryFailure",
                    new java.lang.String[] {"Message", "ErrorCode", "Stacktrace"},
                    new java.lang.Object[] {_message, _errorCode, _stacktrace});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.TryFailure._TryFailureConcrete))
                return false;
            schemarise.alfa.runtime.model.TryFailure._TryFailureConcrete rhs =
                    (schemarise.alfa.runtime.model.TryFailure._TryFailureConcrete) o;
            return java.util.Objects.equals(_message, rhs._message)
                    && java.util.Objects.equals(_errorCode, rhs._errorCode)
                    && java.util.Objects.equals(_stacktrace, rhs._stacktrace);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Message":
                    return _message;
                case "ErrorCode":
                    return _errorCode;
                case "Stacktrace":
                    return _stacktrace;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TryFailureDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TryFailure";
        public static schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.TryFailure.TryFailureDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_MESSAGE = 0;
        public static final String FIELD_MESSAGE = "Message";

        public static final short FIELD_ID_ERRORCODE = 1;
        public static final String FIELD_ERRORCODE = "ErrorCode";

        public static final short FIELD_ID_STACKTRACE = 2;
        public static final String FIELD_STACKTRACE = "Stacktrace";

        private schemarise.alfa.runtime.model.ScalarDataType _messageType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _errorCodeType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _stacktraceType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.CompressedDataType.builder()
                                        .setComponentType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _messageConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _messageType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _messageConsumer =
                        (builder, supplier) -> {
                            builder.setMessage(_messageConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _errorCodeConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _errorCodeConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _errorCodeType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _errorCodeType),
                                    _errorCodeConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _errorCodeConsumer =
                        (builder, supplier) -> {
                            builder.setErrorCode(_errorCodeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer compressed< string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                com.schemarise.alfa.runtime.Compressed<java.lang.String>>>
                _stacktraceConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            com.schemarise.alfa.runtime.Compressed<
                                                    java.lang.String>>
                                    _stacktraceConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _stacktraceConsumerInner3 =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .CompressedDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _stacktraceType)
                                                                                                                    .getComponentType())
                                                                                                    .getComponentType()));
                                                                };
                                                return supplierInner2.compressedValue(
                                                        ((schemarise.alfa.runtime.model
                                                                        .CompressedDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _stacktraceType)
                                                                        .getComponentType()),
                                                        _stacktraceConsumerInner3);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _stacktraceType),
                                    _stacktraceConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _stacktraceConsumer =
                        (builder, supplier) -> {
                            builder.setStacktrace(_stacktraceConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _messageType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplier =
                        (p, consumer) -> {
                            _messageSupplierInner1.accept(p.getMessage(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _errorCodeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _errorCodeSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _errorCodeType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _errorCodeType),
                                    pInner1,
                                    _errorCodeSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure,
                        com.schemarise.alfa.runtime.DataConsumer>
                _errorCodeSupplier =
                        (p, consumer) -> {
                            _errorCodeSupplierInner1.accept(p.getErrorCode(), consumer);
                        };
        /* -- Supplier compressed< string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                com.schemarise.alfa.runtime.Compressed<java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _stacktraceSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            com.schemarise.alfa.runtime.Compressed<
                                                    java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _stacktraceSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _stacktraceSupplierInner3 =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .CompressedDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _stacktraceType)
                                                                                                            .getComponentType())
                                                                                            .getComponentType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model
                                                                        .CompressedDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _stacktraceType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _stacktraceSupplierInner3);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _stacktraceType),
                                    pInner1,
                                    _stacktraceSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TryFailure,
                        com.schemarise.alfa.runtime.DataConsumer>
                _stacktraceSupplier =
                        (p, consumer) -> {
                            _stacktraceSupplierInner1.accept(p.getStacktrace(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TryFailure, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta messageMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_messageSupplier),
                        java.util.Optional.of(_messageConsumer),
                        java.util.Optional.of(_messageSupplierInner1),
                        java.util.Optional.of(_messageConsumerInner1),
                        _messageType,
                        FIELD_MESSAGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta errorCodeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_errorCodeSupplier),
                        java.util.Optional.of(_errorCodeConsumer),
                        java.util.Optional.of(_errorCodeSupplierInner1),
                        java.util.Optional.of(_errorCodeConsumerInner1),
                        _errorCodeType,
                        FIELD_ERRORCODE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta stacktraceMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_stacktraceSupplier),
                        java.util.Optional.of(_stacktraceConsumer),
                        java.util.Optional.of(_stacktraceSupplierInner1),
                        java.util.Optional.of(_stacktraceConsumerInner1),
                        _stacktraceType,
                        FIELD_STACKTRACE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TryFailureBuilder builder() {
            return new schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl();
        }

        @Override
        public TryFailureBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TryFailure._TryFailureBuilderImpl(cc);
        }

        public TryFailureDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TryFailure>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_MESSAGE, messageMeta);
                                        put(FIELD_ERRORCODE, errorCodeMeta);
                                        put(FIELD_STACKTRACE, stacktraceMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TryFailure>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_MESSAGE:
                    return FIELD_MESSAGE;
                case FIELD_ID_ERRORCODE:
                    return FIELD_ERRORCODE;
                case FIELD_ID_STACKTRACE:
                    return FIELD_STACKTRACE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TryFailure{ErrorCode:optional<string;>;Message:string;Stacktrace:optional<compressed<string;>;>;}
            schemarise.alfa.runtime.model.TryFailure{Message:string;}
            */
            return "6f7643a8:112efdb1";
        }
    }
    // </editor-fold>

}
