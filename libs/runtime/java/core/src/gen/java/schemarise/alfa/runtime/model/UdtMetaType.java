// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public enum UdtMetaType implements com.schemarise.alfa.runtime.Enum {
    entityType("entityType", java.util.Optional.empty()),
    keyType("keyType", java.util.Optional.empty()),
    traitType("traitType", java.util.Optional.empty()),
    unionType("unionType", java.util.Optional.empty()),
    untaggedUnionType("untaggedUnionType", java.util.Optional.empty()),
    recordType("recordType", java.util.Optional.empty()),
    enumType("enumType", java.util.Optional.empty()),
    serviceType("serviceType", java.util.Optional.empty()),
    annotationType("annotationType", java.util.Optional.empty()),
    nativeUdtType("nativeUdtType", java.util.Optional.empty()),
    libraryType("libraryType", java.util.Optional.empty()),
    testcaseType("testcaseType", java.util.Optional.empty()),
    namespaceType("namespaceType", java.util.Optional.empty()),
    fieldType("fieldType", java.util.Optional.empty()),
    keyFieldType("keyFieldType", java.util.Optional.empty()),
    methodType("methodType", java.util.Optional.empty()),
    transformType("transformType", java.util.Optional.empty()),
    tupleType("tupleType", java.util.Optional.empty()),
    extensionType("extensionType", java.util.Optional.empty()),
    extensionInstanceType("extensionInstanceType", java.util.Optional.empty()),
    dataproductType("dataproductType", java.util.Optional.empty()),
    userDefinedType("userDefinedType", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, UdtMetaType> mappings;

    UdtMetaType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static UdtMetaType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, UdtMetaType> m = new java.util.HashMap<>();
            for (UdtMetaType c : UdtMetaType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.UdtMetaType.UdtMetaTypeDescriptor.INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtMetaTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.UdtMetaType";
        public static schemarise.alfa.runtime.model.UdtMetaType.UdtMetaTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.UdtMetaType.UdtMetaTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ENTITYTYPE = 0;
        public static final String FIELD_ENTITYTYPE = "entityType";

        public static final short FIELD_ID_KEYTYPE = 1;
        public static final String FIELD_KEYTYPE = "keyType";

        public static final short FIELD_ID_TRAITTYPE = 2;
        public static final String FIELD_TRAITTYPE = "traitType";

        public static final short FIELD_ID_UNIONTYPE = 3;
        public static final String FIELD_UNIONTYPE = "unionType";

        public static final short FIELD_ID_UNTAGGEDUNIONTYPE = 4;
        public static final String FIELD_UNTAGGEDUNIONTYPE = "untaggedUnionType";

        public static final short FIELD_ID_RECORDTYPE = 5;
        public static final String FIELD_RECORDTYPE = "recordType";

        public static final short FIELD_ID_ENUMTYPE = 6;
        public static final String FIELD_ENUMTYPE = "enumType";

        public static final short FIELD_ID_SERVICETYPE = 7;
        public static final String FIELD_SERVICETYPE = "serviceType";

        public static final short FIELD_ID_ANNOTATIONTYPE = 8;
        public static final String FIELD_ANNOTATIONTYPE = "annotationType";

        public static final short FIELD_ID_NATIVEUDTTYPE = 9;
        public static final String FIELD_NATIVEUDTTYPE = "nativeUdtType";

        public static final short FIELD_ID_LIBRARYTYPE = 10;
        public static final String FIELD_LIBRARYTYPE = "libraryType";

        public static final short FIELD_ID_TESTCASETYPE = 11;
        public static final String FIELD_TESTCASETYPE = "testcaseType";

        public static final short FIELD_ID_NAMESPACETYPE = 12;
        public static final String FIELD_NAMESPACETYPE = "namespaceType";

        public static final short FIELD_ID_FIELDTYPE = 13;
        public static final String FIELD_FIELDTYPE = "fieldType";

        public static final short FIELD_ID_KEYFIELDTYPE = 14;
        public static final String FIELD_KEYFIELDTYPE = "keyFieldType";

        public static final short FIELD_ID_METHODTYPE = 15;
        public static final String FIELD_METHODTYPE = "methodType";

        public static final short FIELD_ID_TRANSFORMTYPE = 16;
        public static final String FIELD_TRANSFORMTYPE = "transformType";

        public static final short FIELD_ID_TUPLETYPE = 17;
        public static final String FIELD_TUPLETYPE = "tupleType";

        public static final short FIELD_ID_EXTENSIONTYPE = 18;
        public static final String FIELD_EXTENSIONTYPE = "extensionType";

        public static final short FIELD_ID_EXTENSIONINSTANCETYPE = 19;
        public static final String FIELD_EXTENSIONINSTANCETYPE = "extensionInstanceType";

        public static final short FIELD_ID_DATAPRODUCTTYPE = 20;
        public static final String FIELD_DATAPRODUCTTYPE = "dataproductType";

        public static final short FIELD_ID_USERDEFINEDTYPE = 21;
        public static final String FIELD_USERDEFINEDTYPE = "userDefinedType";

        private schemarise.alfa.runtime.model.ScalarDataType _entityTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _keyTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _traitTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _unionTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _untaggedUnionTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _recordTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _enumTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _serviceTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _annotationTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nativeUdtTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _libraryTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _testcaseTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _namespaceTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _fieldTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _keyFieldTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _methodTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _transformTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _tupleTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _extensionTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _extensionInstanceTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dataproductTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _userDefinedTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<UdtMetaType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta entityTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _entityTypeType,
                        FIELD_ENTITYTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _keyTypeType,
                        FIELD_KEYTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta traitTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _traitTypeType,
                        FIELD_TRAITTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta unionTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _unionTypeType,
                        FIELD_UNIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta untaggedUnionTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _untaggedUnionTypeType,
                        FIELD_UNTAGGEDUNIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta recordTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _recordTypeType,
                        FIELD_RECORDTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta enumTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _enumTypeType,
                        FIELD_ENUMTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta serviceTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _serviceTypeType,
                        FIELD_SERVICETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta annotationTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _annotationTypeType,
                        FIELD_ANNOTATIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nativeUdtTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _nativeUdtTypeType,
                        FIELD_NATIVEUDTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta libraryTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _libraryTypeType,
                        FIELD_LIBRARYTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta testcaseTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _testcaseTypeType,
                        FIELD_TESTCASETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta namespaceTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _namespaceTypeType,
                        FIELD_NAMESPACETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _fieldTypeType,
                        FIELD_FIELDTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyFieldTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _keyFieldTypeType,
                        FIELD_KEYFIELDTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta methodTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _methodTypeType,
                        FIELD_METHODTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta transformTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _transformTypeType,
                        FIELD_TRANSFORMTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta tupleTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _tupleTypeType,
                        FIELD_TUPLETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extensionTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _extensionTypeType,
                        FIELD_EXTENSIONTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extensionInstanceTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _extensionInstanceTypeType,
                        FIELD_EXTENSIONINSTANCETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataproductTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _dataproductTypeType,
                        FIELD_DATAPRODUCTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta userDefinedTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _userDefinedTypeType,
                        FIELD_USERDEFINEDTYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public UdtMetaTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtMetaType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ENTITYTYPE, entityTypeMeta);
                                        put(FIELD_KEYTYPE, keyTypeMeta);
                                        put(FIELD_TRAITTYPE, traitTypeMeta);
                                        put(FIELD_UNIONTYPE, unionTypeMeta);
                                        put(FIELD_UNTAGGEDUNIONTYPE, untaggedUnionTypeMeta);
                                        put(FIELD_RECORDTYPE, recordTypeMeta);
                                        put(FIELD_ENUMTYPE, enumTypeMeta);
                                        put(FIELD_SERVICETYPE, serviceTypeMeta);
                                        put(FIELD_ANNOTATIONTYPE, annotationTypeMeta);
                                        put(FIELD_NATIVEUDTTYPE, nativeUdtTypeMeta);
                                        put(FIELD_LIBRARYTYPE, libraryTypeMeta);
                                        put(FIELD_TESTCASETYPE, testcaseTypeMeta);
                                        put(FIELD_NAMESPACETYPE, namespaceTypeMeta);
                                        put(FIELD_FIELDTYPE, fieldTypeMeta);
                                        put(FIELD_KEYFIELDTYPE, keyFieldTypeMeta);
                                        put(FIELD_METHODTYPE, methodTypeMeta);
                                        put(FIELD_TRANSFORMTYPE, transformTypeMeta);
                                        put(FIELD_TUPLETYPE, tupleTypeMeta);
                                        put(FIELD_EXTENSIONTYPE, extensionTypeMeta);
                                        put(FIELD_EXTENSIONINSTANCETYPE, extensionInstanceTypeMeta);
                                        put(FIELD_DATAPRODUCTTYPE, dataproductTypeMeta);
                                        put(FIELD_USERDEFINEDTYPE, userDefinedTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtMetaType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ENTITYTYPE:
                    return FIELD_ENTITYTYPE;
                case FIELD_ID_KEYTYPE:
                    return FIELD_KEYTYPE;
                case FIELD_ID_TRAITTYPE:
                    return FIELD_TRAITTYPE;
                case FIELD_ID_UNIONTYPE:
                    return FIELD_UNIONTYPE;
                case FIELD_ID_UNTAGGEDUNIONTYPE:
                    return FIELD_UNTAGGEDUNIONTYPE;
                case FIELD_ID_RECORDTYPE:
                    return FIELD_RECORDTYPE;
                case FIELD_ID_ENUMTYPE:
                    return FIELD_ENUMTYPE;
                case FIELD_ID_SERVICETYPE:
                    return FIELD_SERVICETYPE;
                case FIELD_ID_ANNOTATIONTYPE:
                    return FIELD_ANNOTATIONTYPE;
                case FIELD_ID_NATIVEUDTTYPE:
                    return FIELD_NATIVEUDTTYPE;
                case FIELD_ID_LIBRARYTYPE:
                    return FIELD_LIBRARYTYPE;
                case FIELD_ID_TESTCASETYPE:
                    return FIELD_TESTCASETYPE;
                case FIELD_ID_NAMESPACETYPE:
                    return FIELD_NAMESPACETYPE;
                case FIELD_ID_FIELDTYPE:
                    return FIELD_FIELDTYPE;
                case FIELD_ID_KEYFIELDTYPE:
                    return FIELD_KEYFIELDTYPE;
                case FIELD_ID_METHODTYPE:
                    return FIELD_METHODTYPE;
                case FIELD_ID_TRANSFORMTYPE:
                    return FIELD_TRANSFORMTYPE;
                case FIELD_ID_TUPLETYPE:
                    return FIELD_TUPLETYPE;
                case FIELD_ID_EXTENSIONTYPE:
                    return FIELD_EXTENSIONTYPE;
                case FIELD_ID_EXTENSIONINSTANCETYPE:
                    return FIELD_EXTENSIONINSTANCETYPE;
                case FIELD_ID_DATAPRODUCTTYPE:
                    return FIELD_DATAPRODUCTTYPE;
                case FIELD_ID_USERDEFINEDTYPE:
                    return FIELD_USERDEFINEDTYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.UdtMetaType{entityType,keyType,traitType,unionType,untaggedUnionType,recordType,enumType,serviceType,annotationType,nativeUdtType,libraryType,testcaseType,namespaceType,fieldType,keyFieldType,methodType,transformType,tupleType,extensionType,extensionInstanceType,dataproductType,userDefinedType}
            schemarise.alfa.runtime.model.UdtMetaType{entityType,keyType,traitType,unionType,untaggedUnionType,recordType,enumType,serviceType,annotationType,nativeUdtType,libraryType,testcaseType,namespaceType,fieldType,keyFieldType,methodType,transformType,tupleType,extensionType,extensionInstanceType,dataproductType,userDefinedType}
            */
            return "85998f5f:";
        }
    }
    // </editor-fold>
}
