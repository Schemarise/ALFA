// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface TupleDataType
        extends com.schemarise.alfa.runtime.Record,
                schemarise.alfa.runtime.model.IDataType,
                schemarise.alfa.runtime.model.IAnnotated {

    java.util.Optional<
                    java.util.Map<
                            java.lang.String,
                            java.util.Map<
                                    java.lang.String, schemarise.alfa.runtime.model.IExpression>>>
            getAnnotations();

    java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

    java.util.Optional<java.lang.String> getTypeDefName();

    java.lang.String getSynthFullyQualifiedName();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields();

    boolean getSyntheticFieldNames();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static TupleDataTypeBuilder builder() {
        return new schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl();
    }

    public static TupleDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                                    .INSTANCE);
        else return new schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface TupleDataTypeBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDataType.IDataTypeBuilder,
                    schemarise.alfa.runtime.model.IAnnotated.IAnnotatedBuilder {
        TupleDataTypeBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v);

        TupleDataTypeBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v);

        java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations();

        TupleDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v);

        TupleDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v);

        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> getExtendedAttribs();

        TupleDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v);

        TupleDataTypeBuilder setTypeDefName(java.lang.String v);

        java.util.Optional<java.lang.String> getTypeDefName();

        TupleDataTypeBuilder setSynthFullyQualifiedName(java.lang.String v);

        java.lang.String getSynthFullyQualifiedName();

        TupleDataTypeBuilder putFields(java.lang.String k, schemarise.alfa.runtime.model.Field v);

        TupleDataTypeBuilder putAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields();

        TupleDataTypeBuilder setSyntheticFieldNames(boolean v);

        boolean getSyntheticFieldNames();

        TupleDataType build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _TupleDataTypeBuilderImpl extends _TupleDataType__Base__
            implements TupleDataTypeBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _TupleDataTypeBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _TupleDataTypeBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setAnnotations(java.util.Optional.empty());
            setExtendedAttribs(java.util.Optional.empty());
            setTypeDefName(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor.INSTANCE;
        }

        public TupleDataTypeBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Annotations", v);
            this._annotations = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_ANNOTATIONS);
            return this;
        }

        public TupleDataTypeBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v) {
            this._annotations = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_ANNOTATIONS);
            return this;
        }

        public TupleDataTypeBuilder setExtendedAttribs(
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExtendedAttribs", v);
            this._extendedAttribs = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public TupleDataTypeBuilder setExtendedAttribs(
                java.util.Map<java.lang.String, java.lang.String> v) {
            this._extendedAttribs = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_EXTENDEDATTRIBS);
            return this;
        }

        public TupleDataTypeBuilder setTypeDefName(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TypeDefName", v);
            this._typeDefName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public TupleDataTypeBuilder setTypeDefName(java.lang.String v) {
            this._typeDefName = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_TYPEDEFNAME);
            return this;
        }

        public TupleDataTypeBuilder setSynthFullyQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SynthFullyQualifiedName", v);
            this._synthFullyQualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_SYNTHFULLYQUALIFIEDNAME);
            return this;
        }

        private void createFields() {
            this._fields = new java.util.LinkedHashMap<>();
        }

        public TupleDataTypeBuilder putFields(
                java.lang.String k, schemarise.alfa.runtime.model.Field v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Fields", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Fields", v);
            if (this._fields == null) createFields();
            this._fields.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        public TupleDataTypeBuilder putAllFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Fields", all);
            if (this._fields == null) createFields();
            this._fields.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        private TupleDataTypeBuilder setFields(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Fields", all);
            _fields = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_FIELDS);
            return this;
        }

        public TupleDataTypeBuilder setSyntheticFieldNames(boolean v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SyntheticFieldNames", v);
            this._syntheticFieldNames = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor
                            .FIELD_ID_SYNTHETICFIELDNAMES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Annotations":
                    setAnnotations(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>)
                                    val);
                    break;
                case "ExtendedAttribs":
                    setExtendedAttribs(
                            (java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>)
                                    val);
                    break;
                case "TypeDefName":
                    setTypeDefName((java.util.Optional<java.lang.String>) val);
                    break;
                case "SynthFullyQualifiedName":
                    setSynthFullyQualifiedName((java.lang.String) val);
                    break;
                case "Fields":
                    setFields(
                            (java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>)
                                    val);
                    break;
                case "SyntheticFieldNames":
                    setSyntheticFieldNames((boolean) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public TupleDataType build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor.INSTANCE);

            TupleDataType obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (TupleDataType)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _annotations,
                                                _extendedAttribs,
                                                _typeDefName,
                                                _synthFullyQualifiedName,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .TupleDataType
                                                                        .TupleDataTypeDescriptor
                                                                        .INSTANCE
                                                                        ._fieldsSupplierInner1,
                                                                _fields),
                                                _syntheticFieldNames);
            else
                obj =
                        new schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeConcrete(
                                _annotations,
                                _extendedAttribs,
                                _typeDefName,
                                _synthFullyQualifiedName,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.TupleDataType
                                                .TupleDataTypeDescriptor.INSTANCE
                                                ._fieldsSupplierInner1,
                                        _fields),
                                _syntheticFieldNames);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TupleDataType",
                    new java.lang.String[] {
                        "Annotations",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "SynthFullyQualifiedName",
                        "Fields",
                        "SyntheticFieldNames"
                    },
                    new java.lang.Object[] {
                        _annotations,
                        _extendedAttribs,
                        _typeDefName,
                        _synthFullyQualifiedName,
                        _fields,
                        _syntheticFieldNames
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _TupleDataTypeConcrete extends _TupleDataType__Base__ implements TupleDataType {

        private _TupleDataTypeConcrete() {
            super();
        }

        private _TupleDataTypeConcrete(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _synthFullyQualifiedName,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields,
                boolean _syntheticFieldNames) {
            super(
                    _annotations,
                    _extendedAttribs,
                    _typeDefName,
                    _synthFullyQualifiedName,
                    _fields,
                    _syntheticFieldNames);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _TupleDataType__Base__ {
        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                _annotations;
        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                _extendedAttribs;
        public java.util.Optional<java.lang.String> _typeDefName;
        public java.lang.String _synthFullyQualifiedName;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields;
        public boolean _syntheticFieldNames;

        public _TupleDataType__Base__() {}

        public _TupleDataType__Base__(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                        _extendedAttribs,
                java.util.Optional<java.lang.String> _typeDefName,
                java.lang.String _synthFullyQualifiedName,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> _fields,
                boolean _syntheticFieldNames) {
            this._annotations = _annotations;
            this._extendedAttribs = _extendedAttribs;
            this._typeDefName = _typeDefName;
            this._synthFullyQualifiedName = _synthFullyQualifiedName;
            this._fields = _fields;
            this._syntheticFieldNames = _syntheticFieldNames;
        }

        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations() {
            return _annotations;
        }

        public java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>
                getExtendedAttribs() {
            return _extendedAttribs;
        }

        public java.util.Optional<java.lang.String> getTypeDefName() {
            return _typeDefName;
        }

        public java.lang.String getSynthFullyQualifiedName() {
            return _synthFullyQualifiedName;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field> getFields() {
            return _fields;
        }

        public boolean getSyntheticFieldNames() {
            return _syntheticFieldNames;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _annotations,
                    _extendedAttribs,
                    _typeDefName,
                    _synthFullyQualifiedName,
                    _fields,
                    _syntheticFieldNames);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.TupleDataType",
                    new java.lang.String[] {
                        "Annotations",
                        "ExtendedAttribs",
                        "TypeDefName",
                        "SynthFullyQualifiedName",
                        "Fields",
                        "SyntheticFieldNames"
                    },
                    new java.lang.Object[] {
                        _annotations,
                        _extendedAttribs,
                        _typeDefName,
                        _synthFullyQualifiedName,
                        _fields,
                        _syntheticFieldNames
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeConcrete))
                return false;
            schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeConcrete rhs =
                    (schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeConcrete) o;
            return java.util.Objects.equals(_annotations, rhs._annotations)
                    && java.util.Objects.equals(_extendedAttribs, rhs._extendedAttribs)
                    && java.util.Objects.equals(_typeDefName, rhs._typeDefName)
                    && java.util.Objects.equals(
                            _synthFullyQualifiedName, rhs._synthFullyQualifiedName)
                    && java.util.Objects.equals(_fields, rhs._fields)
                    && _syntheticFieldNames == rhs._syntheticFieldNames;
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Annotations":
                    return _annotations;
                case "ExtendedAttribs":
                    return _extendedAttribs;
                case "TypeDefName":
                    return _typeDefName;
                case "SynthFullyQualifiedName":
                    return _synthFullyQualifiedName;
                case "Fields":
                    return _fields;
                case "SyntheticFieldNames":
                    return _syntheticFieldNames;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            if (getAnnotations().isPresent()) {
                getAnnotations()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue()
                                            .entrySet()
                                            .stream()
                                            .filter(e1 -> e1.getValue() != null)
                                            .forEach(
                                                    e1 -> {
                                                        e1.getValue().validate(__builderConfig);
                                                    });
                                });
            }

            getFields()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class TupleDataTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.TupleDataType";
        public static schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.TupleDataType.TupleDataTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ANNOTATIONS = 0;
        public static final String FIELD_ANNOTATIONS = "Annotations";

        public static final short FIELD_ID_EXTENDEDATTRIBS = 1;
        public static final String FIELD_EXTENDEDATTRIBS = "ExtendedAttribs";

        public static final short FIELD_ID_TYPEDEFNAME = 2;
        public static final String FIELD_TYPEDEFNAME = "TypeDefName";

        public static final short FIELD_ID_SYNTHFULLYQUALIFIEDNAME = 3;
        public static final String FIELD_SYNTHFULLYQUALIFIEDNAME = "SynthFullyQualifiedName";

        public static final short FIELD_ID_FIELDS = 4;
        public static final String FIELD_FIELDS = "Fields";

        public static final short FIELD_ID_SYNTHETICFIELDNAMES = 5;
        public static final String FIELD_SYNTHETICFIELDNAMES = "SyntheticFieldNames";

        private schemarise.alfa.runtime.model.OptionalDataType _annotationsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("AnnotationName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.MapDataType.builder()
                                                        .setKeyType(
                                                                schemarise.alfa.runtime.model
                                                                        .ScalarDataType.builder()
                                                                        .setScalarType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .ScalarType
                                                                                        .stringType)
                                                                        .build())
                                                        .setValueType(
                                                                schemarise.alfa.runtime.model.UdtDataType
                                                                        .builder()
                                                                        .setFullyQualifiedName(
                                                                                "schemarise.alfa.runtime.model.IExpression")
                                                                        .setUdtType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .UdtMetaType
                                                                                        .traitType)
                                                                        .build())
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _extendedAttribsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setValueType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _typeDefNameType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _synthFullyQualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _fieldsType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Field")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _syntheticFieldNamesType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.booleanType)
                        .build();

        /* -- Consumer map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>>
                _annotationsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>
                                    _annotationsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _annotationsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _annotationsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>>
                                                        _annotationsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    java.lang
                                                                                            .String>
                                                                            _annotationsConsumerInner4Key =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .stringValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()));
                                                                                    };
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression>
                                                                            _annotationsConsumerInner4Val =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .objectValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()));
                                                                                    };
                                                                    return supplierInner3.mapValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            _annotationsConsumerInner4Key,
                                                                            _annotationsConsumerInner4Val);
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        _annotationsConsumerInner3Key,
                                                        _annotationsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    _annotationsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _annotationsConsumer =
                        (builder, supplier) -> {
                            builder.setAnnotations(_annotationsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , string > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>>
                _extendedAttribsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<java.lang.String, java.lang.String>>
                                    _extendedAttribsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _extendedAttribsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _extendedAttribsType)
                                                                                                                    .getComponentType())
                                                                                                    .getValueType()));
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        _extendedAttribsConsumerInner3Key,
                                                        _extendedAttribsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    _extendedAttribsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _extendedAttribsConsumer =
                        (builder, supplier) -> {
                            builder.setExtendedAttribs(
                                    _extendedAttribsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _typeDefNameConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typeDefNameConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    _typeDefNameConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typeDefNameConsumer =
                        (builder, supplier) -> {
                            builder.setTypeDefName(_typeDefNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _synthFullyQualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _synthFullyQualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _synthFullyQualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setSynthFullyQualifiedName(
                                    _synthFullyQualifiedNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>>
                _fieldsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _fieldsConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Field>
                                    _fieldsConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldsType),
                                    _fieldsConsumerInner2Key,
                                    _fieldsConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fieldsConsumer =
                        (builder, supplier) -> {
                            builder.putAllFields(_fieldsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                _syntheticFieldNamesConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.booleanValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _syntheticFieldNamesType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _syntheticFieldNamesConsumer =
                        (builder, supplier) -> {
                            builder.setSyntheticFieldNames(
                                    _syntheticFieldNamesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _annotationsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    java.util.function.BiConsumer<
                                                                                    java.lang
                                                                                            .String,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Key =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    java.util.function.BiConsumer<
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Val =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3,
                                                                            _annotationsSupplierInner4Key,
                                                                            _annotationsSupplierInner4Val);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _annotationsSupplierInner3Key,
                                                        _annotationsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    pInner1,
                                    _annotationsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplier =
                        (p, consumer) -> {
                            _annotationsSupplierInner1.accept(p.getAnnotations(), consumer);
                        };
        /* -- Supplier map< string , string > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.util.Map<java.lang.String, java.lang.String>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<java.lang.String, java.lang.String>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _extendedAttribsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _extendedAttribsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _extendedAttribsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _extendedAttribsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _extendedAttribsSupplierInner3Key,
                                                        _extendedAttribsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _extendedAttribsType),
                                    pInner1,
                                    _extendedAttribsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _extendedAttribsSupplier =
                        (p, consumer) -> {
                            _extendedAttribsSupplierInner1.accept(p.getExtendedAttribs(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typeDefNameSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _typeDefNameType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _typeDefNameType),
                                    pInner1,
                                    _typeDefNameSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typeDefNameSupplier =
                        (p, consumer) -> {
                            _typeDefNameSupplierInner1.accept(p.getTypeDefName(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _synthFullyQualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _synthFullyQualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _synthFullyQualifiedNameSupplier =
                        (p, consumer) -> {
                            _synthFullyQualifiedNameSupplierInner1.accept(
                                    p.getSynthFullyQualifiedName(), consumer);
                        };
        /* -- Supplier map< string , schemarise.alfa.runtime.model.Field > -- */
        java.util.function.BiConsumer<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Field>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldsSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Field,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _fieldsSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _fieldsType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _fieldsType),
                                    pInner1,
                                    _fieldsSupplierInner2Key,
                                    _fieldsSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fieldsSupplier =
                        (p, consumer) -> {
                            _fieldsSupplierInner1.accept(p.getFields(), consumer);
                        };
        /* -- Supplier boolean -- */
        java.util.function.BiConsumer<java.lang.Boolean, com.schemarise.alfa.runtime.DataConsumer>
                _syntheticFieldNamesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _syntheticFieldNamesType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.TupleDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _syntheticFieldNamesSupplier =
                        (p, consumer) -> {
                            _syntheticFieldNamesSupplierInner1.accept(
                                    p.getSyntheticFieldNames(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                TupleDataType, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta annotationsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_annotationsSupplier),
                        java.util.Optional.of(_annotationsConsumer),
                        java.util.Optional.of(_annotationsSupplierInner1),
                        java.util.Optional.of(_annotationsConsumerInner1),
                        _annotationsType,
                        FIELD_ANNOTATIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta extendedAttribsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_extendedAttribsSupplier),
                        java.util.Optional.of(_extendedAttribsConsumer),
                        java.util.Optional.of(_extendedAttribsSupplierInner1),
                        java.util.Optional.of(_extendedAttribsConsumerInner1),
                        _extendedAttribsType,
                        FIELD_EXTENDEDATTRIBS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typeDefNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typeDefNameSupplier),
                        java.util.Optional.of(_typeDefNameConsumer),
                        java.util.Optional.of(_typeDefNameSupplierInner1),
                        java.util.Optional.of(_typeDefNameConsumerInner1),
                        _typeDefNameType,
                        FIELD_TYPEDEFNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta synthFullyQualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_synthFullyQualifiedNameSupplier),
                        java.util.Optional.of(_synthFullyQualifiedNameConsumer),
                        java.util.Optional.of(_synthFullyQualifiedNameSupplierInner1),
                        java.util.Optional.of(_synthFullyQualifiedNameConsumerInner1),
                        _synthFullyQualifiedNameType,
                        FIELD_SYNTHFULLYQUALIFIEDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fieldsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fieldsSupplier),
                        java.util.Optional.of(_fieldsConsumer),
                        java.util.Optional.of(_fieldsSupplierInner1),
                        java.util.Optional.of(_fieldsConsumerInner1),
                        _fieldsType,
                        FIELD_FIELDS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta syntheticFieldNamesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_syntheticFieldNamesSupplier),
                        java.util.Optional.of(_syntheticFieldNamesConsumer),
                        java.util.Optional.of(_syntheticFieldNamesSupplierInner1),
                        java.util.Optional.of(_syntheticFieldNamesConsumerInner1),
                        _syntheticFieldNamesType,
                        FIELD_SYNTHETICFIELDNAMES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public TupleDataTypeBuilder builder() {
            return new schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl();
        }

        @Override
        public TupleDataTypeBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.TupleDataType._TupleDataTypeBuilderImpl(cc);
        }

        public TupleDataTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TupleDataType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ANNOTATIONS, annotationsMeta);
                                        put(FIELD_EXTENDEDATTRIBS, extendedAttribsMeta);
                                        put(FIELD_TYPEDEFNAME, typeDefNameMeta);
                                        put(
                                                FIELD_SYNTHFULLYQUALIFIEDNAME,
                                                synthFullyQualifiedNameMeta);
                                        put(FIELD_FIELDS, fieldsMeta);
                                        put(FIELD_SYNTHETICFIELDNAMES, syntheticFieldNamesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<TupleDataType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ANNOTATIONS:
                    return FIELD_ANNOTATIONS;
                case FIELD_ID_EXTENDEDATTRIBS:
                    return FIELD_EXTENDEDATTRIBS;
                case FIELD_ID_TYPEDEFNAME:
                    return FIELD_TYPEDEFNAME;
                case FIELD_ID_SYNTHFULLYQUALIFIEDNAME:
                    return FIELD_SYNTHFULLYQUALIFIEDNAME;
                case FIELD_ID_FIELDS:
                    return FIELD_FIELDS;
                case FIELD_ID_SYNTHETICFIELDNAMES:
                    return FIELD_SYNTHETICFIELDNAMES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.TupleDataType{Annotations:optional<map<string,string>;>;ExtendedAttribs:optional<map<string,string>;>;Fields:map<string,string>;SynthFullyQualifiedName:string;SyntheticFieldNames:boolean;TypeDefName:optional<string;>;}
            schemarise.alfa.runtime.model.TupleDataType{Fields:map<string,string>;SynthFullyQualifiedName:string;SyntheticFieldNames:boolean;}
            */
            return "492307ed:679d91b";
        }
    }
    // </editor-fold>

}
