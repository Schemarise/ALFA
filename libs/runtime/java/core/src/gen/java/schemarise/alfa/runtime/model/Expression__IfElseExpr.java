// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Expression__IfElseExpr extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.IDataType getExprType();

    schemarise.alfa.runtime.model.IExpression getCondition();

    schemarise.alfa.runtime.model.IExpression getIfExp();

    java.util.Optional<schemarise.alfa.runtime.model.IExpression> getElseExp();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static Expression__IfElseExprBuilder builder() {
        return new schemarise.alfa.runtime.model.Expression__IfElseExpr
                ._Expression__IfElseExprBuilderImpl();
    }

    public static Expression__IfElseExprBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.Expression__IfElseExpr
                                    .Expression__IfElseExprDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.Expression__IfElseExpr
                    ._Expression__IfElseExprBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface Expression__IfElseExprBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        Expression__IfElseExprBuilder setExprType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getExprType();

        Expression__IfElseExprBuilder setCondition(schemarise.alfa.runtime.model.IExpression v);

        schemarise.alfa.runtime.model.IExpression getCondition();

        Expression__IfElseExprBuilder setIfExp(schemarise.alfa.runtime.model.IExpression v);

        schemarise.alfa.runtime.model.IExpression getIfExp();

        Expression__IfElseExprBuilder setElseExp(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v);

        Expression__IfElseExprBuilder setElseExp(schemarise.alfa.runtime.model.IExpression v);

        java.util.Optional<schemarise.alfa.runtime.model.IExpression> getElseExp();

        Expression__IfElseExpr build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _Expression__IfElseExprBuilderImpl extends _Expression__IfElseExpr__Base__
            implements Expression__IfElseExprBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _Expression__IfElseExprBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _Expression__IfElseExprBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(4);
            __missingFields.set(0, 4);
            setElseExp(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__IfElseExpr
                    .Expression__IfElseExprDescriptor.INSTANCE;
        }

        public Expression__IfElseExprBuilder setExprType(
                schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ExprType", v);
            this._exprType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.FIELD_ID_EXPRTYPE);
            return this;
        }

        public Expression__IfElseExprBuilder setCondition(
                schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Condition", v);
            this._condition = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.FIELD_ID_CONDITION);
            return this;
        }

        public Expression__IfElseExprBuilder setIfExp(schemarise.alfa.runtime.model.IExpression v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IfExp", v);
            this._ifExp = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.FIELD_ID_IFEXP);
            return this;
        }

        public Expression__IfElseExprBuilder setElseExp(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ElseExp", v);
            this._elseExp = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.FIELD_ID_ELSEEXP);
            return this;
        }

        public Expression__IfElseExprBuilder setElseExp(
                schemarise.alfa.runtime.model.IExpression v) {
            this._elseExp = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.FIELD_ID_ELSEEXP);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "ExprType":
                    setExprType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "condition":
                    setCondition((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                case "ifExp":
                    setIfExp((schemarise.alfa.runtime.model.IExpression) val);
                    break;
                case "elseExp":
                    setElseExp((java.util.Optional<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Expression__IfElseExpr build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    4,
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            .Expression__IfElseExprDescriptor.INSTANCE);

            Expression__IfElseExpr obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Expression__IfElseExpr)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _exprType,
                                                _condition,
                                                _ifExp,
                                                _elseExp);
            else
                obj =
                        new schemarise.alfa.runtime.model.Expression__IfElseExpr
                                ._Expression__IfElseExprConcrete(
                                _exprType, _condition, _ifExp, _elseExp);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__IfElseExpr",
                    new java.lang.String[] {"ExprType", "condition", "ifExp", "elseExp"},
                    new java.lang.Object[] {_exprType, _condition, _ifExp, _elseExp});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _Expression__IfElseExprConcrete extends _Expression__IfElseExpr__Base__
            implements Expression__IfElseExpr {

        private _Expression__IfElseExprConcrete() {
            super();
        }

        private _Expression__IfElseExprConcrete(
                schemarise.alfa.runtime.model.IDataType _exprType,
                schemarise.alfa.runtime.model.IExpression _condition,
                schemarise.alfa.runtime.model.IExpression _ifExp,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _elseExp) {
            super(_exprType, _condition, _ifExp, _elseExp);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Expression__IfElseExpr__Base__ {
        public schemarise.alfa.runtime.model.IDataType _exprType;
        public schemarise.alfa.runtime.model.IExpression _condition;
        public schemarise.alfa.runtime.model.IExpression _ifExp;
        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> _elseExp;

        public _Expression__IfElseExpr__Base__() {}

        public _Expression__IfElseExpr__Base__(
                schemarise.alfa.runtime.model.IDataType _exprType,
                schemarise.alfa.runtime.model.IExpression _condition,
                schemarise.alfa.runtime.model.IExpression _ifExp,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _elseExp) {
            this._exprType = _exprType;
            this._condition = _condition;
            this._ifExp = _ifExp;
            this._elseExp = _elseExp;
        }

        public schemarise.alfa.runtime.model.IDataType getExprType() {
            return _exprType;
        }

        public schemarise.alfa.runtime.model.IExpression getCondition() {
            return _condition;
        }

        public schemarise.alfa.runtime.model.IExpression getIfExp() {
            return _ifExp;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> getElseExp() {
            return _elseExp;
        }

        public int hashCode() {
            return java.util.Objects.hash(_exprType, _condition, _ifExp, _elseExp);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Expression__IfElseExpr",
                    new java.lang.String[] {"ExprType", "condition", "ifExp", "elseExp"},
                    new java.lang.Object[] {_exprType, _condition, _ifExp, _elseExp});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.Expression__IfElseExpr
                            ._Expression__IfElseExprConcrete)) return false;
            schemarise.alfa.runtime.model.Expression__IfElseExpr._Expression__IfElseExprConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.Expression__IfElseExpr
                                            ._Expression__IfElseExprConcrete)
                                    o;
            return java.util.Objects.equals(_exprType, rhs._exprType)
                    && java.util.Objects.equals(_condition, rhs._condition)
                    && java.util.Objects.equals(_ifExp, rhs._ifExp)
                    && java.util.Objects.equals(_elseExp, rhs._elseExp);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Expression__IfElseExpr
                    .Expression__IfElseExprDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "ExprType":
                    return _exprType;
                case "condition":
                    return _condition;
                case "ifExp":
                    return _ifExp;
                case "elseExp":
                    return _elseExp;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getExprType().validate(__builderConfig);
            getCondition().validate(__builderConfig);
            getIfExp().validate(__builderConfig);
            if (getElseExp().isPresent()) {
                getElseExp().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class Expression__IfElseExprDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.Expression__IfElseExpr";
        public static schemarise.alfa.runtime.model.Expression__IfElseExpr
                        .Expression__IfElseExprDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.Expression__IfElseExpr
                                .Expression__IfElseExprDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EXPRTYPE = 0;
        public static final String FIELD_EXPRTYPE = "ExprType";

        public static final short FIELD_ID_CONDITION = 1;
        public static final String FIELD_CONDITION = "condition";

        public static final short FIELD_ID_IFEXP = 2;
        public static final String FIELD_IFEXP = "ifExp";

        public static final short FIELD_ID_ELSEEXP = 3;
        public static final String FIELD_ELSEEXP = "elseExp";

        private schemarise.alfa.runtime.model.UdtDataType _exprTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _conditionType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _ifExpType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IExpression")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _elseExpType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _exprTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr
                                ._Expression__IfElseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _exprTypeConsumer =
                        (builder, supplier) -> {
                            builder.setExprType(_exprTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _conditionConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _conditionType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr
                                ._Expression__IfElseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _conditionConsumer =
                        (builder, supplier) -> {
                            builder.setCondition(_conditionConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IExpression>
                _ifExpConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _ifExpType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr
                                ._Expression__IfElseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _ifExpConsumer =
                        (builder, supplier) -> {
                            builder.setIfExp(_ifExpConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>>
                _elseExpConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _elseExpConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _elseExpType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _elseExpType),
                                    _elseExpConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr
                                ._Expression__IfElseExprBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _elseExpConsumer =
                        (builder, supplier) -> {
                            builder.setElseExp(_elseExpConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _exprTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _exprTypeSupplier =
                        (p, consumer) -> {
                            _exprTypeSupplierInner1.accept(p.getExprType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _conditionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _conditionType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _conditionSupplier =
                        (p, consumer) -> {
                            _conditionSupplierInner1.accept(p.getCondition(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IExpression,
                        com.schemarise.alfa.runtime.DataConsumer>
                _ifExpSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _ifExpType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _ifExpSupplier =
                        (p, consumer) -> {
                            _ifExpSupplierInner1.accept(p.getIfExp(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _elseExpSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _elseExpSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _elseExpType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _elseExpType),
                                    pInner1,
                                    _elseExpSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Expression__IfElseExpr,
                        com.schemarise.alfa.runtime.DataConsumer>
                _elseExpSupplier =
                        (p, consumer) -> {
                            _elseExpSupplierInner1.accept(p.getElseExp(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                Expression__IfElseExpr, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta exprTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_exprTypeSupplier),
                        java.util.Optional.of(_exprTypeConsumer),
                        java.util.Optional.of(_exprTypeSupplierInner1),
                        java.util.Optional.of(_exprTypeConsumerInner1),
                        _exprTypeType,
                        FIELD_EXPRTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta conditionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_conditionSupplier),
                        java.util.Optional.of(_conditionConsumer),
                        java.util.Optional.of(_conditionSupplierInner1),
                        java.util.Optional.of(_conditionConsumerInner1),
                        _conditionType,
                        FIELD_CONDITION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta ifExpMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_ifExpSupplier),
                        java.util.Optional.of(_ifExpConsumer),
                        java.util.Optional.of(_ifExpSupplierInner1),
                        java.util.Optional.of(_ifExpConsumerInner1),
                        _ifExpType,
                        FIELD_IFEXP,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta elseExpMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_elseExpSupplier),
                        java.util.Optional.of(_elseExpConsumer),
                        java.util.Optional.of(_elseExpSupplierInner1),
                        java.util.Optional.of(_elseExpConsumerInner1),
                        _elseExpType,
                        FIELD_ELSEEXP,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public Expression__IfElseExprBuilder builder() {
            return new schemarise.alfa.runtime.model.Expression__IfElseExpr
                    ._Expression__IfElseExprBuilderImpl();
        }

        @Override
        public Expression__IfElseExprBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Expression__IfElseExpr
                    ._Expression__IfElseExprBuilderImpl(cc);
        }

        public Expression__IfElseExprDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__IfElseExpr>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EXPRTYPE, exprTypeMeta);
                                        put(FIELD_CONDITION, conditionMeta);
                                        put(FIELD_IFEXP, ifExpMeta);
                                        put(FIELD_ELSEEXP, elseExpMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Expression__IfElseExpr>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EXPRTYPE:
                    return FIELD_EXPRTYPE;
                case FIELD_ID_CONDITION:
                    return FIELD_CONDITION;
                case FIELD_ID_IFEXP:
                    return FIELD_IFEXP;
                case FIELD_ID_ELSEEXP:
                    return FIELD_ELSEEXP;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Expression__IfElseExpr{ExprType:schemarise.alfa.runtime.model.IDataType[4404d6a0];condition:schemarise.alfa.runtime.model.IExpression[5fb330b3];elseExp:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;ifExp:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            schemarise.alfa.runtime.model.Expression__IfElseExpr{ExprType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];condition:schemarise.alfa.runtime.model.IExpression[5fb330b3];ifExp:schemarise.alfa.runtime.model.IExpression[5fb330b3];}
            */
            return "a947716f:f0409ca8";
        }
    }
    // </editor-fold>

}
