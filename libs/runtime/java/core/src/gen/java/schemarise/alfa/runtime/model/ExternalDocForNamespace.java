// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface ExternalDocForNamespace extends com.schemarise.alfa.runtime.Record {

    java.lang.String getNamespaceName();

    java.util.Optional<java.lang.String> getDoc();

    java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType> getTypes();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static ExternalDocForNamespaceBuilder builder() {
        return new schemarise.alfa.runtime.model.ExternalDocForNamespace
                ._ExternalDocForNamespaceBuilderImpl();
    }

    public static ExternalDocForNamespaceBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.ExternalDocForNamespace
                                    .ExternalDocForNamespaceDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.ExternalDocForNamespace
                    ._ExternalDocForNamespaceBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface ExternalDocForNamespaceBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        ExternalDocForNamespaceBuilder setNamespaceName(java.lang.String v);

        java.lang.String getNamespaceName();

        ExternalDocForNamespaceBuilder setDoc(java.util.Optional<java.lang.String> v);

        ExternalDocForNamespaceBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        ExternalDocForNamespaceBuilder putTypes(
                java.lang.String k, schemarise.alfa.runtime.model.ExternalDocForType v);

        ExternalDocForNamespaceBuilder putAllTypes(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                        all);

        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                getTypes();

        ExternalDocForNamespace build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _ExternalDocForNamespaceBuilderImpl extends _ExternalDocForNamespace__Base__
            implements ExternalDocForNamespaceBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _ExternalDocForNamespaceBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _ExternalDocForNamespaceBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(3);
            __missingFields.set(0, 3);
            setDoc(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ExternalDocForNamespace
                    .ExternalDocForNamespaceDescriptor.INSTANCE;
        }

        public ExternalDocForNamespaceBuilder setNamespaceName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("NamespaceName", v);
            this._namespaceName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_NAMESPACENAME);
            return this;
        }

        public ExternalDocForNamespaceBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_DOC);
            return this;
        }

        public ExternalDocForNamespaceBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_DOC);
            return this;
        }

        private void createTypes() {
            this._types = new java.util.LinkedHashMap<>();
        }

        public ExternalDocForNamespaceBuilder putTypes(
                java.lang.String k, schemarise.alfa.runtime.model.ExternalDocForType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Key Types", k);
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Value Types", v);
            if (this._types == null) createTypes();
            this._types.put(k, v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_TYPES);
            return this;
        }

        public ExternalDocForNamespaceBuilder putAllTypes(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Types", all);
            if (this._types == null) createTypes();
            this._types.putAll(all);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_TYPES);
            return this;
        }

        private ExternalDocForNamespaceBuilder setTypes(
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                        all) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Types", all);
            _types = all;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.FIELD_ID_TYPES);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "NamespaceName":
                    setNamespaceName((java.lang.String) val);
                    break;
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "Types":
                    setTypes(
                            (java.util.Map<
                                            java.lang.String,
                                            schemarise.alfa.runtime.model.ExternalDocForType>)
                                    val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public ExternalDocForNamespace build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    3,
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            .ExternalDocForNamespaceDescriptor.INSTANCE);

            ExternalDocForNamespace obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (ExternalDocForNamespace)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _namespaceName,
                                                _doc,
                                                com.schemarise.alfa.runtime.utils.VectorCloner
                                                        .immutableMap(
                                                                builderConfig(),
                                                                schemarise.alfa.runtime.model
                                                                        .ExternalDocForNamespace
                                                                        .ExternalDocForNamespaceDescriptor
                                                                        .INSTANCE
                                                                        ._typesSupplierInner1,
                                                                _types));
            else
                obj =
                        new schemarise.alfa.runtime.model.ExternalDocForNamespace
                                ._ExternalDocForNamespaceConcrete(
                                _namespaceName,
                                _doc,
                                com.schemarise.alfa.runtime.utils.VectorCloner.immutableMap(
                                        builderConfig(),
                                        schemarise.alfa.runtime.model.ExternalDocForNamespace
                                                .ExternalDocForNamespaceDescriptor.INSTANCE
                                                ._typesSupplierInner1,
                                        _types));

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ExternalDocForNamespace",
                    new java.lang.String[] {"NamespaceName", "Doc", "Types"},
                    new java.lang.Object[] {_namespaceName, _doc, _types});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _ExternalDocForNamespaceConcrete extends _ExternalDocForNamespace__Base__
            implements ExternalDocForNamespace {

        private _ExternalDocForNamespaceConcrete() {
            super();
        }

        private _ExternalDocForNamespaceConcrete(
                java.lang.String _namespaceName,
                java.util.Optional<java.lang.String> _doc,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                        _types) {
            super(_namespaceName, _doc, _types);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _ExternalDocForNamespace__Base__ {
        public java.lang.String _namespaceName;
        public java.util.Optional<java.lang.String> _doc;
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                _types;

        public _ExternalDocForNamespace__Base__() {}

        public _ExternalDocForNamespace__Base__(
                java.lang.String _namespaceName,
                java.util.Optional<java.lang.String> _doc,
                java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                        _types) {
            this._namespaceName = _namespaceName;
            this._doc = _doc;
            this._types = _types;
        }

        public java.lang.String getNamespaceName() {
            return _namespaceName;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>
                getTypes() {
            return _types;
        }

        public int hashCode() {
            return java.util.Objects.hash(_namespaceName, _doc, _types);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.ExternalDocForNamespace",
                    new java.lang.String[] {"NamespaceName", "Doc", "Types"},
                    new java.lang.Object[] {_namespaceName, _doc, _types});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.ExternalDocForNamespace
                            ._ExternalDocForNamespaceConcrete)) return false;
            schemarise.alfa.runtime.model.ExternalDocForNamespace._ExternalDocForNamespaceConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.ExternalDocForNamespace
                                            ._ExternalDocForNamespaceConcrete)
                                    o;
            return java.util.Objects.equals(_namespaceName, rhs._namespaceName)
                    && java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_types, rhs._types);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.ExternalDocForNamespace
                    .ExternalDocForNamespaceDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "NamespaceName":
                    return _namespaceName;
                case "Doc":
                    return _doc;
                case "Types":
                    return _types;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getTypes()
                    .entrySet()
                    .stream()
                    .filter(e0 -> e0.getValue() != null)
                    .forEach(
                            e0 -> {
                                e0.getValue().validate(__builderConfig);
                            });

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ExternalDocForNamespaceDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.ExternalDocForNamespace";
        public static schemarise.alfa.runtime.model.ExternalDocForNamespace
                        .ExternalDocForNamespaceDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.ExternalDocForNamespace
                                .ExternalDocForNamespaceDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_NAMESPACENAME = 0;
        public static final String FIELD_NAMESPACENAME = "NamespaceName";

        public static final short FIELD_ID_DOC = 1;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_TYPES = 2;
        public static final String FIELD_TYPES = "Types";

        private schemarise.alfa.runtime.model.ScalarDataType _namespaceNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.MapDataType _typesType =
                schemarise.alfa.runtime.model.MapDataType.builder()
                        .setKeyType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .setKeyName(java.util.Optional.of("typeName"))
                        .setValueType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.ExternalDocForType")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _namespaceNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _namespaceNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace
                                ._ExternalDocForNamespaceBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _namespaceNameConsumer =
                        (builder, supplier) -> {
                            builder.setNamespaceName(_namespaceNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace
                                ._ExternalDocForNamespaceBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer map< typeName : string , schemarise.alfa.runtime.model.ExternalDocForType > -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>>
                _typesConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _typesConsumerInner2Key =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _typesType)
                                                                        .getKeyType()));
                                            };
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.ExternalDocForType>
                                    _typesConsumerInner2Val =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _typesType)
                                                                        .getValueType()));
                                            };
                            return supplierInner1.mapValue(
                                    ((schemarise.alfa.runtime.model.MapDataType) _typesType),
                                    _typesConsumerInner2Key,
                                    _typesConsumerInner2Val);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace
                                ._ExternalDocForNamespaceBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _typesConsumer =
                        (builder, supplier) -> {
                            builder.putAllTypes(_typesConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _namespaceNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _namespaceNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace,
                        com.schemarise.alfa.runtime.DataConsumer>
                _namespaceNameSupplier =
                        (p, consumer) -> {
                            _namespaceNameSupplierInner1.accept(p.getNamespaceName(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier map< typeName : string , schemarise.alfa.runtime.model.ExternalDocForType > -- */
        java.util.function.BiConsumer<
                        java.util.Map<
                                java.lang.String, schemarise.alfa.runtime.model.ExternalDocForType>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typesSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typesSupplierInner2Key =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _typesType)
                                                                        .getKeyType()),
                                                        pInner2);
                                            };
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.ExternalDocForType,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _typesSupplierInner2Val =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .MapDataType)
                                                                                _typesType)
                                                                        .getValueType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.MapDataType) _typesType),
                                    pInner1,
                                    _typesSupplierInner2Key,
                                    _typesSupplierInner2Val);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.ExternalDocForNamespace,
                        com.schemarise.alfa.runtime.DataConsumer>
                _typesSupplier =
                        (p, consumer) -> {
                            _typesSupplierInner1.accept(p.getTypes(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                ExternalDocForNamespace, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta namespaceNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_namespaceNameSupplier),
                        java.util.Optional.of(_namespaceNameConsumer),
                        java.util.Optional.of(_namespaceNameSupplierInner1),
                        java.util.Optional.of(_namespaceNameConsumerInner1),
                        _namespaceNameType,
                        FIELD_NAMESPACENAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta typesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_typesSupplier),
                        java.util.Optional.of(_typesConsumer),
                        java.util.Optional.of(_typesSupplierInner1),
                        java.util.Optional.of(_typesConsumerInner1),
                        _typesType,
                        FIELD_TYPES,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public ExternalDocForNamespaceBuilder builder() {
            return new schemarise.alfa.runtime.model.ExternalDocForNamespace
                    ._ExternalDocForNamespaceBuilderImpl();
        }

        @Override
        public ExternalDocForNamespaceBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.ExternalDocForNamespace
                    ._ExternalDocForNamespaceBuilderImpl(cc);
        }

        public ExternalDocForNamespaceDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ExternalDocForNamespace>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_NAMESPACENAME, namespaceNameMeta);
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_TYPES, typesMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ExternalDocForNamespace>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_NAMESPACENAME:
                    return FIELD_NAMESPACENAME;
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_TYPES:
                    return FIELD_TYPES;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.ExternalDocForNamespace{Doc:optional<string;>;NamespaceName:string;Types:map<string,string>;}
            schemarise.alfa.runtime.model.ExternalDocForNamespace{NamespaceName:string;Types:map<string,string>;}
            */
            return "70cfe391:578f3fdf";
        }
    }
    // </editor-fold>

}
