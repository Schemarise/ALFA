// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Pair<L, R> extends com.schemarise.alfa.runtime.Record {

    L getLeft();

    R getRight();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static <L, R> PairBuilder<L, R> builder() {
        return new schemarise.alfa.runtime.model.Pair._PairBuilderImpl();
    }

    public static <L, R> PairBuilder<L, R> builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Pair.PairDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Pair._PairBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface PairBuilder<L, R>
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        PairBuilder setLeft(L v);

        L getLeft();

        PairBuilder setRight(R v);

        R getRight();

        Pair<L, R> build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _PairBuilderImpl<L, R> extends _Pair__Base__<L, R> implements PairBuilder<L, R> {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _PairBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _PairBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Pair.PairDescriptor.INSTANCE;
        }

        public PairBuilder setLeft(L v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Left", v);
            this._left = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Pair.PairDescriptor.FIELD_ID_LEFT);
            return this;
        }

        public PairBuilder setRight(R v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Right", v);
            this._right = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Pair.PairDescriptor.FIELD_ID_RIGHT);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Left":
                    setLeft((L) val);
                    break;
                case "Right":
                    setRight((R) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Pair<L, R> build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.Pair.PairDescriptor.INSTANCE);

            Pair obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Pair)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _left, _right);
            else obj = new schemarise.alfa.runtime.model.Pair._PairConcrete(_left, _right);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Pair",
                    new java.lang.String[] {"Left", "Right"},
                    new java.lang.Object[] {_left, _right});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _PairConcrete<L, R> extends _Pair__Base__<L, R> implements Pair {

        private _PairConcrete() {
            super();
        }

        private _PairConcrete(L _left, R _right) {
            super(_left, _right);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Pair__Base__<L, R> {
        public L _left;
        public R _right;

        public _Pair__Base__() {}

        public _Pair__Base__(L _left, R _right) {
            this._left = _left;
            this._right = _right;
        }

        public L getLeft() {
            return _left;
        }

        public R getRight() {
            return _right;
        }

        public int hashCode() {
            return java.util.Objects.hash(_left, _right);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Pair",
                    new java.lang.String[] {"Left", "Right"},
                    new java.lang.Object[] {_left, _right});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Pair._PairConcrete)) return false;
            schemarise.alfa.runtime.model.Pair._PairConcrete rhs =
                    (schemarise.alfa.runtime.model.Pair._PairConcrete) o;
            return java.util.Objects.equals(_left, rhs._left)
                    && java.util.Objects.equals(_right, rhs._right);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Pair.PairDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Left":
                    return _left;
                case "Right":
                    return _right;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class PairDescriptor<L, R>
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Pair";
        public static schemarise.alfa.runtime.model.Pair.PairDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Pair.PairDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_LEFT = 0;
        public static final String FIELD_LEFT = "Left";

        public static final short FIELD_ID_RIGHT = 1;
        public static final String FIELD_RIGHT = "Right";

        private schemarise.alfa.runtime.model.TypeParameterDataType _leftType =
                schemarise.alfa.runtime.model.TypeParameterDataType.builder().setParamName("L").build();

        private schemarise.alfa.runtime.model.TypeParameterDataType _rightType =
                schemarise.alfa.runtime.model.TypeParameterDataType.builder().setParamName("R").build();

        /* -- Consumer L -- */

        /* -- Consumer R -- */

        /* -- Supplier L -- */

        /* -- Supplier R -- */

        public java.util.Optional<
                        java.util.function.BiConsumer<Pair, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta leftMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _leftType,
                        FIELD_LEFT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta rightMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _rightType,
                        FIELD_RIGHT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public PairBuilder builder() {
            return new schemarise.alfa.runtime.model.Pair._PairBuilderImpl();
        }

        @Override
        public PairBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Pair._PairBuilderImpl(cc);
        }

        public PairDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Pair>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_LEFT, leftMeta);
                                        put(FIELD_RIGHT, rightMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Pair>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_LEFT:
                    return FIELD_LEFT;
                case FIELD_ID_RIGHT:
                    return FIELD_RIGHT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Pair{Left:;Right:;}
            schemarise.alfa.runtime.model.Pair{Left:;Right:;}
            */
            return "2f075581:";
        }
    }
    // </editor-fold>

}
