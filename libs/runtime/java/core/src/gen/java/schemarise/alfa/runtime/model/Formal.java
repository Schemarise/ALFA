// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface Formal
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IAttribute {

    java.util.Optional<
                    java.util.Map<
                            java.lang.String,
                            java.util.Map<
                                    java.lang.String, schemarise.alfa.runtime.model.IExpression>>>
            getAnnotations();

    java.util.Optional<java.lang.String> getDoc();

    java.lang.String getName();

    schemarise.alfa.runtime.model.IDataType getDataType();

    java.util.Optional<schemarise.alfa.runtime.model.Location> getSrcLocation();

    java.util.Optional<schemarise.alfa.runtime.model.IExpression> getDefaultValue();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static FormalBuilder builder() {
        return new schemarise.alfa.runtime.model.Formal._FormalBuilderImpl();
    }

    public static FormalBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(bc, schemarise.alfa.runtime.model.Formal.FormalDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.Formal._FormalBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface FormalBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IAttribute.IAttributeBuilder {
        FormalBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v);

        FormalBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v);

        java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations();

        FormalBuilder setDoc(java.util.Optional<java.lang.String> v);

        FormalBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        FormalBuilder setName(java.lang.String v);

        java.lang.String getName();

        FormalBuilder setDataType(schemarise.alfa.runtime.model.IDataType v);

        schemarise.alfa.runtime.model.IDataType getDataType();

        FormalBuilder setSrcLocation(java.util.Optional<schemarise.alfa.runtime.model.Location> v);

        FormalBuilder setSrcLocation(schemarise.alfa.runtime.model.Location v);

        java.util.Optional<schemarise.alfa.runtime.model.Location> getSrcLocation();

        FormalBuilder setDefaultValue(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v);

        FormalBuilder setDefaultValue(schemarise.alfa.runtime.model.IExpression v);

        java.util.Optional<schemarise.alfa.runtime.model.IExpression> getDefaultValue();

        Formal build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _FormalBuilderImpl extends _Formal__Base__ implements FormalBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _FormalBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _FormalBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(6);
            __missingFields.set(0, 6);
            setAnnotations(java.util.Optional.empty());
            setDoc(java.util.Optional.empty());
            setSrcLocation(java.util.Optional.empty());
            setDefaultValue(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Formal.FormalDescriptor.INSTANCE;
        }

        public FormalBuilder setAnnotations(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Annotations", v);
            this._annotations = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_ANNOTATIONS);
            return this;
        }

        public FormalBuilder setAnnotations(
                java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>
                        v) {
            this._annotations = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_ANNOTATIONS);
            return this;
        }

        public FormalBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_DOC);
            return this;
        }

        public FormalBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_DOC);
            return this;
        }

        public FormalBuilder setName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Name", v);
            this._name = v;
            clearMissingFlag(schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_NAME);
            return this;
        }

        public FormalBuilder setDataType(schemarise.alfa.runtime.model.IDataType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DataType", v);
            this._dataType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_DATATYPE);
            return this;
        }

        public FormalBuilder setSrcLocation(
                java.util.Optional<schemarise.alfa.runtime.model.Location> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("SrcLocation", v);
            this._srcLocation = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_SRCLOCATION);
            return this;
        }

        public FormalBuilder setSrcLocation(schemarise.alfa.runtime.model.Location v) {
            this._srcLocation = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_SRCLOCATION);
            return this;
        }

        public FormalBuilder setDefaultValue(
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("DefaultValue", v);
            this._defaultValue = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_DEFAULTVALUE);
            return this;
        }

        public FormalBuilder setDefaultValue(schemarise.alfa.runtime.model.IExpression v) {
            this._defaultValue = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.FIELD_ID_DEFAULTVALUE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Annotations":
                    setAnnotations(
                            (java.util.Optional<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>)
                                    val);
                    break;
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "Name":
                    setName((java.lang.String) val);
                    break;
                case "DataType":
                    setDataType((schemarise.alfa.runtime.model.IDataType) val);
                    break;
                case "SrcLocation":
                    setSrcLocation(
                            (java.util.Optional<schemarise.alfa.runtime.model.Location>) val);
                    break;
                case "DefaultValue":
                    setDefaultValue(
                            (java.util.Optional<schemarise.alfa.runtime.model.IExpression>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public Formal build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    6,
                    schemarise.alfa.runtime.model.Formal.FormalDescriptor.INSTANCE);

            Formal obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (Formal)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _annotations,
                                                _doc,
                                                _name,
                                                _dataType,
                                                _srcLocation,
                                                _defaultValue);
            else
                obj =
                        new schemarise.alfa.runtime.model.Formal._FormalConcrete(
                                _annotations, _doc, _name, _dataType, _srcLocation, _defaultValue);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Formal",
                    new java.lang.String[] {
                        "Annotations", "Doc", "Name", "DataType", "SrcLocation", "DefaultValue"
                    },
                    new java.lang.Object[] {
                        _annotations, _doc, _name, _dataType, _srcLocation, _defaultValue
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _FormalConcrete extends _Formal__Base__ implements Formal {

        private _FormalConcrete() {
            super();
        }

        private _FormalConcrete(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _name,
                schemarise.alfa.runtime.model.IDataType _dataType,
                java.util.Optional<schemarise.alfa.runtime.model.Location> _srcLocation,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _defaultValue) {
            super(_annotations, _doc, _name, _dataType, _srcLocation, _defaultValue);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _Formal__Base__ {
        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                _annotations;
        public java.util.Optional<java.lang.String> _doc;
        public java.lang.String _name;
        public schemarise.alfa.runtime.model.IDataType _dataType;
        public java.util.Optional<schemarise.alfa.runtime.model.Location> _srcLocation;
        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> _defaultValue;

        public _Formal__Base__() {}

        public _Formal__Base__(
                java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>
                        _annotations,
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _name,
                schemarise.alfa.runtime.model.IDataType _dataType,
                java.util.Optional<schemarise.alfa.runtime.model.Location> _srcLocation,
                java.util.Optional<schemarise.alfa.runtime.model.IExpression> _defaultValue) {
            this._annotations = _annotations;
            this._doc = _doc;
            this._name = _name;
            this._dataType = _dataType;
            this._srcLocation = _srcLocation;
            this._defaultValue = _defaultValue;
        }

        public java.util.Optional<
                        java.util.Map<
                                java.lang.String,
                                java.util.Map<
                                        java.lang.String,
                                        schemarise.alfa.runtime.model.IExpression>>>
                getAnnotations() {
            return _annotations;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public java.lang.String getName() {
            return _name;
        }

        public schemarise.alfa.runtime.model.IDataType getDataType() {
            return _dataType;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.Location> getSrcLocation() {
            return _srcLocation;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.IExpression> getDefaultValue() {
            return _defaultValue;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _annotations, _doc, _name, _dataType, _srcLocation, _defaultValue);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.Formal",
                    new java.lang.String[] {
                        "Annotations", "Doc", "Name", "DataType", "SrcLocation", "DefaultValue"
                    },
                    new java.lang.Object[] {
                        _annotations, _doc, _name, _dataType, _srcLocation, _defaultValue
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.Formal._FormalConcrete)) return false;
            schemarise.alfa.runtime.model.Formal._FormalConcrete rhs =
                    (schemarise.alfa.runtime.model.Formal._FormalConcrete) o;
            return java.util.Objects.equals(_annotations, rhs._annotations)
                    && java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_name, rhs._name)
                    && java.util.Objects.equals(_dataType, rhs._dataType)
                    && java.util.Objects.equals(_srcLocation, rhs._srcLocation)
                    && java.util.Objects.equals(_defaultValue, rhs._defaultValue);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.Formal.FormalDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Annotations":
                    return _annotations;
                case "Doc":
                    return _doc;
                case "Name":
                    return _name;
                case "DataType":
                    return _dataType;
                case "SrcLocation":
                    return _srcLocation;
                case "DefaultValue":
                    return _defaultValue;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            if (getAnnotations().isPresent()) {
                getAnnotations()
                        .get()
                        .entrySet()
                        .stream()
                        .filter(e0 -> e0.getValue() != null)
                        .forEach(
                                e0 -> {
                                    e0.getValue()
                                            .entrySet()
                                            .stream()
                                            .filter(e1 -> e1.getValue() != null)
                                            .forEach(
                                                    e1 -> {
                                                        e1.getValue().validate(__builderConfig);
                                                    });
                                });
            }

            getDataType().validate(__builderConfig);
            if (getSrcLocation().isPresent()) {
                getSrcLocation().get().validate(__builderConfig);
            }
            if (getDefaultValue().isPresent()) {
                getDefaultValue().get().validate(__builderConfig);
            }

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class FormalDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.Formal";
        public static schemarise.alfa.runtime.model.Formal.FormalDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.Formal.FormalDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_ANNOTATIONS = 0;
        public static final String FIELD_ANNOTATIONS = "Annotations";

        public static final short FIELD_ID_DOC = 1;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_NAME = 2;
        public static final String FIELD_NAME = "Name";

        public static final short FIELD_ID_DATATYPE = 3;
        public static final String FIELD_DATATYPE = "DataType";

        public static final short FIELD_ID_SRCLOCATION = 4;
        public static final String FIELD_SRCLOCATION = "SrcLocation";

        public static final short FIELD_ID_DEFAULTVALUE = 5;
        public static final String FIELD_DEFAULTVALUE = "DefaultValue";

        private schemarise.alfa.runtime.model.OptionalDataType _annotationsType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.MapDataType.builder()
                                        .setKeyType(
                                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                                        .setScalarType(
                                                                schemarise.alfa.runtime.model.ScalarType
                                                                        .stringType)
                                                        .build())
                                        .setKeyName(java.util.Optional.of("AnnotationName"))
                                        .setValueType(
                                                schemarise.alfa.runtime.model.MapDataType.builder()
                                                        .setKeyType(
                                                                schemarise.alfa.runtime.model
                                                                        .ScalarDataType.builder()
                                                                        .setScalarType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .ScalarType
                                                                                        .stringType)
                                                                        .build())
                                                        .setValueType(
                                                                schemarise.alfa.runtime.model.UdtDataType
                                                                        .builder()
                                                                        .setFullyQualifiedName(
                                                                                "schemarise.alfa.runtime.model.IExpression")
                                                                        .setUdtType(
                                                                                schemarise.alfa.runtime
                                                                                        .model
                                                                                        .UdtMetaType
                                                                                        .traitType)
                                                                        .build())
                                                        .build())
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _dataTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.IDataType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _srcLocationType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.Location")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _defaultValueType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.IExpression")
                                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.traitType)
                                        .build())
                        .build();

        /* -- Consumer map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>>
                _annotationsConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>>
                                    _annotationsConsumerInner2 =
                                            (supplierInner2) -> {
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.lang.String>
                                                        _annotationsConsumerInner3Key =
                                                                (supplierInner3) -> {
                                                                    return supplierInner3
                                                                            .stringValue(
                                                                                    ((schemarise
                                                                                                    .alfa
                                                                                                    .runtime
                                                                                                    .model
                                                                                                    .ScalarDataType)
                                                                                            ((schemarise
                                                                                                                    .alfa
                                                                                                                    .runtime
                                                                                                                    .model
                                                                                                                    .MapDataType)
                                                                                                            ((schemarise
                                                                                                                                    .alfa
                                                                                                                                    .runtime
                                                                                                                                    .model
                                                                                                                                    .OptionalDataType)
                                                                                                                            _annotationsType)
                                                                                                                    .getComponentType())
                                                                                                    .getKeyType()));
                                                                };
                                                java.util.function.Function<
                                                                com.schemarise.alfa.runtime.DataSupplier,
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>>
                                                        _annotationsConsumerInner3Val =
                                                                (supplierInner3) -> {
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    java.lang
                                                                                            .String>
                                                                            _annotationsConsumerInner4Key =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .stringValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()));
                                                                                    };
                                                                    java.util.function.Function<
                                                                                    com.schemarise
                                                                                            .alfa.runtime
                                                                                            .DataSupplier,
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression>
                                                                            _annotationsConsumerInner4Val =
                                                                                    (supplierInner4) -> {
                                                                                        return supplierInner4
                                                                                                .objectValue(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()));
                                                                                    };
                                                                    return supplierInner3.mapValue(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            _annotationsConsumerInner4Key,
                                                                            _annotationsConsumerInner4Val);
                                                                };
                                                return supplierInner2.mapValue(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        _annotationsConsumerInner3Key,
                                                        _annotationsConsumerInner3Val);
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    _annotationsConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _annotationsConsumer =
                        (builder, supplier) -> {
                            builder.setAnnotations(_annotationsConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _nameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _nameConsumer =
                        (builder, supplier) -> {
                            builder.setName(_nameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.IDataType>
                _dataTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dataTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _dataTypeConsumer =
                        (builder, supplier) -> {
                            builder.setDataType(_dataTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.Location ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.Location>>
                _srcLocationConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.Location>
                                    _srcLocationConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _srcLocationType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _srcLocationType),
                                    _srcLocationConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _srcLocationConsumer =
                        (builder, supplier) -> {
                            builder.setSrcLocation(_srcLocationConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>>
                _defaultValueConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.IExpression>
                                    _defaultValueConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _defaultValueType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _defaultValueType),
                                    _defaultValueConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal._FormalBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _defaultValueConsumer =
                        (builder, supplier) -> {
                            builder.setDefaultValue(_defaultValueConsumerInner1.apply(supplier));
                        };

        /* -- Supplier map< AnnotationName : string , map< string , schemarise.alfa.runtime.model.IExpression > > ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<
                                java.util.Map<
                                        java.lang.String,
                                        java.util.Map<
                                                java.lang.String,
                                                schemarise.alfa.runtime.model.IExpression>>>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.util.Map<
                                                    java.lang.String,
                                                    java.util.Map<
                                                            java.lang.String,
                                                            schemarise.alfa.runtime.model
                                                                    .IExpression>>,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _annotationsSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                java.util.function.BiConsumer<
                                                                java.lang.String,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Key =
                                                                (pInner3, consumerInner3) -> {
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .ScalarDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getKeyType()),
                                                                            pInner3);
                                                                };
                                                java.util.function.BiConsumer<
                                                                java.util.Map<
                                                                        java.lang.String,
                                                                        schemarise.alfa.runtime
                                                                                .model.IExpression>,
                                                                com.schemarise.alfa.runtime
                                                                        .DataConsumer>
                                                        _annotationsSupplierInner3Val =
                                                                (pInner3, consumerInner3) -> {
                                                                    java.util.function.BiConsumer<
                                                                                    java.lang
                                                                                            .String,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Key =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .ScalarDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getKeyType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    java.util.function.BiConsumer<
                                                                                    schemarise.alfa
                                                                                            .runtime
                                                                                            .model
                                                                                            .IExpression,
                                                                                    com.schemarise
                                                                                            .alfa
                                                                                            .runtime
                                                                                            .DataConsumer>
                                                                            _annotationsSupplierInner4Val =
                                                                                    (pInner4,
                                                                                            consumerInner4) -> {
                                                                                        consumerInner4
                                                                                                .consume(
                                                                                                        ((schemarise
                                                                                                                        .alfa
                                                                                                                        .runtime
                                                                                                                        .model
                                                                                                                        .UdtDataType)
                                                                                                                ((schemarise
                                                                                                                                        .alfa
                                                                                                                                        .runtime
                                                                                                                                        .model
                                                                                                                                        .MapDataType)
                                                                                                                                ((schemarise
                                                                                                                                                        .alfa
                                                                                                                                                        .runtime
                                                                                                                                                        .model
                                                                                                                                                        .MapDataType)
                                                                                                                                                ((schemarise
                                                                                                                                                                        .alfa
                                                                                                                                                                        .runtime
                                                                                                                                                                        .model
                                                                                                                                                                        .OptionalDataType)
                                                                                                                                                                _annotationsType)
                                                                                                                                                        .getComponentType())
                                                                                                                                        .getValueType())
                                                                                                                        .getValueType()),
                                                                                                        pInner4);
                                                                                    };
                                                                    consumerInner3.consume(
                                                                            ((schemarise.alfa.runtime
                                                                                            .model
                                                                                            .MapDataType)
                                                                                    ((schemarise
                                                                                                            .alfa
                                                                                                            .runtime
                                                                                                            .model
                                                                                                            .MapDataType)
                                                                                                    ((schemarise
                                                                                                                            .alfa
                                                                                                                            .runtime
                                                                                                                            .model
                                                                                                                            .OptionalDataType)
                                                                                                                    _annotationsType)
                                                                                                            .getComponentType())
                                                                                            .getValueType()),
                                                                            pInner3,
                                                                            _annotationsSupplierInner4Key,
                                                                            _annotationsSupplierInner4Val);
                                                                };
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.MapDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _annotationsType)
                                                                        .getComponentType()),
                                                        pInner2,
                                                        _annotationsSupplierInner3Key,
                                                        _annotationsSupplierInner3Val);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _annotationsType),
                                    pInner1,
                                    _annotationsSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _annotationsSupplier =
                        (p, consumer) -> {
                            _annotationsSupplierInner1.accept(p.getAnnotations(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _nameType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _nameSupplier =
                        (p, consumer) -> {
                            _nameSupplierInner1.accept(p.getName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IDataType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.IDataType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _dataTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _dataTypeSupplier =
                        (p, consumer) -> {
                            _dataTypeSupplierInner1.accept(p.getDataType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.Location ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.Location>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _srcLocationSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.Location,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _srcLocationSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _srcLocationType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _srcLocationType),
                                    pInner1,
                                    _srcLocationSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _srcLocationSupplier =
                        (p, consumer) -> {
                            _srcLocationSupplierInner1.accept(p.getSrcLocation(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.IExpression ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.IExpression>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defaultValueSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.IExpression,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _defaultValueSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _defaultValueType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _defaultValueType),
                                    pInner1,
                                    _defaultValueSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.Formal,
                        com.schemarise.alfa.runtime.DataConsumer>
                _defaultValueSupplier =
                        (p, consumer) -> {
                            _defaultValueSupplierInner1.accept(p.getDefaultValue(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<Formal, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta annotationsMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_annotationsSupplier),
                        java.util.Optional.of(_annotationsConsumer),
                        java.util.Optional.of(_annotationsSupplierInner1),
                        java.util.Optional.of(_annotationsConsumerInner1),
                        _annotationsType,
                        FIELD_ANNOTATIONS,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_nameSupplier),
                        java.util.Optional.of(_nameConsumer),
                        java.util.Optional.of(_nameSupplierInner1),
                        java.util.Optional.of(_nameConsumerInner1),
                        _nameType,
                        FIELD_NAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_dataTypeSupplier),
                        java.util.Optional.of(_dataTypeConsumer),
                        java.util.Optional.of(_dataTypeSupplierInner1),
                        java.util.Optional.of(_dataTypeConsumerInner1),
                        _dataTypeType,
                        FIELD_DATATYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta srcLocationMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_srcLocationSupplier),
                        java.util.Optional.of(_srcLocationConsumer),
                        java.util.Optional.of(_srcLocationSupplierInner1),
                        java.util.Optional.of(_srcLocationConsumerInner1),
                        _srcLocationType,
                        FIELD_SRCLOCATION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta defaultValueMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_defaultValueSupplier),
                        java.util.Optional.of(_defaultValueConsumer),
                        java.util.Optional.of(_defaultValueSupplierInner1),
                        java.util.Optional.of(_defaultValueConsumerInner1),
                        _defaultValueType,
                        FIELD_DEFAULTVALUE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public FormalBuilder builder() {
            return new schemarise.alfa.runtime.model.Formal._FormalBuilderImpl();
        }

        @Override
        public FormalBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.Formal._FormalBuilderImpl(cc);
        }

        public FormalDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Formal>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_ANNOTATIONS, annotationsMeta);
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_NAME, nameMeta);
                                        put(FIELD_DATATYPE, dataTypeMeta);
                                        put(FIELD_SRCLOCATION, srcLocationMeta);
                                        put(FIELD_DEFAULTVALUE, defaultValueMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<Formal>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_ANNOTATIONS:
                    return FIELD_ANNOTATIONS;
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_NAME:
                    return FIELD_NAME;
                case FIELD_ID_DATATYPE:
                    return FIELD_DATATYPE;
                case FIELD_ID_SRCLOCATION:
                    return FIELD_SRCLOCATION;
                case FIELD_ID_DEFAULTVALUE:
                    return FIELD_DEFAULTVALUE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.Formal{Annotations:optional<map<string,string>;>;DataType:schemarise.alfa.runtime.model.IDataType[4404d6a0];DefaultValue:optional<schemarise.alfa.runtime.model.IExpression[5fb330b3];>;Doc:optional<string;>;Name:string;SrcLocation:optional<schemarise.alfa.runtime.model.Location[946b249f];>;}
            schemarise.alfa.runtime.model.Formal{DataType:schemarise.alfa.runtime.model.IDataType[5fbc41ae];Name:string;}
            */
            return "5e1463e8:3e9a7081";
        }
    }
    // </editor-fold>

}
