// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.Java8Exporter")
public interface UdtSummary
        extends com.schemarise.alfa.runtime.Record, schemarise.alfa.runtime.model.IDocumentation {

    java.util.Optional<java.lang.String> getDoc();

    java.lang.String getFullyQualifiedName();

    schemarise.alfa.runtime.model.UdtMetaType getUdtType();

    java.util.Optional<java.lang.Integer> getAttribCount();

    java.util.Optional<java.lang.Boolean> getIsSynthetic();

    java.util.Optional<java.lang.Boolean> getIsInternal();

    java.util.Optional<java.lang.Integer> getVersion();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtSummaryBuilder builder() {
        return new schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl();
    }

    public static UdtSummaryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.INSTANCE);
        else return new schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtSummaryBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.IDocumentation.IDocumentationBuilder {
        UdtSummaryBuilder setDoc(java.util.Optional<java.lang.String> v);

        UdtSummaryBuilder setDoc(java.lang.String v);

        java.util.Optional<java.lang.String> getDoc();

        UdtSummaryBuilder setFullyQualifiedName(java.lang.String v);

        java.lang.String getFullyQualifiedName();

        UdtSummaryBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v);

        schemarise.alfa.runtime.model.UdtMetaType getUdtType();

        UdtSummaryBuilder setAttribCount(java.util.Optional<java.lang.Integer> v);

        UdtSummaryBuilder setAttribCount(int v);

        java.util.Optional<java.lang.Integer> getAttribCount();

        UdtSummaryBuilder setIsSynthetic(java.util.Optional<java.lang.Boolean> v);

        UdtSummaryBuilder setIsSynthetic(boolean v);

        java.util.Optional<java.lang.Boolean> getIsSynthetic();

        UdtSummaryBuilder setIsInternal(java.util.Optional<java.lang.Boolean> v);

        UdtSummaryBuilder setIsInternal(boolean v);

        java.util.Optional<java.lang.Boolean> getIsInternal();

        UdtSummaryBuilder setVersion(java.util.Optional<java.lang.Integer> v);

        UdtSummaryBuilder setVersion(int v);

        java.util.Optional<java.lang.Integer> getVersion();

        UdtSummary build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtSummaryBuilderImpl extends _UdtSummary__Base__ implements UdtSummaryBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtSummaryBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtSummaryBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(7);
            __missingFields.set(0, 7);
            setDoc(java.util.Optional.empty());
            setAttribCount(java.util.Optional.empty());
            setIsSynthetic(java.util.Optional.empty());
            setIsInternal(java.util.Optional.empty());
            setVersion(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.INSTANCE;
        }

        public UdtSummaryBuilder setDoc(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Doc", v);
            this._doc = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.FIELD_ID_DOC);
            return this;
        }

        public UdtSummaryBuilder setDoc(java.lang.String v) {
            this._doc = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.FIELD_ID_DOC);
            return this;
        }

        public UdtSummaryBuilder setFullyQualifiedName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("FullyQualifiedName", v);
            this._fullyQualifiedName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_FULLYQUALIFIEDNAME);
            return this;
        }

        public UdtSummaryBuilder setUdtType(schemarise.alfa.runtime.model.UdtMetaType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtType", v);
            this._udtType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.FIELD_ID_UDTTYPE);
            return this;
        }

        public UdtSummaryBuilder setAttribCount(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AttribCount", v);
            this._attribCount = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ATTRIBCOUNT);
            return this;
        }

        public UdtSummaryBuilder setAttribCount(int v) {
            this._attribCount = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ATTRIBCOUNT);
            return this;
        }

        public UdtSummaryBuilder setIsSynthetic(java.util.Optional<java.lang.Boolean> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsSynthetic", v);
            this._isSynthetic = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ISSYNTHETIC);
            return this;
        }

        public UdtSummaryBuilder setIsSynthetic(boolean v) {
            this._isSynthetic = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ISSYNTHETIC);
            return this;
        }

        public UdtSummaryBuilder setIsInternal(java.util.Optional<java.lang.Boolean> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("IsInternal", v);
            this._isInternal = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ISINTERNAL);
            return this;
        }

        public UdtSummaryBuilder setIsInternal(boolean v) {
            this._isInternal = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor
                            .FIELD_ID_ISINTERNAL);
            return this;
        }

        public UdtSummaryBuilder setVersion(java.util.Optional<java.lang.Integer> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Version", v);
            this._version = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.FIELD_ID_VERSION);
            return this;
        }

        public UdtSummaryBuilder setVersion(int v) {
            this._version = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.FIELD_ID_VERSION);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "Doc":
                    setDoc((java.util.Optional<java.lang.String>) val);
                    break;
                case "FullyQualifiedName":
                    setFullyQualifiedName((java.lang.String) val);
                    break;
                case "UdtType":
                    setUdtType((schemarise.alfa.runtime.model.UdtMetaType) val);
                    break;
                case "AttribCount":
                    setAttribCount((java.util.Optional<java.lang.Integer>) val);
                    break;
                case "IsSynthetic":
                    setIsSynthetic((java.util.Optional<java.lang.Boolean>) val);
                    break;
                case "IsInternal":
                    setIsInternal((java.util.Optional<java.lang.Boolean>) val);
                    break;
                case "Version":
                    setVersion((java.util.Optional<java.lang.Integer>) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtSummary build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    7,
                    schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.INSTANCE);

            UdtSummary obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtSummary)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _doc,
                                                _fullyQualifiedName,
                                                _udtType,
                                                _attribCount,
                                                _isSynthetic,
                                                _isInternal,
                                                _version);
            else
                obj =
                        new schemarise.alfa.runtime.model.UdtSummary._UdtSummaryConcrete(
                                _doc,
                                _fullyQualifiedName,
                                _udtType,
                                _attribCount,
                                _isSynthetic,
                                _isInternal,
                                _version);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtSummary",
                    new java.lang.String[] {
                        "Doc",
                        "FullyQualifiedName",
                        "UdtType",
                        "AttribCount",
                        "IsSynthetic",
                        "IsInternal",
                        "Version"
                    },
                    new java.lang.Object[] {
                        _doc,
                        _fullyQualifiedName,
                        _udtType,
                        _attribCount,
                        _isSynthetic,
                        _isInternal,
                        _version
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtSummaryConcrete extends _UdtSummary__Base__ implements UdtSummary {

        private _UdtSummaryConcrete() {
            super();
        }

        private _UdtSummaryConcrete(
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Integer> _attribCount,
                java.util.Optional<java.lang.Boolean> _isSynthetic,
                java.util.Optional<java.lang.Boolean> _isInternal,
                java.util.Optional<java.lang.Integer> _version) {
            super(
                    _doc,
                    _fullyQualifiedName,
                    _udtType,
                    _attribCount,
                    _isSynthetic,
                    _isInternal,
                    _version);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtSummary__Base__ {
        public java.util.Optional<java.lang.String> _doc;
        public java.lang.String _fullyQualifiedName;
        public schemarise.alfa.runtime.model.UdtMetaType _udtType;
        public java.util.Optional<java.lang.Integer> _attribCount;
        public java.util.Optional<java.lang.Boolean> _isSynthetic;
        public java.util.Optional<java.lang.Boolean> _isInternal;
        public java.util.Optional<java.lang.Integer> _version;

        public _UdtSummary__Base__() {}

        public _UdtSummary__Base__(
                java.util.Optional<java.lang.String> _doc,
                java.lang.String _fullyQualifiedName,
                schemarise.alfa.runtime.model.UdtMetaType _udtType,
                java.util.Optional<java.lang.Integer> _attribCount,
                java.util.Optional<java.lang.Boolean> _isSynthetic,
                java.util.Optional<java.lang.Boolean> _isInternal,
                java.util.Optional<java.lang.Integer> _version) {
            this._doc = _doc;
            this._fullyQualifiedName = _fullyQualifiedName;
            this._udtType = _udtType;
            this._attribCount = _attribCount;
            this._isSynthetic = _isSynthetic;
            this._isInternal = _isInternal;
            this._version = _version;
        }

        public java.util.Optional<java.lang.String> getDoc() {
            return _doc;
        }

        public java.lang.String getFullyQualifiedName() {
            return _fullyQualifiedName;
        }

        public schemarise.alfa.runtime.model.UdtMetaType getUdtType() {
            return _udtType;
        }

        public java.util.Optional<java.lang.Integer> getAttribCount() {
            return _attribCount;
        }

        public java.util.Optional<java.lang.Boolean> getIsSynthetic() {
            return _isSynthetic;
        }

        public java.util.Optional<java.lang.Boolean> getIsInternal() {
            return _isInternal;
        }

        public java.util.Optional<java.lang.Integer> getVersion() {
            return _version;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _doc,
                    _fullyQualifiedName,
                    _udtType,
                    _attribCount,
                    _isSynthetic,
                    _isInternal,
                    _version);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.UdtSummary",
                    new java.lang.String[] {
                        "Doc",
                        "FullyQualifiedName",
                        "UdtType",
                        "AttribCount",
                        "IsSynthetic",
                        "IsInternal",
                        "Version"
                    },
                    new java.lang.Object[] {
                        _doc,
                        _fullyQualifiedName,
                        _udtType,
                        _attribCount,
                        _isSynthetic,
                        _isInternal,
                        _version
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof schemarise.alfa.runtime.model.UdtSummary._UdtSummaryConcrete))
                return false;
            schemarise.alfa.runtime.model.UdtSummary._UdtSummaryConcrete rhs =
                    (schemarise.alfa.runtime.model.UdtSummary._UdtSummaryConcrete) o;
            return java.util.Objects.equals(_doc, rhs._doc)
                    && java.util.Objects.equals(_fullyQualifiedName, rhs._fullyQualifiedName)
                    && java.util.Objects.equals(_udtType, rhs._udtType)
                    && java.util.Objects.equals(_attribCount, rhs._attribCount)
                    && java.util.Objects.equals(_isSynthetic, rhs._isSynthetic)
                    && java.util.Objects.equals(_isInternal, rhs._isInternal)
                    && java.util.Objects.equals(_version, rhs._version);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "Doc":
                    return _doc;
                case "FullyQualifiedName":
                    return _fullyQualifiedName;
                case "UdtType":
                    return _udtType;
                case "AttribCount":
                    return _attribCount;
                case "IsSynthetic":
                    return _isSynthetic;
                case "IsInternal":
                    return _isInternal;
                case "Version":
                    return _version;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {

            getUdtType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtSummaryDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME = "schemarise.alfa.runtime.model.UdtSummary";
        public static schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor INSTANCE =
                new schemarise.alfa.runtime.model.UdtSummary.UdtSummaryDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_DOC = 0;
        public static final String FIELD_DOC = "Doc";

        public static final short FIELD_ID_FULLYQUALIFIEDNAME = 1;
        public static final String FIELD_FULLYQUALIFIEDNAME = "FullyQualifiedName";

        public static final short FIELD_ID_UDTTYPE = 2;
        public static final String FIELD_UDTTYPE = "UdtType";

        public static final short FIELD_ID_ATTRIBCOUNT = 3;
        public static final String FIELD_ATTRIBCOUNT = "AttribCount";

        public static final short FIELD_ID_ISSYNTHETIC = 4;
        public static final String FIELD_ISSYNTHETIC = "IsSynthetic";

        public static final short FIELD_ID_ISINTERNAL = 5;
        public static final String FIELD_ISINTERNAL = "IsInternal";

        public static final short FIELD_ID_VERSION = 6;
        public static final String FIELD_VERSION = "Version";

        private schemarise.alfa.runtime.model.OptionalDataType _docType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _fullyQualifiedNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _udtTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.UdtMetaType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _attribCountType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _isSyntheticType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.booleanType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _isInternalType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.booleanType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _versionType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.intType)
                                        .build())
                        .build();

        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.String>>
                _docConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                                    _docConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    _docConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _docConsumer =
                        (builder, supplier) -> {
                            builder.setDoc(_docConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _fullyQualifiedNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _fullyQualifiedNameConsumer =
                        (builder, supplier) -> {
                            builder.setFullyQualifiedName(
                                    _fullyQualifiedNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.UdtMetaType>
                _udtTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtTypeConsumer =
                        (builder, supplier) -> {
                            builder.setUdtType(_udtTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _attribCountConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _attribCountConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _attribCountType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _attribCountType),
                                    _attribCountConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _attribCountConsumer =
                        (builder, supplier) -> {
                            builder.setAttribCount(_attribCountConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Boolean>>
                _isSyntheticConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                                    _isSyntheticConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.booleanValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isSyntheticType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isSyntheticType),
                                    _isSyntheticConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isSyntheticConsumer =
                        (builder, supplier) -> {
                            builder.setIsSynthetic(_isSyntheticConsumerInner1.apply(supplier));
                        };
        /* -- Consumer boolean ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Boolean>>
                _isInternalConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Boolean>
                                    _isInternalConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.booleanValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isInternalType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isInternalType),
                                    _isInternalConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _isInternalConsumer =
                        (builder, supplier) -> {
                            builder.setIsInternal(_isInternalConsumerInner1.apply(supplier));
                        };
        /* -- Consumer int ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier, java.util.Optional<java.lang.Integer>>
                _versionConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier, java.lang.Integer>
                                    _versionConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.intValue(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    _versionConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _versionConsumer =
                        (builder, supplier) -> {
                            builder.setVersion(_versionConsumerInner1.apply(supplier));
                        };

        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _docSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _docType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _docType),
                                    pInner1,
                                    _docSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _docSupplier =
                        (p, consumer) -> {
                            _docSupplierInner1.accept(p.getDoc(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _fullyQualifiedNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _fullyQualifiedNameSupplier =
                        (p, consumer) -> {
                            _fullyQualifiedNameSupplierInner1.accept(
                                    p.getFullyQualifiedName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.UdtMetaType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtMetaType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType), pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplier =
                        (p, consumer) -> {
                            _udtTypeSupplierInner1.accept(p.getUdtType(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _attribCountSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _attribCountSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _attribCountType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _attribCountType),
                                    pInner1,
                                    _attribCountSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _attribCountSupplier =
                        (p, consumer) -> {
                            _attribCountSupplierInner1.accept(p.getAttribCount(), consumer);
                        };
        /* -- Supplier boolean ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Boolean>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Boolean,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _isSyntheticSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isSyntheticType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isSyntheticType),
                                    pInner1,
                                    _isSyntheticSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isSyntheticSupplier =
                        (p, consumer) -> {
                            _isSyntheticSupplierInner1.accept(p.getIsSynthetic(), consumer);
                        };
        /* -- Supplier boolean ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Boolean>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isInternalSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Boolean,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _isInternalSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _isInternalType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _isInternalType),
                                    pInner1,
                                    _isInternalSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _isInternalSupplier =
                        (p, consumer) -> {
                            _isInternalSupplierInner1.accept(p.getIsInternal(), consumer);
                        };
        /* -- Supplier int ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.Integer>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.Integer,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _versionSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _versionType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _versionType),
                                    pInner1,
                                    _versionSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.UdtSummary,
                        com.schemarise.alfa.runtime.DataConsumer>
                _versionSupplier =
                        (p, consumer) -> {
                            _versionSupplierInner1.accept(p.getVersion(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtSummary, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta docMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_docSupplier),
                        java.util.Optional.of(_docConsumer),
                        java.util.Optional.of(_docSupplierInner1),
                        java.util.Optional.of(_docConsumerInner1),
                        _docType,
                        FIELD_DOC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta fullyQualifiedNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_fullyQualifiedNameSupplier),
                        java.util.Optional.of(_fullyQualifiedNameConsumer),
                        java.util.Optional.of(_fullyQualifiedNameSupplierInner1),
                        java.util.Optional.of(_fullyQualifiedNameConsumerInner1),
                        _fullyQualifiedNameType,
                        FIELD_FULLYQUALIFIEDNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtTypeSupplier),
                        java.util.Optional.of(_udtTypeConsumer),
                        java.util.Optional.of(_udtTypeSupplierInner1),
                        java.util.Optional.of(_udtTypeConsumerInner1),
                        _udtTypeType,
                        FIELD_UDTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta attribCountMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_attribCountSupplier),
                        java.util.Optional.of(_attribCountConsumer),
                        java.util.Optional.of(_attribCountSupplierInner1),
                        java.util.Optional.of(_attribCountConsumerInner1),
                        _attribCountType,
                        FIELD_ATTRIBCOUNT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isSyntheticMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isSyntheticSupplier),
                        java.util.Optional.of(_isSyntheticConsumer),
                        java.util.Optional.of(_isSyntheticSupplierInner1),
                        java.util.Optional.of(_isSyntheticConsumerInner1),
                        _isSyntheticType,
                        FIELD_ISSYNTHETIC,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta isInternalMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_isInternalSupplier),
                        java.util.Optional.of(_isInternalConsumer),
                        java.util.Optional.of(_isInternalSupplierInner1),
                        java.util.Optional.of(_isInternalConsumerInner1),
                        _isInternalType,
                        FIELD_ISINTERNAL,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta versionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_versionSupplier),
                        java.util.Optional.of(_versionConsumer),
                        java.util.Optional.of(_versionSupplierInner1),
                        java.util.Optional.of(_versionConsumerInner1),
                        _versionType,
                        FIELD_VERSION,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtSummaryBuilder builder() {
            return new schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl();
        }

        @Override
        public UdtSummaryBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.UdtSummary._UdtSummaryBuilderImpl(cc);
        }

        public UdtSummaryDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtSummary>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_DOC, docMeta);
                                        put(FIELD_FULLYQUALIFIEDNAME, fullyQualifiedNameMeta);
                                        put(FIELD_UDTTYPE, udtTypeMeta);
                                        put(FIELD_ATTRIBCOUNT, attribCountMeta);
                                        put(FIELD_ISSYNTHETIC, isSyntheticMeta);
                                        put(FIELD_ISINTERNAL, isInternalMeta);
                                        put(FIELD_VERSION, versionMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtSummary>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_DOC:
                    return FIELD_DOC;
                case FIELD_ID_FULLYQUALIFIEDNAME:
                    return FIELD_FULLYQUALIFIEDNAME;
                case FIELD_ID_UDTTYPE:
                    return FIELD_UDTTYPE;
                case FIELD_ID_ATTRIBCOUNT:
                    return FIELD_ATTRIBCOUNT;
                case FIELD_ID_ISSYNTHETIC:
                    return FIELD_ISSYNTHETIC;
                case FIELD_ID_ISINTERNAL:
                    return FIELD_ISINTERNAL;
                case FIELD_ID_VERSION:
                    return FIELD_VERSION;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException("Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.UdtSummary{AttribCount:optional<int;>;Doc:optional<string;>;FullyQualifiedName:string;IsInternal:optional<boolean;>;IsSynthetic:optional<boolean;>;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];Version:optional<int;>;}
            schemarise.alfa.runtime.model.UdtSummary{FullyQualifiedName:string;UdtType:schemarise.alfa.runtime.model.UdtMetaType[85998f5f];}
            */
            return "558f92b3:6b2dd34c";
        }
    }
    // </editor-fold>

}
