// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.diff;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.JavaExporter")
public enum ChangeCategoryType implements com.schemarise.alfa.runtime.Enum {
    /**
     * 1. service definition method added/deleted/changed2. deletion of service of library
     * definitions, including versions3. Change of a datatype used by a service
     */
    BreakingApiChange("BreakingApiChange", java.util.Optional.empty()),
    /**
     * 1. library function signature changes can impact code that directly uses them.. less likely,
     * but possible
     */
    PotentialApiChange("PotentialApiChange", java.util.Optional.empty()),
    /** non-breaking change. e.g. new library method, new library/service,new service version */
    ApiUpsert("ApiUpsert", java.util.Optional.empty()),
    /**
     * changes to fields layout in any trait, record, union, enum, entity or keyalso removal of
     * typese.g. new mandatory field, field type change, remove fields, enum def changes.
     */
    BreakingDataStructureChange("BreakingDataStructureChange", java.util.Optional.empty()),
    /** change to a referenced definition that impacts the given definition */
    IndirectBreakingDataStructureChange(
            "IndirectBreakingDataStructureChange", java.util.Optional.empty()),
    /** non-breaking change e.g. adding a new type, new optional field */
    DataStructureUpsert("DataStructureUpsert", java.util.Optional.empty()),
    /** annotations changes to UDT, field or method. E.g. add PII annotation to a field/type */
    ModelMetadataChange("ModelMetadataChange", java.util.Optional.empty()),
    /**
     * change logic in assert, transform or library - as the change can introduce/fix bugsadd/remove
     * methods
     */
    ImplementationLogicChange("ImplementationLogicChange", java.util.Optional.empty()),
    /** testcase additions/changes, adding asserts */
    QualityChanges("QualityChanges", java.util.Optional.empty()),
    /** documentation changes */
    DocumentationChanges("DocumentationChanges", java.util.Optional.empty()),
    DataProductChange("DataProductChange", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, ChangeCategoryType> mappings;

    ChangeCategoryType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static ChangeCategoryType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, ChangeCategoryType> m = new java.util.HashMap<>();
            for (ChangeCategoryType c : ChangeCategoryType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.diff.ChangeCategoryType.ChangeCategoryTypeDescriptor
                .INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ChangeCategoryTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.diff.ChangeCategoryType";
        public static schemarise.alfa.runtime.model.diff.ChangeCategoryType
                        .ChangeCategoryTypeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.diff.ChangeCategoryType
                                .ChangeCategoryTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_BREAKINGAPICHANGE = 0;
        public static final String FIELD_BREAKINGAPICHANGE = "BreakingApiChange";

        public static final short FIELD_ID_POTENTIALAPICHANGE = 1;
        public static final String FIELD_POTENTIALAPICHANGE = "PotentialApiChange";

        public static final short FIELD_ID_APIUPSERT = 2;
        public static final String FIELD_APIUPSERT = "ApiUpsert";

        public static final short FIELD_ID_BREAKINGDATASTRUCTURECHANGE = 3;
        public static final String FIELD_BREAKINGDATASTRUCTURECHANGE =
                "BreakingDataStructureChange";

        public static final short FIELD_ID_INDIRECTBREAKINGDATASTRUCTURECHANGE = 4;
        public static final String FIELD_INDIRECTBREAKINGDATASTRUCTURECHANGE =
                "IndirectBreakingDataStructureChange";

        public static final short FIELD_ID_DATASTRUCTUREUPSERT = 5;
        public static final String FIELD_DATASTRUCTUREUPSERT = "DataStructureUpsert";

        public static final short FIELD_ID_MODELMETADATACHANGE = 6;
        public static final String FIELD_MODELMETADATACHANGE = "ModelMetadataChange";

        public static final short FIELD_ID_IMPLEMENTATIONLOGICCHANGE = 7;
        public static final String FIELD_IMPLEMENTATIONLOGICCHANGE = "ImplementationLogicChange";

        public static final short FIELD_ID_QUALITYCHANGES = 8;
        public static final String FIELD_QUALITYCHANGES = "QualityChanges";

        public static final short FIELD_ID_DOCUMENTATIONCHANGES = 9;
        public static final String FIELD_DOCUMENTATIONCHANGES = "DocumentationChanges";

        public static final short FIELD_ID_DATAPRODUCTCHANGE = 10;
        public static final String FIELD_DATAPRODUCTCHANGE = "DataProductChange";

        private schemarise.alfa.runtime.model.ScalarDataType _breakingApiChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _potentialApiChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _apiUpsertType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _breakingDataStructureChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType
                _indirectBreakingDataStructureChangeType =
                        schemarise.alfa.runtime.model.ScalarDataType.builder()
                                .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                                .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dataStructureUpsertType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _modelMetadataChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _implementationLogicChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _qualityChangesType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _documentationChangesType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dataProductChangeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<
                                ChangeCategoryType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta breakingApiChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _breakingApiChangeType,
                        FIELD_BREAKINGAPICHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta potentialApiChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _potentialApiChangeType,
                        FIELD_POTENTIALAPICHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta apiUpsertMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _apiUpsertType,
                        FIELD_APIUPSERT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta breakingDataStructureChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _breakingDataStructureChangeType,
                        FIELD_BREAKINGDATASTRUCTURECHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta indirectBreakingDataStructureChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _indirectBreakingDataStructureChangeType,
                        FIELD_INDIRECTBREAKINGDATASTRUCTURECHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataStructureUpsertMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _dataStructureUpsertType,
                        FIELD_DATASTRUCTUREUPSERT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta modelMetadataChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _modelMetadataChangeType,
                        FIELD_MODELMETADATACHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta implementationLogicChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _implementationLogicChangeType,
                        FIELD_IMPLEMENTATIONLOGICCHANGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta qualityChangesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _qualityChangesType,
                        FIELD_QUALITYCHANGES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta documentationChangesMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _documentationChangesType,
                        FIELD_DOCUMENTATIONCHANGES,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataProductChangeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _dataProductChangeType,
                        FIELD_DATAPRODUCTCHANGE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public ChangeCategoryTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ChangeCategoryType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_BREAKINGAPICHANGE, breakingApiChangeMeta);
                                        put(FIELD_POTENTIALAPICHANGE, potentialApiChangeMeta);
                                        put(FIELD_APIUPSERT, apiUpsertMeta);
                                        put(
                                                FIELD_BREAKINGDATASTRUCTURECHANGE,
                                                breakingDataStructureChangeMeta);
                                        put(
                                                FIELD_INDIRECTBREAKINGDATASTRUCTURECHANGE,
                                                indirectBreakingDataStructureChangeMeta);
                                        put(FIELD_DATASTRUCTUREUPSERT, dataStructureUpsertMeta);
                                        put(FIELD_MODELMETADATACHANGE, modelMetadataChangeMeta);
                                        put(
                                                FIELD_IMPLEMENTATIONLOGICCHANGE,
                                                implementationLogicChangeMeta);
                                        put(FIELD_QUALITYCHANGES, qualityChangesMeta);
                                        put(FIELD_DOCUMENTATIONCHANGES, documentationChangesMeta);
                                        put(FIELD_DATAPRODUCTCHANGE, dataProductChangeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ChangeCategoryType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_BREAKINGAPICHANGE:
                    return FIELD_BREAKINGAPICHANGE;
                case FIELD_ID_POTENTIALAPICHANGE:
                    return FIELD_POTENTIALAPICHANGE;
                case FIELD_ID_APIUPSERT:
                    return FIELD_APIUPSERT;
                case FIELD_ID_BREAKINGDATASTRUCTURECHANGE:
                    return FIELD_BREAKINGDATASTRUCTURECHANGE;
                case FIELD_ID_INDIRECTBREAKINGDATASTRUCTURECHANGE:
                    return FIELD_INDIRECTBREAKINGDATASTRUCTURECHANGE;
                case FIELD_ID_DATASTRUCTUREUPSERT:
                    return FIELD_DATASTRUCTUREUPSERT;
                case FIELD_ID_MODELMETADATACHANGE:
                    return FIELD_MODELMETADATACHANGE;
                case FIELD_ID_IMPLEMENTATIONLOGICCHANGE:
                    return FIELD_IMPLEMENTATIONLOGICCHANGE;
                case FIELD_ID_QUALITYCHANGES:
                    return FIELD_QUALITYCHANGES;
                case FIELD_ID_DOCUMENTATIONCHANGES:
                    return FIELD_DOCUMENTATIONCHANGES;
                case FIELD_ID_DATAPRODUCTCHANGE:
                    return FIELD_DATAPRODUCTCHANGE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.diff.ChangeCategoryType{/# 1. service definition method added/deleted/changed2. deletion of service of library definitions, including versions3. Change of a datatype used by a service #/BreakingApiChange,/# 1. library function signature changes can impact code that   directly uses them.. less likely, but possible #/PotentialApiChange,/# non-breaking change. e.g. new library method, new library/service,new service version #/ApiUpsert,/# changes to fields layout in any trait, record, union, enum, entity or keyalso removal of typese.g. new mandatory field, field type change, remove fields, enum def changes. #/BreakingDataStructureChange,/# change to a referenced definition that impacts the given definition #/IndirectBreakingDataStructureChange,/# non-breaking change e.g. adding a new type, new optional field #/DataStructureUpsert,/# annotations changes to UDT, field or method. E.g. add PII annotation to a field/type #/ModelMetadataChange,/# change logic in assert, transform or library - as the change can introduce/fix bugsadd/remove methods #/ImplementationLogicChange,/# testcase additions/changes, adding asserts #/QualityChanges,/# documentation changes #/DocumentationChanges,DataProductChange}
            schemarise.alfa.runtime.model.diff.ChangeCategoryType{/# 1. service definition method added/deleted/changed2. deletion of service of library definitions, including versions3. Change of a datatype used by a service #/BreakingApiChange,/# 1. library function signature changes can impact code that   directly uses them.. less likely, but possible #/PotentialApiChange,/# non-breaking change. e.g. new library method, new library/service,new service version #/ApiUpsert,/# changes to fields layout in any trait, record, union, enum, entity or keyalso removal of typese.g. new mandatory field, field type change, remove fields, enum def changes. #/BreakingDataStructureChange,/# change to a referenced definition that impacts the given definition #/IndirectBreakingDataStructureChange,/# non-breaking change e.g. adding a new type, new optional field #/DataStructureUpsert,/# annotations changes to UDT, field or method. E.g. add PII annotation to a field/type #/ModelMetadataChange,/# change logic in assert, transform or library - as the change can introduce/fix bugsadd/remove methods #/ImplementationLogicChange,/# testcase additions/changes, adding asserts #/QualityChanges,/# documentation changes #/DocumentationChanges,DataProductChange}
            */
            return "de6e8578:";
        }
    }
    // </editor-fold>
}
