// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise ALFA toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.diff;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.JavaExporter")
public interface UdtEntryModification
        extends com.schemarise.alfa.runtime.Record,
                schemarise.alfa.runtime.model.diff.IUdtModification {

    schemarise.alfa.runtime.model.diff.EditType getEditType();

    schemarise.alfa.runtime.model.diff.ChangeCategoryType getChangeCategory();

    java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getBeforeSnippet();

    java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getAfterSnippet();

    java.util.Optional<java.lang.String> getMessage();

    schemarise.alfa.runtime.model.diff.UdtReference getTargetUdt();

    java.lang.String getEntryName();

    schemarise.alfa.runtime.model.diff.UdtEntryType getEntryType();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtEntryModificationBuilder builder() {
        return new schemarise.alfa.runtime.model.diff.UdtEntryModification
                ._UdtEntryModificationBuilderImpl();
    }

    public static UdtEntryModificationBuilder builder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.diff.UdtEntryModification
                                    .UdtEntryModificationDescriptor.INSTANCE);
        else
            return new schemarise.alfa.runtime.model.diff.UdtEntryModification
                    ._UdtEntryModificationBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtEntryModificationBuilder
            extends com.schemarise.alfa.runtime.Builder,
                    com.schemarise.alfa.runtime.AlfaObject,
                    schemarise.alfa.runtime.model.diff.IUdtModification.IUdtModificationBuilder {
        UdtEntryModificationBuilder setEditType(schemarise.alfa.runtime.model.diff.EditType v);

        schemarise.alfa.runtime.model.diff.EditType getEditType();

        UdtEntryModificationBuilder setChangeCategory(
                schemarise.alfa.runtime.model.diff.ChangeCategoryType v);

        schemarise.alfa.runtime.model.diff.ChangeCategoryType getChangeCategory();

        UdtEntryModificationBuilder setBeforeSnippet(
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> v);

        UdtEntryModificationBuilder setBeforeSnippet(schemarise.alfa.runtime.model.diff.Snippet v);

        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getBeforeSnippet();

        UdtEntryModificationBuilder setAfterSnippet(
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> v);

        UdtEntryModificationBuilder setAfterSnippet(schemarise.alfa.runtime.model.diff.Snippet v);

        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getAfterSnippet();

        UdtEntryModificationBuilder setMessage(java.util.Optional<java.lang.String> v);

        UdtEntryModificationBuilder setMessage(java.lang.String v);

        java.util.Optional<java.lang.String> getMessage();

        UdtEntryModificationBuilder setTargetUdt(schemarise.alfa.runtime.model.diff.UdtReference v);

        schemarise.alfa.runtime.model.diff.UdtReference getTargetUdt();

        UdtEntryModificationBuilder setEntryName(java.lang.String v);

        java.lang.String getEntryName();

        UdtEntryModificationBuilder setEntryType(schemarise.alfa.runtime.model.diff.UdtEntryType v);

        schemarise.alfa.runtime.model.diff.UdtEntryType getEntryType();

        UdtEntryModification build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtEntryModificationBuilderImpl extends _UdtEntryModification__Base__
            implements UdtEntryModificationBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtEntryModificationBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtEntryModificationBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(8);
            __missingFields.set(0, 8);
            setBeforeSnippet(java.util.Optional.empty());
            setAfterSnippet(java.util.Optional.empty());
            setMessage(java.util.Optional.empty());
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.diff.UdtEntryModification
                    .UdtEntryModificationDescriptor.INSTANCE;
        }

        public UdtEntryModificationBuilder setEditType(
                schemarise.alfa.runtime.model.diff.EditType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EditType", v);
            this._editType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_EDITTYPE);
            return this;
        }

        public UdtEntryModificationBuilder setChangeCategory(
                schemarise.alfa.runtime.model.diff.ChangeCategoryType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("ChangeCategory", v);
            this._changeCategory = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_CHANGECATEGORY);
            return this;
        }

        public UdtEntryModificationBuilder setBeforeSnippet(
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("BeforeSnippet", v);
            this._beforeSnippet = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_BEFORESNIPPET);
            return this;
        }

        public UdtEntryModificationBuilder setBeforeSnippet(
                schemarise.alfa.runtime.model.diff.Snippet v) {
            this._beforeSnippet = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_BEFORESNIPPET);
            return this;
        }

        public UdtEntryModificationBuilder setAfterSnippet(
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("AfterSnippet", v);
            this._afterSnippet = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_AFTERSNIPPET);
            return this;
        }

        public UdtEntryModificationBuilder setAfterSnippet(
                schemarise.alfa.runtime.model.diff.Snippet v) {
            this._afterSnippet = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_AFTERSNIPPET);
            return this;
        }

        public UdtEntryModificationBuilder setMessage(java.util.Optional<java.lang.String> v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("Message", v);
            this._message = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_MESSAGE);
            return this;
        }

        public UdtEntryModificationBuilder setMessage(java.lang.String v) {
            this._message = java.util.Optional.ofNullable(v);
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_MESSAGE);
            return this;
        }

        public UdtEntryModificationBuilder setTargetUdt(
                schemarise.alfa.runtime.model.diff.UdtReference v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("TargetUdt", v);
            this._targetUdt = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_TARGETUDT);
            return this;
        }

        public UdtEntryModificationBuilder setEntryName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EntryName", v);
            this._entryName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_ENTRYNAME);
            return this;
        }

        public UdtEntryModificationBuilder setEntryType(
                schemarise.alfa.runtime.model.diff.UdtEntryType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("EntryType", v);
            this._entryType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.FIELD_ID_ENTRYTYPE);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "EditType":
                    setEditType((schemarise.alfa.runtime.model.diff.EditType) val);
                    break;
                case "ChangeCategory":
                    setChangeCategory((schemarise.alfa.runtime.model.diff.ChangeCategoryType) val);
                    break;
                case "BeforeSnippet":
                    setBeforeSnippet(
                            (java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>) val);
                    break;
                case "AfterSnippet":
                    setAfterSnippet(
                            (java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>) val);
                    break;
                case "Message":
                    setMessage((java.util.Optional<java.lang.String>) val);
                    break;
                case "TargetUdt":
                    setTargetUdt((schemarise.alfa.runtime.model.diff.UdtReference) val);
                    break;
                case "EntryName":
                    setEntryName((java.lang.String) val);
                    break;
                case "EntryType":
                    setEntryType((schemarise.alfa.runtime.model.diff.UdtEntryType) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtEntryModification build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    8,
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            .UdtEntryModificationDescriptor.INSTANCE);

            UdtEntryModification obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtEntryModification)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(
                                                builderConfig(),
                                                descriptor(),
                                                _editType,
                                                _changeCategory,
                                                _beforeSnippet,
                                                _afterSnippet,
                                                _message,
                                                _targetUdt,
                                                _entryName,
                                                _entryType);
            else
                obj =
                        new schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationConcrete(
                                _editType,
                                _changeCategory,
                                _beforeSnippet,
                                _afterSnippet,
                                _message,
                                _targetUdt,
                                _entryName,
                                _entryType);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.diff.UdtEntryModification",
                    new java.lang.String[] {
                        "EditType",
                        "ChangeCategory",
                        "BeforeSnippet",
                        "AfterSnippet",
                        "Message",
                        "TargetUdt",
                        "EntryName",
                        "EntryType"
                    },
                    new java.lang.Object[] {
                        _editType,
                        _changeCategory,
                        _beforeSnippet,
                        _afterSnippet,
                        _message,
                        _targetUdt,
                        _entryName,
                        _entryType
                    });
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtEntryModificationConcrete extends _UdtEntryModification__Base__
            implements UdtEntryModification {

        private _UdtEntryModificationConcrete() {
            super();
        }

        private _UdtEntryModificationConcrete(
                schemarise.alfa.runtime.model.diff.EditType _editType,
                schemarise.alfa.runtime.model.diff.ChangeCategoryType _changeCategory,
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _beforeSnippet,
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _afterSnippet,
                java.util.Optional<java.lang.String> _message,
                schemarise.alfa.runtime.model.diff.UdtReference _targetUdt,
                java.lang.String _entryName,
                schemarise.alfa.runtime.model.diff.UdtEntryType _entryType) {
            super(
                    _editType,
                    _changeCategory,
                    _beforeSnippet,
                    _afterSnippet,
                    _message,
                    _targetUdt,
                    _entryName,
                    _entryType);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtEntryModification__Base__ {
        public schemarise.alfa.runtime.model.diff.EditType _editType;
        public schemarise.alfa.runtime.model.diff.ChangeCategoryType _changeCategory;
        public java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _beforeSnippet;
        public java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _afterSnippet;
        public java.util.Optional<java.lang.String> _message;
        public schemarise.alfa.runtime.model.diff.UdtReference _targetUdt;
        public java.lang.String _entryName;
        public schemarise.alfa.runtime.model.diff.UdtEntryType _entryType;

        public _UdtEntryModification__Base__() {}

        public _UdtEntryModification__Base__(
                schemarise.alfa.runtime.model.diff.EditType _editType,
                schemarise.alfa.runtime.model.diff.ChangeCategoryType _changeCategory,
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _beforeSnippet,
                java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> _afterSnippet,
                java.util.Optional<java.lang.String> _message,
                schemarise.alfa.runtime.model.diff.UdtReference _targetUdt,
                java.lang.String _entryName,
                schemarise.alfa.runtime.model.diff.UdtEntryType _entryType) {
            this._editType = _editType;
            this._changeCategory = _changeCategory;
            this._beforeSnippet = _beforeSnippet;
            this._afterSnippet = _afterSnippet;
            this._message = _message;
            this._targetUdt = _targetUdt;
            this._entryName = _entryName;
            this._entryType = _entryType;
        }

        public schemarise.alfa.runtime.model.diff.EditType getEditType() {
            return _editType;
        }

        public schemarise.alfa.runtime.model.diff.ChangeCategoryType getChangeCategory() {
            return _changeCategory;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getBeforeSnippet() {
            return _beforeSnippet;
        }

        public java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet> getAfterSnippet() {
            return _afterSnippet;
        }

        public java.util.Optional<java.lang.String> getMessage() {
            return _message;
        }

        public schemarise.alfa.runtime.model.diff.UdtReference getTargetUdt() {
            return _targetUdt;
        }

        public java.lang.String getEntryName() {
            return _entryName;
        }

        public schemarise.alfa.runtime.model.diff.UdtEntryType getEntryType() {
            return _entryType;
        }

        public int hashCode() {
            return java.util.Objects.hash(
                    _editType,
                    _changeCategory,
                    _beforeSnippet,
                    _afterSnippet,
                    _message,
                    _targetUdt,
                    _entryName,
                    _entryType);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.diff.UdtEntryModification",
                    new java.lang.String[] {
                        "EditType",
                        "ChangeCategory",
                        "BeforeSnippet",
                        "AfterSnippet",
                        "Message",
                        "TargetUdt",
                        "EntryName",
                        "EntryType"
                    },
                    new java.lang.Object[] {
                        _editType,
                        _changeCategory,
                        _beforeSnippet,
                        _afterSnippet,
                        _message,
                        _targetUdt,
                        _entryName,
                        _entryType
                    });
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.diff.UdtEntryModification
                            ._UdtEntryModificationConcrete)) return false;
            schemarise.alfa.runtime.model.diff.UdtEntryModification._UdtEntryModificationConcrete
                    rhs =
                            (schemarise.alfa.runtime.model.diff.UdtEntryModification
                                            ._UdtEntryModificationConcrete)
                                    o;
            return java.util.Objects.equals(_editType, rhs._editType)
                    && java.util.Objects.equals(_changeCategory, rhs._changeCategory)
                    && java.util.Objects.equals(_beforeSnippet, rhs._beforeSnippet)
                    && java.util.Objects.equals(_afterSnippet, rhs._afterSnippet)
                    && java.util.Objects.equals(_message, rhs._message)
                    && java.util.Objects.equals(_targetUdt, rhs._targetUdt)
                    && java.util.Objects.equals(_entryName, rhs._entryName)
                    && java.util.Objects.equals(_entryType, rhs._entryType);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.diff.UdtEntryModification
                    .UdtEntryModificationDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "EditType":
                    return _editType;
                case "ChangeCategory":
                    return _changeCategory;
                case "BeforeSnippet":
                    return _beforeSnippet;
                case "AfterSnippet":
                    return _afterSnippet;
                case "Message":
                    return _message;
                case "TargetUdt":
                    return _targetUdt;
                case "EntryName":
                    return _entryName;
                case "EntryType":
                    return _entryType;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getEditType().validate(__builderConfig);
            getChangeCategory().validate(__builderConfig);
            if (getBeforeSnippet().isPresent()) {
                getBeforeSnippet().get().validate(__builderConfig);
            }
            if (getAfterSnippet().isPresent()) {
                getAfterSnippet().get().validate(__builderConfig);
            }

            getTargetUdt().validate(__builderConfig);

            getEntryType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtEntryModificationDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.diff.UdtEntryModification";
        public static schemarise.alfa.runtime.model.diff.UdtEntryModification
                        .UdtEntryModificationDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.diff.UdtEntryModification
                                .UdtEntryModificationDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_EDITTYPE = 0;
        public static final String FIELD_EDITTYPE = "EditType";

        public static final short FIELD_ID_CHANGECATEGORY = 1;
        public static final String FIELD_CHANGECATEGORY = "ChangeCategory";

        public static final short FIELD_ID_BEFORESNIPPET = 2;
        public static final String FIELD_BEFORESNIPPET = "BeforeSnippet";

        public static final short FIELD_ID_AFTERSNIPPET = 3;
        public static final String FIELD_AFTERSNIPPET = "AfterSnippet";

        public static final short FIELD_ID_MESSAGE = 4;
        public static final String FIELD_MESSAGE = "Message";

        public static final short FIELD_ID_TARGETUDT = 5;
        public static final String FIELD_TARGETUDT = "TargetUdt";

        public static final short FIELD_ID_ENTRYNAME = 6;
        public static final String FIELD_ENTRYNAME = "EntryName";

        public static final short FIELD_ID_ENTRYTYPE = 7;
        public static final String FIELD_ENTRYTYPE = "EntryType";

        private schemarise.alfa.runtime.model.UdtDataType _editTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.diff.EditType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _changeCategoryType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName(
                                "schemarise.alfa.runtime.model.diff.ChangeCategoryType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _beforeSnippetType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.diff.Snippet")
                                        .setUdtType(
                                                schemarise.alfa.runtime.model.UdtMetaType
                                                        .recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _afterSnippetType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.UdtDataType.builder()
                                        .setFullyQualifiedName(
                                                "schemarise.alfa.runtime.model.diff.Snippet")
                                        .setUdtType(
                                                schemarise.alfa.runtime.model.UdtMetaType
                                                        .recordType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.OptionalDataType _messageType =
                schemarise.alfa.runtime.model.OptionalDataType.builder()
                        .setComponentType(
                                schemarise.alfa.runtime.model.ScalarDataType.builder()
                                        .setScalarType(
                                                schemarise.alfa.runtime.model.ScalarType.stringType)
                                        .build())
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _targetUdtType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.diff.UdtReference")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _entryNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        private schemarise.alfa.runtime.model.UdtDataType _entryTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.diff.UdtEntryType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.diff.EditType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.diff.EditType>
                _editTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _editTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _editTypeConsumer =
                        (builder, supplier) -> {
                            builder.setEditType(_editTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.diff.ChangeCategoryType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.diff.ChangeCategoryType>
                _changeCategoryConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType)
                                            _changeCategoryType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _changeCategoryConsumer =
                        (builder, supplier) -> {
                            builder.setChangeCategory(
                                    _changeCategoryConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.diff.Snippet ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>>
                _beforeSnippetConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.diff.Snippet>
                                    _beforeSnippetConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _beforeSnippetType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _beforeSnippetType),
                                    _beforeSnippetConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _beforeSnippetConsumer =
                        (builder, supplier) -> {
                            builder.setBeforeSnippet(_beforeSnippetConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.diff.Snippet ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>>
                _afterSnippetConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            schemarise.alfa.runtime.model.diff.Snippet>
                                    _afterSnippetConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.objectValue(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _afterSnippetType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _afterSnippetType),
                                    _afterSnippetConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _afterSnippetConsumer =
                        (builder, supplier) -> {
                            builder.setAfterSnippet(_afterSnippetConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string ? -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        java.util.Optional<java.lang.String>>
                _messageConsumerInner1 =
                        (supplierInner1) -> {
                            java.util.function.Function<
                                            com.schemarise.alfa.runtime.DataSupplier,
                                            java.lang.String>
                                    _messageConsumerInner2 =
                                            (supplierInner2) -> {
                                                return supplierInner2.stringValue(
                                                        ((schemarise.alfa.runtime.model
                                                                        .ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _messageType)
                                                                        .getComponentType()));
                                            };
                            return supplierInner1.optionalValue(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _messageType),
                                    _messageConsumerInner2);
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _messageConsumer =
                        (builder, supplier) -> {
                            builder.setMessage(_messageConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.diff.UdtReference -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.diff.UdtReference>
                _targetUdtConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _targetUdtType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _targetUdtConsumer =
                        (builder, supplier) -> {
                            builder.setTargetUdt(_targetUdtConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _entryNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType)
                                            _entryNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _entryNameConsumer =
                        (builder, supplier) -> {
                            builder.setEntryName(_entryNameConsumerInner1.apply(supplier));
                        };
        /* -- Consumer schemarise.alfa.runtime.model.diff.UdtEntryType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.diff.UdtEntryType>
                _entryTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _entryTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification
                                ._UdtEntryModificationBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _entryTypeConsumer =
                        (builder, supplier) -> {
                            builder.setEntryType(_entryTypeConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.diff.EditType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.EditType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _editTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _editTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _editTypeSupplier =
                        (p, consumer) -> {
                            _editTypeSupplierInner1.accept(p.getEditType(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.diff.ChangeCategoryType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.ChangeCategoryType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _changeCategorySupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType)
                                            _changeCategoryType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _changeCategorySupplier =
                        (p, consumer) -> {
                            _changeCategorySupplierInner1.accept(p.getChangeCategory(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.diff.Snippet ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _beforeSnippetSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.diff.Snippet,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _beforeSnippetSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _beforeSnippetType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _beforeSnippetType),
                                    pInner1,
                                    _beforeSnippetSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _beforeSnippetSupplier =
                        (p, consumer) -> {
                            _beforeSnippetSupplierInner1.accept(p.getBeforeSnippet(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.diff.Snippet ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<schemarise.alfa.runtime.model.diff.Snippet>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _afterSnippetSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            schemarise.alfa.runtime.model.diff.Snippet,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _afterSnippetSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model.UdtDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _afterSnippetType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType)
                                            _afterSnippetType),
                                    pInner1,
                                    _afterSnippetSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _afterSnippetSupplier =
                        (p, consumer) -> {
                            _afterSnippetSupplierInner1.accept(p.getAfterSnippet(), consumer);
                        };
        /* -- Supplier string ? -- */
        java.util.function.BiConsumer<
                        java.util.Optional<java.lang.String>,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            java.util.function.BiConsumer<
                                            java.lang.String,
                                            com.schemarise.alfa.runtime.DataConsumer>
                                    _messageSupplierInner2 =
                                            (pInner2, consumerInner2) -> {
                                                consumerInner2.consume(
                                                        ((schemarise.alfa.runtime.model
                                                                        .ScalarDataType)
                                                                ((schemarise.alfa.runtime.model
                                                                                        .OptionalDataType)
                                                                                _messageType)
                                                                        .getComponentType()),
                                                        pInner2);
                                            };
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.OptionalDataType) _messageType),
                                    pInner1,
                                    _messageSupplierInner2);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _messageSupplier =
                        (p, consumer) -> {
                            _messageSupplierInner1.accept(p.getMessage(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.diff.UdtReference -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtReference,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetUdtSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _targetUdtType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _targetUdtSupplier =
                        (p, consumer) -> {
                            _targetUdtSupplierInner1.accept(p.getTargetUdt(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _entryNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _entryNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _entryNameSupplier =
                        (p, consumer) -> {
                            _entryNameSupplierInner1.accept(p.getEntryName(), consumer);
                        };
        /* -- Supplier schemarise.alfa.runtime.model.diff.UdtEntryType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _entryTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _entryTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtEntryModification,
                        com.schemarise.alfa.runtime.DataConsumer>
                _entryTypeSupplier =
                        (p, consumer) -> {
                            _entryTypeSupplierInner1.accept(p.getEntryType(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtEntryModification, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta editTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_editTypeSupplier),
                        java.util.Optional.of(_editTypeConsumer),
                        java.util.Optional.of(_editTypeSupplierInner1),
                        java.util.Optional.of(_editTypeConsumerInner1),
                        _editTypeType,
                        FIELD_EDITTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta changeCategoryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_changeCategorySupplier),
                        java.util.Optional.of(_changeCategoryConsumer),
                        java.util.Optional.of(_changeCategorySupplierInner1),
                        java.util.Optional.of(_changeCategoryConsumerInner1),
                        _changeCategoryType,
                        FIELD_CHANGECATEGORY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta beforeSnippetMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_beforeSnippetSupplier),
                        java.util.Optional.of(_beforeSnippetConsumer),
                        java.util.Optional.of(_beforeSnippetSupplierInner1),
                        java.util.Optional.of(_beforeSnippetConsumerInner1),
                        _beforeSnippetType,
                        FIELD_BEFORESNIPPET,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta afterSnippetMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_afterSnippetSupplier),
                        java.util.Optional.of(_afterSnippetConsumer),
                        java.util.Optional.of(_afterSnippetSupplierInner1),
                        java.util.Optional.of(_afterSnippetConsumerInner1),
                        _afterSnippetType,
                        FIELD_AFTERSNIPPET,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta messageMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_messageSupplier),
                        java.util.Optional.of(_messageConsumer),
                        java.util.Optional.of(_messageSupplierInner1),
                        java.util.Optional.of(_messageConsumerInner1),
                        _messageType,
                        FIELD_MESSAGE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta targetUdtMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_targetUdtSupplier),
                        java.util.Optional.of(_targetUdtConsumer),
                        java.util.Optional.of(_targetUdtSupplierInner1),
                        java.util.Optional.of(_targetUdtConsumerInner1),
                        _targetUdtType,
                        FIELD_TARGETUDT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta entryNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_entryNameSupplier),
                        java.util.Optional.of(_entryNameConsumer),
                        java.util.Optional.of(_entryNameSupplierInner1),
                        java.util.Optional.of(_entryNameConsumerInner1),
                        _entryNameType,
                        FIELD_ENTRYNAME,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta entryTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_entryTypeSupplier),
                        java.util.Optional.of(_entryTypeConsumer),
                        java.util.Optional.of(_entryTypeSupplierInner1),
                        java.util.Optional.of(_entryTypeConsumerInner1),
                        _entryTypeType,
                        FIELD_ENTRYTYPE,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtEntryModificationBuilder builder() {
            return new schemarise.alfa.runtime.model.diff.UdtEntryModification
                    ._UdtEntryModificationBuilderImpl();
        }

        @Override
        public UdtEntryModificationBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.diff.UdtEntryModification
                    ._UdtEntryModificationBuilderImpl(cc);
        }

        public UdtEntryModificationDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<UdtEntryModification>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_EDITTYPE, editTypeMeta);
                                        put(FIELD_CHANGECATEGORY, changeCategoryMeta);
                                        put(FIELD_BEFORESNIPPET, beforeSnippetMeta);
                                        put(FIELD_AFTERSNIPPET, afterSnippetMeta);
                                        put(FIELD_MESSAGE, messageMeta);
                                        put(FIELD_TARGETUDT, targetUdtMeta);
                                        put(FIELD_ENTRYNAME, entryNameMeta);
                                        put(FIELD_ENTRYTYPE, entryTypeMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<
                        java.lang.String,
                        com.schemarise.alfa.runtime.FieldMeta<UdtEntryModification>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_EDITTYPE:
                    return FIELD_EDITTYPE;
                case FIELD_ID_CHANGECATEGORY:
                    return FIELD_CHANGECATEGORY;
                case FIELD_ID_BEFORESNIPPET:
                    return FIELD_BEFORESNIPPET;
                case FIELD_ID_AFTERSNIPPET:
                    return FIELD_AFTERSNIPPET;
                case FIELD_ID_MESSAGE:
                    return FIELD_MESSAGE;
                case FIELD_ID_TARGETUDT:
                    return FIELD_TARGETUDT;
                case FIELD_ID_ENTRYNAME:
                    return FIELD_ENTRYNAME;
                case FIELD_ID_ENTRYTYPE:
                    return FIELD_ENTRYTYPE;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return true;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.diff.UdtEntryModification{AfterSnippet:optional<schemarise.alfa.runtime.model.diff.Snippet[505d47e0];>;BeforeSnippet:optional<schemarise.alfa.runtime.model.diff.Snippet[505d47e0];>;ChangeCategory:schemarise.alfa.runtime.model.diff.ChangeCategoryType[de6e8578];EditType:schemarise.alfa.runtime.model.diff.EditType[25750a26];EntryName:string;EntryType:schemarise.alfa.runtime.model.diff.UdtEntryType[6097f1e4];Message:optional<string;>;TargetUdt:schemarise.alfa.runtime.model.diff.UdtReference[4d5a76c7];}
            schemarise.alfa.runtime.model.diff.UdtEntryModification{ChangeCategory:schemarise.alfa.runtime.model.diff.ChangeCategoryType[de6e8578];EditType:schemarise.alfa.runtime.model.diff.EditType[25750a26];EntryName:string;EntryType:schemarise.alfa.runtime.model.diff.UdtEntryType[6097f1e4];TargetUdt:schemarise.alfa.runtime.model.diff.UdtReference[4d5a76c7];}
            */
            return "f912ce66:2f868931";
        }
    }
    // </editor-fold>

}
