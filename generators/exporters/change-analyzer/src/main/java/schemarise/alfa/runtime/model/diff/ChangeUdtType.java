// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.diff;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.JavaExporter")
public enum ChangeUdtType implements com.schemarise.alfa.runtime.Enum {
    Trait("Trait", java.util.Optional.empty()),
    Record("Record", java.util.Optional.empty()),
    Entity("Entity", java.util.Optional.empty()),
    Enum("Enum", java.util.Optional.empty()),
    Union("Union", java.util.Optional.empty()),
    Key("Key", java.util.Optional.empty()),
    Annotation("Annotation", java.util.Optional.empty()),
    Testcase("Testcase", java.util.Optional.empty()),
    Library("Library", java.util.Optional.empty()),
    Service("Service", java.util.Optional.empty()),
    Transform("Transform", java.util.Optional.empty()),
    NativeType("NativeType", java.util.Optional.empty()),
    Dataproduct("Dataproduct", java.util.Optional.empty());

    private final java.lang.String value;
    private final java.util.Optional<java.lang.String> lexical;

    private static java.util.Map<java.lang.String, ChangeUdtType> mappings;

    ChangeUdtType(java.lang.String v, java.util.Optional<java.lang.String> lex) {
        value = v;
        lexical = lex;
    }

    public static ChangeUdtType fromValue(java.lang.String v) {
        if (mappings == null) {
            java.util.Map<java.lang.String, ChangeUdtType> m = new java.util.HashMap<>();
            for (ChangeUdtType c : ChangeUdtType.values()) {
                m.put(c.value, c);
            }
            mappings = m;
        }

        return mappings.get(v);
    }

    public java.util.Optional<String> getLexicalValue() {
        return lexical;
    }

    public java.lang.String value() {
        return value;
    }

    public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
        return schemarise.alfa.runtime.model.diff.ChangeUdtType.ChangeUdtTypeDescriptor.INSTANCE;
    }

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class ChangeUdtTypeDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.diff.ChangeUdtType";
        public static schemarise.alfa.runtime.model.diff.ChangeUdtType.ChangeUdtTypeDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.diff.ChangeUdtType
                                .ChangeUdtTypeDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_TRAIT = 0;
        public static final String FIELD_TRAIT = "Trait";

        public static final short FIELD_ID_RECORD = 1;
        public static final String FIELD_RECORD = "Record";

        public static final short FIELD_ID_ENTITY = 2;
        public static final String FIELD_ENTITY = "Entity";

        public static final short FIELD_ID_ENUM = 3;
        public static final String FIELD_ENUM = "Enum";

        public static final short FIELD_ID_UNION = 4;
        public static final String FIELD_UNION = "Union";

        public static final short FIELD_ID_KEY = 5;
        public static final String FIELD_KEY = "Key";

        public static final short FIELD_ID_ANNOTATION = 6;
        public static final String FIELD_ANNOTATION = "Annotation";

        public static final short FIELD_ID_TESTCASE = 7;
        public static final String FIELD_TESTCASE = "Testcase";

        public static final short FIELD_ID_LIBRARY = 8;
        public static final String FIELD_LIBRARY = "Library";

        public static final short FIELD_ID_SERVICE = 9;
        public static final String FIELD_SERVICE = "Service";

        public static final short FIELD_ID_TRANSFORM = 10;
        public static final String FIELD_TRANSFORM = "Transform";

        public static final short FIELD_ID_NATIVETYPE = 11;
        public static final String FIELD_NATIVETYPE = "NativeType";

        public static final short FIELD_ID_DATAPRODUCT = 12;
        public static final String FIELD_DATAPRODUCT = "Dataproduct";

        private schemarise.alfa.runtime.model.ScalarDataType _traitType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _recordType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _entityType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _enumType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _unionType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _keyType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _annotationType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _testcaseType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _libraryType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _serviceType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _transformType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _nativeTypeType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _dataproductType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.voidType)
                        .build();

        public java.util.Optional<
                        java.util.function.Function<ChangeUdtType, java.util.function.Supplier>>
                getFieldSupplier(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.FieldMeta traitMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _traitType,
                        FIELD_TRAIT,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta recordMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _recordType,
                        FIELD_RECORD,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta entityMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _entityType,
                        FIELD_ENTITY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta _enumMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _enumType,
                        FIELD_ENUM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta unionMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _unionType,
                        FIELD_UNION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta keyMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _keyType,
                        FIELD_KEY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta annotationMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _annotationType,
                        FIELD_ANNOTATION,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta testcaseMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _testcaseType,
                        FIELD_TESTCASE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta libraryMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _libraryType,
                        FIELD_LIBRARY,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta serviceMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _serviceType,
                        FIELD_SERVICE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta transformMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _transformType,
                        FIELD_TRANSFORM,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta nativeTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _nativeTypeType,
                        FIELD_NATIVETYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta dataproductMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        java.util.Optional.empty(),
                        _dataproductType,
                        FIELD_DATAPRODUCT,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return false;
        }

        @Override
        public boolean convertableToBuilder() {
            return false;
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public com.schemarise.alfa.runtime.Builder builder(
                com.schemarise.alfa.runtime.IBuilderConfig cc) {
            throw new UnsupportedOperationException();
        }

        public ChangeUdtTypeDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ChangeUdtType>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_TRAIT, traitMeta);
                                        put(FIELD_RECORD, recordMeta);
                                        put(FIELD_ENTITY, entityMeta);
                                        put(FIELD_ENUM, _enumMeta);
                                        put(FIELD_UNION, unionMeta);
                                        put(FIELD_KEY, keyMeta);
                                        put(FIELD_ANNOTATION, annotationMeta);
                                        put(FIELD_TESTCASE, testcaseMeta);
                                        put(FIELD_LIBRARY, libraryMeta);
                                        put(FIELD_SERVICE, serviceMeta);
                                        put(FIELD_TRANSFORM, transformMeta);
                                        put(FIELD_NATIVETYPE, nativeTypeMeta);
                                        put(FIELD_DATAPRODUCT, dataproductMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<ChangeUdtType>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_TRAIT:
                    return FIELD_TRAIT;
                case FIELD_ID_RECORD:
                    return FIELD_RECORD;
                case FIELD_ID_ENTITY:
                    return FIELD_ENTITY;
                case FIELD_ID_ENUM:
                    return FIELD_ENUM;
                case FIELD_ID_UNION:
                    return FIELD_UNION;
                case FIELD_ID_KEY:
                    return FIELD_KEY;
                case FIELD_ID_ANNOTATION:
                    return FIELD_ANNOTATION;
                case FIELD_ID_TESTCASE:
                    return FIELD_TESTCASE;
                case FIELD_ID_LIBRARY:
                    return FIELD_LIBRARY;
                case FIELD_ID_SERVICE:
                    return FIELD_SERVICE;
                case FIELD_ID_TRANSFORM:
                    return FIELD_TRANSFORM;
                case FIELD_ID_NATIVETYPE:
                    return FIELD_NATIVETYPE;
                case FIELD_ID_DATAPRODUCT:
                    return FIELD_DATAPRODUCT;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.diff.ChangeUdtType{Trait,Record,Entity,Enum,Union,Key,Annotation,Testcase,Library,Service,Transform,NativeType,Dataproduct}
            schemarise.alfa.runtime.model.diff.ChangeUdtType{Trait,Record,Entity,Enum,Union,Key,Annotation,Testcase,Library,Service,Transform,NativeType,Dataproduct}
            */
            return "d9622ef5:";
        }
    }
    // </editor-fold>
}
