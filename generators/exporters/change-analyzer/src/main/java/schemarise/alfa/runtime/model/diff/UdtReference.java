// *********************************************************************************************************
//      DO NOT EDIT. This file has been generated by the Schemarise Alfa toolset. See
// www.schemarise.com
// *********************************************************************************************************
package schemarise.alfa.runtime.model.diff;

@javax.annotation.Generated("com.schemarise.alfa.generators.exporters.java.JavaExporter")
public interface UdtReference extends com.schemarise.alfa.runtime.Record {

    schemarise.alfa.runtime.model.diff.ChangeUdtType getUdtType();

    java.lang.String getUdtName();

    // <editor-fold defaultstate="collapsed" desc="Builder support">
    public static UdtReferenceBuilder builder() {
        return new schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl();
    }

    public static UdtReferenceBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig bc) {
        if (bc.getCustomBuilderFactory().isPresent())
            return bc.getCustomBuilderFactory()
                    .get()
                    .builder(
                            bc,
                            schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor
                                    .INSTANCE);
        else
            return new schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl(bc);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder(
            com.schemarise.alfa.runtime.IBuilderConfig bc) {
        return com.schemarise.alfa.runtime.utils.AlfaUtils.toBuilder(bc, this);
    }

    public default <B extends com.schemarise.alfa.runtime.Builder> B toBuilder() {
        return toBuilder(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Interface">
    public interface UdtReferenceBuilder
            extends com.schemarise.alfa.runtime.Builder, com.schemarise.alfa.runtime.AlfaObject {
        UdtReferenceBuilder setUdtType(schemarise.alfa.runtime.model.diff.ChangeUdtType v);

        schemarise.alfa.runtime.model.diff.ChangeUdtType getUdtType();

        UdtReferenceBuilder setUdtName(java.lang.String v);

        java.lang.String getUdtName();

        UdtReference build();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Builder Impl class">
    final class _UdtReferenceBuilderImpl extends _UdtReference__Base__
            implements UdtReferenceBuilder {
        private final com.schemarise.alfa.runtime.IBuilderConfig __builderConfig;

        private java.util.BitSet __missingFields;

        private _UdtReferenceBuilderImpl() {
            this(com.schemarise.alfa.runtime.BuilderConfig.getInstance());
        }

        private _UdtReferenceBuilderImpl(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            __builderConfig = cc;
            __missingFields = new java.util.BitSet(2);
            __missingFields.set(0, 2);
        }

        protected com.schemarise.alfa.runtime.IBuilderConfig builderConfig() {
            return __builderConfig;
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor.INSTANCE;
        }

        public UdtReferenceBuilder setUdtType(schemarise.alfa.runtime.model.diff.ChangeUdtType v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtType", v);
            this._udtType = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor
                            .FIELD_ID_UDTTYPE);
            return this;
        }

        public UdtReferenceBuilder setUdtName(java.lang.String v) {
            com.schemarise.alfa.runtime.utils.AlfaUtils.notNull("UdtName", v);
            this._udtName = v;
            clearMissingFlag(
                    schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor
                            .FIELD_ID_UDTNAME);
            return this;
        }

        public void modify(java.lang.String fieldName, java.lang.Object val) {
            switch (fieldName) {
                case "UdtType":
                    setUdtType((schemarise.alfa.runtime.model.diff.ChangeUdtType) val);
                    break;
                case "UdtName":
                    setUdtName((java.lang.String) val);
                    break;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            schemarise.alfa.runtime.model.asserts.ConstraintType.UnknownField,
                            "Attempt to set unknown field " + fieldName);
            }
        }

        public UdtReference build() {

            com.schemarise.alfa.runtime.utils.Utils.assertMandatoryFieldsSet(
                    builderConfig(),
                    __missingFields,
                    2,
                    schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor
                            .INSTANCE);

            UdtReference obj;

            if (builderConfig().getCustomBuilderFactory().isPresent())
                obj =
                        (UdtReference)
                                builderConfig()
                                        .getCustomBuilderFactory()
                                        .get()
                                        .create(builderConfig(), descriptor(), _udtType, _udtName);
            else
                obj =
                        new schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceConcrete(
                                _udtType, _udtName);

            if (builderConfig().shouldValidateOnBuild()) obj.validate(builderConfig());

            return obj;
        }

        private void clearMissingFlag(short flag) {

            __missingFields.clear(flag);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.diff.UdtReference",
                    new java.lang.String[] {"UdtType", "UdtName"},
                    new java.lang.Object[] {_udtType, _udtName});
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Concrete class">

    final class _UdtReferenceConcrete extends _UdtReference__Base__ implements UdtReference {

        private _UdtReferenceConcrete() {
            super();
        }

        private _UdtReferenceConcrete(
                schemarise.alfa.runtime.model.diff.ChangeUdtType _udtType,
                java.lang.String _udtName) {
            super(_udtType, _udtName);
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Base class">
    abstract class _UdtReference__Base__ {
        public schemarise.alfa.runtime.model.diff.ChangeUdtType _udtType;
        public java.lang.String _udtName;

        public _UdtReference__Base__() {}

        public _UdtReference__Base__(
                schemarise.alfa.runtime.model.diff.ChangeUdtType _udtType,
                java.lang.String _udtName) {
            this._udtType = _udtType;
            this._udtName = _udtName;
        }

        public schemarise.alfa.runtime.model.diff.ChangeUdtType getUdtType() {
            return _udtType;
        }

        public java.lang.String getUdtName() {
            return _udtName;
        }

        public int hashCode() {
            return java.util.Objects.hash(_udtType, _udtName);
        }

        public java.lang.String toString() {
            return com.schemarise.alfa.runtime.utils.Utils.udtToString(
                    "schemarise.alfa.runtime.model.diff.UdtReference",
                    new java.lang.String[] {"UdtType", "UdtName"},
                    new java.lang.Object[] {_udtType, _udtName});
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o
                    instanceof
                    schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceConcrete))
                return false;
            schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceConcrete rhs =
                    (schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceConcrete) o;
            return java.util.Objects.equals(_udtType, rhs._udtType)
                    && java.util.Objects.equals(_udtName, rhs._udtName);
        }

        public void traverse(com.schemarise.alfa.runtime.Visitor v) {}

        public java.util.Optional<? extends com.schemarise.alfa.runtime.Key> get$key() {
            return java.util.Optional.empty();
        }

        public com.schemarise.alfa.runtime.TypeDescriptor descriptor() {
            return schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor.INSTANCE;
        }

        public Object get(java.lang.String fieldName) {
            switch (fieldName) {
                case "UdtType":
                    return _udtType;
                case "UdtName":
                    return _udtName;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Cannot get unknown field " + fieldName);
            }
        }

        public void validate(com.schemarise.alfa.runtime.IBuilderConfig __builderConfig) {
            getUdtType().validate(__builderConfig);

            // TODO
            // _key if exists, will be mandatory
        }
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="TypeDescriptor class">

    public static final class UdtReferenceDescriptor
            extends com.schemarise.alfa.runtime.utils.DefaultTypeDescriptor {
        public static java.lang.String TYPE_NAME =
                "schemarise.alfa.runtime.model.diff.UdtReference";
        public static schemarise.alfa.runtime.model.diff.UdtReference.UdtReferenceDescriptor
                INSTANCE =
                        new schemarise.alfa.runtime.model.diff.UdtReference
                                .UdtReferenceDescriptor();

        private schemarise.alfa.runtime.model.UdtDataType _asUdtType_ =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.recordType)
                        .setFullyQualifiedName(TYPE_NAME)
                        .build();
        public static final short FIELD_ID_UDTTYPE = 0;
        public static final String FIELD_UDTTYPE = "UdtType";

        public static final short FIELD_ID_UDTNAME = 1;
        public static final String FIELD_UDTNAME = "UdtName";

        private schemarise.alfa.runtime.model.UdtDataType _udtTypeType =
                schemarise.alfa.runtime.model.UdtDataType.builder()
                        .setFullyQualifiedName("schemarise.alfa.runtime.model.diff.ChangeUdtType")
                        .setUdtType(schemarise.alfa.runtime.model.UdtMetaType.enumType)
                        .build();

        private schemarise.alfa.runtime.model.ScalarDataType _udtNameType =
                schemarise.alfa.runtime.model.ScalarDataType.builder()
                        .setScalarType(schemarise.alfa.runtime.model.ScalarType.stringType)
                        .build();

        /* -- Consumer schemarise.alfa.runtime.model.diff.ChangeUdtType -- */
        java.util.function.Function<
                        com.schemarise.alfa.runtime.DataSupplier,
                        schemarise.alfa.runtime.model.diff.ChangeUdtType>
                _udtTypeConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.objectValue(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtTypeConsumer =
                        (builder, supplier) -> {
                            builder.setUdtType(_udtTypeConsumerInner1.apply(supplier));
                        };
        /* -- Consumer string -- */
        java.util.function.Function<com.schemarise.alfa.runtime.DataSupplier, java.lang.String>
                _udtNameConsumerInner1 =
                        (supplierInner1) -> {
                            return supplierInner1.stringValue(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _udtNameType));
                        };
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl,
                        com.schemarise.alfa.runtime.DataSupplier>
                _udtNameConsumer =
                        (builder, supplier) -> {
                            builder.setUdtName(_udtNameConsumerInner1.apply(supplier));
                        };

        /* -- Supplier schemarise.alfa.runtime.model.diff.ChangeUdtType -- */
        java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.ChangeUdtType,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.UdtDataType) _udtTypeType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtReference,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtTypeSupplier =
                        (p, consumer) -> {
                            _udtTypeSupplierInner1.accept(p.getUdtType(), consumer);
                        };
        /* -- Supplier string -- */
        java.util.function.BiConsumer<java.lang.String, com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplierInner1 =
                        (pInner1, consumerInner1) -> {
                            consumerInner1.consume(
                                    ((schemarise.alfa.runtime.model.ScalarDataType) _udtNameType),
                                    pInner1);
                        };
        private java.util.function.BiConsumer<
                        schemarise.alfa.runtime.model.diff.UdtReference,
                        com.schemarise.alfa.runtime.DataConsumer>
                _udtNameSupplier =
                        (p, consumer) -> {
                            _udtNameSupplierInner1.accept(p.getUdtName(), consumer);
                        };

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                UdtReference, com.schemarise.alfa.runtime.DataConsumer>>
                getFieldSupplier(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getSupplier();
        }

        public java.util.Optional<
                        java.util.function.BiConsumer<
                                com.schemarise.alfa.runtime.Builder,
                                com.schemarise.alfa.runtime.DataSupplier>>
                getFieldConsumer(java.lang.String fieldName) {
            return _fieldsMeta_.get(fieldName).getConsumer();
        }

        public com.schemarise.alfa.runtime.FieldMeta udtTypeMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtTypeSupplier),
                        java.util.Optional.of(_udtTypeConsumer),
                        java.util.Optional.of(_udtTypeSupplierInner1),
                        java.util.Optional.of(_udtTypeConsumerInner1),
                        _udtTypeType,
                        FIELD_UDTTYPE,
                        java.util.Optional.empty());
        public com.schemarise.alfa.runtime.FieldMeta udtNameMeta =
                new com.schemarise.alfa.runtime.FieldMeta(
                        java.util.Optional.of(_udtNameSupplier),
                        java.util.Optional.of(_udtNameConsumer),
                        java.util.Optional.of(_udtNameSupplierInner1),
                        java.util.Optional.of(_udtNameConsumerInner1),
                        _udtNameType,
                        FIELD_UDTNAME,
                        java.util.Optional.empty());

        @Override
        public boolean hasBuilder() {
            return true;
        }

        @Override
        public boolean convertableToBuilder() {
            return true;
        }

        @Override
        public UdtReferenceBuilder builder() {
            return new schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl();
        }

        @Override
        public UdtReferenceBuilder builder(com.schemarise.alfa.runtime.IBuilderConfig cc) {
            return new schemarise.alfa.runtime.model.diff.UdtReference._UdtReferenceBuilderImpl(cc);
        }

        public UdtReferenceDescriptor() {
            super.init();
        }

        protected java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> _asserts_ =
                java.util.Collections.unmodifiableMap(
                        new java.util.LinkedHashMap() {
                            {
                            }
                        });

        protected java.util.Map<
                        java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtReference>>
                _fieldsMeta_ =
                        java.util.Collections.unmodifiableMap(
                                new java.util.LinkedHashMap() {
                                    {
                                        put(FIELD_UDTTYPE, udtTypeMeta);
                                        put(FIELD_UDTNAME, udtNameMeta);
                                    }
                                });

        @Override
        public schemarise.alfa.runtime.model.UdtDataType getUdtDataType() {
            return _asUdtType_;
        }

        @Override
        public java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Assert> getAsserts() {
            return _asserts_;
        }

        @Override
        public java.util.Map<java.lang.String, com.schemarise.alfa.runtime.FieldMeta<UdtReference>>
                getAllFieldsMeta() {
            return _fieldsMeta_;
        }

        @Override
        /** Not applicable - this is not an entity or a key directly linked to an entity */
        public java.util.Optional<com.schemarise.alfa.runtime.TypeDescriptor> getEntityKeyModel() {
            return java.util.Optional.empty();
        }

        @Override
        public java.lang.String fieldIdName(int id) {
            switch (id) {
                case FIELD_ID_UDTTYPE:
                    return FIELD_UDTTYPE;
                case FIELD_ID_UDTNAME:
                    return FIELD_UDTNAME;
                default:
                    throw new com.schemarise.alfa.runtime.AlfaRuntimeException(
                            "Unknown field id " + id);
            }
        }

        public boolean hasAbstractTypeFieldsInClosure() {
            return false;
        }

        public java.util.Set<java.lang.String> getImmediateDescendants() {
            return java.util.Collections.emptySet();
        }

        public java.util.Optional<
                        java.util.Map<java.lang.String, schemarise.alfa.runtime.model.Expression>>
                getAnnotations() {
            return java.util.Optional.empty();
        }

        public java.util.Set<schemarise.alfa.runtime.model.ModifierType> getModifiers() {
            return new java.util.HashSet<schemarise.alfa.runtime.model.ModifierType>() {
                {
                }
            };
        }

        public java.lang.String getChecksum() {
            /*
            schemarise.alfa.runtime.model.diff.UdtReference{UdtName:string;UdtType:schemarise.alfa.runtime.model.diff.ChangeUdtType[d9622ef5];}
            schemarise.alfa.runtime.model.diff.UdtReference{UdtName:string;UdtType:schemarise.alfa.runtime.model.diff.ChangeUdtType[d9622ef5];}
            */
            return "4d5a76c7:";
        }
    }
    // </editor-fold>

}
