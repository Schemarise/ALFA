package com.schemarise.alfa.generators.exporters.refactor

import com.schemarise.alfa.compiler.ast.model.ICompilationUnitArtifact
import com.schemarise.alfa.compiler.utils.{StdoutLogger, TestCompiler, VFS}
import com.schemarise.alfa.generators.common.AlfaExporterParams
import com.schemarise.alfa.utils.testing.AlfaFunSuite

import java.nio.file.Files
import java.util

class RefactorExporterTest extends AlfaFunSuite {
  test("Simple test") {
    val script =
      """
        |namespace Imported
        |
        |record BondTrade {
        |    TradeId : string
        |    MaturityDate : date
        |    Instrument : string
        |    FaceValue : double
        |    Quantity : long
        |    TradeCcy : string
        |    TradeDate : date
        |    Type : enum<Buy,Sell>
        |}
        |
        |record EquityTrade {
        |    TradeId : string
        |    Price : double
        |    Quantity : long
        |    Instrument : string
        |    TradeCcy : string
        |    TradeDate : date
        |    Type : enum<Buy,Sell>
        |}
        |
        |record FXTrade {
        |    TradeId : string
        |    QuoteCcy : string
        |    TradeDate : date
        |    TradeCcy : string
        |    Type : enum<Buy,Sell>
        |    Notional : double
        |}
        |
      """.stripMargin

    val tgtDir = testGeneralize("trademodel", script)

    assert( Files.exists( tgtDir.resolve("default.Base1.alfa")) )
    assert( Files.exists( tgtDir.resolve("default.Base2.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.BondTrade.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.EquityTrade.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.FXTrade.alfa")) )
  }

  test("Common use test") {
    val script =
      """
        |namespace Common
        |
        |record A {
        |  x: int
        |  y: int
        |  id :int
        |}
        |
        |record B {
        |  x: int
        |  y: int
        |  z: int
        |  id :int
        |}
        |
        |record C {
        |  z: int
        |  id :int
        |}
        |
      """.stripMargin

    val tgtDir = testGeneralize("commonuse", script)
    assert( Files.exists( tgtDir.resolve("default.Base1.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.A.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.B.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.C.alfa")) )

    assert( equalsIgnoringWhitespace(VFS.read( tgtDir.resolve("default.Base1.alfa") ),
      """// Generated by ALFA Refactor
        |
        |trait default.Base1 {
        |  y : int
        |  x : int
        |}
        |""".stripMargin) )

    assert( equalsIgnoringWhitespace(VFS.read( tgtDir.resolve("Common.A.alfa") ),
      """record Common.A includes default.Base1 {
        |  id : int
        |}
        |""".stripMargin) )

    assert( equalsIgnoringWhitespace(VFS.read( tgtDir.resolve("Common.B.alfa") ),
      """record Common.B includes default.Base1 {
        |  z : int
        |  id : int
        |}
        |""".stripMargin) )
  }


  test("Common specialize test") {
    val script =
      """
        |namespace Common
        |
        |record R1 {
        |  x: int
        |  y: int
        |}
        |
        |record R2 {
        |  x: int
        |}
        |
        |record R3 {
        |  x: int
        |  y: int
        |}
        |
        |record R4 {
        |  x: int
        |}
        |
      """.stripMargin

    testGeneralize("generalize2", script)
  }

  private def testGeneralize(rootDir : String, script: String) = {
    val cua = TestCompiler.compileValidScript(script)
    if ( cua.hasErrors )
      throw new RuntimeException(cua.getErrors.mkString("\n"))


    val tgtDir = targetGeneratedTestSourcesPath("refactor/" + rootDir)
    val m = new java.util.HashMap[String, Object]()
    m.put(RefactorExporter.Namespace, "default")
    m.put(RefactorExporter.ExcludeFields, "id")
    m.put(RefactorExporter.AttribSizeThreshold, "2")

    val rst = new RefactorExporter(AlfaExporterParams(new StdoutLogger(), tgtDir, cua, m))
    rst.exportSchema()
    tgtDir
  }


  test("Common specialize selected fields test") {
    val script =
      """
        |namespace Common
        |
        |record R1 {
        |  y: int
        |}
        |
        |record R2 {
        |  x: int
        |  z: int
        |}
        |
        |record R3 {
        |  x: int
        |  y: int
        |  z: int
        |}
        |
        |record R4 {
        |  x: int
        |  z: int
        |}
        |
        |record R5 {
        |  a: int
        |  b: int
        |}
        |
        |record R6 {
        |  a: int
        |  b : int
        |  c: int
        |}
        |
        |record R7 {
        |  a: int
        |  d: int
        |}
        |
        |record R8 {
        |  a: int
        |  b: int
        |  e: int
        |}
        |
      """.stripMargin

    val cua = TestCompiler.compileValidScript(script)
    if ( cua.hasErrors )
      throw new RuntimeException(cua.getErrors.mkString("\n"))

    onlyFieldsTest1(cua)
    onlyFieldsTest2(cua)
    onlyFieldsTest3(cua)
  }

  private def onlyFieldsTest1(cua: ICompilationUnitArtifact) = {
    val tgtDir = targetGeneratedTestSourcesPath("refactor/onlyfields/")
    val m = new util.HashMap[String, Object]()
    m.put(RefactorExporter.Namespace, "Common")
    m.put(RefactorExporter.OnlyIncludeFields, "x,a")

    val rst = new RefactorExporter(AlfaExporterParams(new StdoutLogger(), tgtDir, cua, m))
    rst.exportSchema()

    val genbase1 = VFS.read(tgtDir.resolve("Common.Base1.alfa"))
    val genbase3 = VFS.read(tgtDir.resolve("Common.Base2.alfa"))

    assert(equalsIgnoringWhitespace(genbase1,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base1 {
        |  a : int
        |}
        |""".stripMargin))

    assert(equalsIgnoringWhitespace(genbase3,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base2 {
        |  x : int
        |}
        |""".stripMargin))
  }

  private def onlyFieldsTest2(cua: ICompilationUnitArtifact) = {
    val tgtDir2 = targetGeneratedTestSourcesPath("refactor/onlyfields2/")
    val m2 = new util.HashMap[String, Object]()
    m2.put(RefactorExporter.Namespace, "Common")
    m2.put(RefactorExporter.OnlyIncludeFields, "x,z,a,b")

    val rst2 = new RefactorExporter(AlfaExporterParams(new StdoutLogger(), tgtDir2, cua, m2))
    rst2.exportSchema()

    val genbase1a = VFS.read(tgtDir2.resolve("Common.Base1.alfa"))
    val genbase2a = VFS.read(tgtDir2.resolve("Common.Base2.alfa"))
    val genbase3a = VFS.read(tgtDir2.resolve("Common.Base3.alfa"))

    assert(equalsIgnoringWhitespace(genbase1a,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base1 includes Common.Base2 {
        |  b : int
        |}
        |
        |""".stripMargin))

    assert(equalsIgnoringWhitespace(genbase2a,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base2 {
        |  a : int
        |}
        |""".stripMargin))

    assert(equalsIgnoringWhitespace(genbase3a,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base3 {
        |  z : int
        |  x : int
        |}
        |""".stripMargin))


    assert(equalsIgnoringWhitespace(VFS.read(tgtDir2.resolve("Common.R8.alfa")),
      """record Common.R8 includes Common.Base1 {
        |  e : int
        |}
        |""".stripMargin))
  }

  private def onlyFieldsTest3(cua: ICompilationUnitArtifact) = {
    val tgtDir2 = targetGeneratedTestSourcesPath("refactor/onlyfields3/")
    val m2 = new util.HashMap[String, Object]()
    m2.put(RefactorExporter.Namespace, "Common")
    m2.put(RefactorExporter.OnlyIncludeFields, "x,z,a,b")
    m2.put(RefactorExporter.AttribSizeThreshold, "2")

    val rst2 = new RefactorExporter(AlfaExporterParams(new StdoutLogger(), tgtDir2, cua, m2))
    rst2.exportSchema()

    val genbase1a = VFS.read(tgtDir2.resolve("Common.Base1.alfa"))

    assert(equalsIgnoringWhitespace(genbase1a,
      """// Generated by ALFA Refactor
        |
        |trait Common.Base1 {
        |  z : int
        |  x : int
        |}
        |""".stripMargin))

    assert(equalsIgnoringWhitespace(VFS.read(tgtDir2.resolve("Common.R2.alfa")),
      """record Common.R2 includes Common.Base1 {
        |
        |}
        |""".stripMargin))
  }
}
