package com.schemarise.alfa.generators.exporters.refactor

import com.schemarise.alfa.compiler.utils.{StdoutLogger, TestCompiler, VFS}
import com.schemarise.alfa.generators.common.AlfaExporterParams
import com.schemarise.alfa.utils.testing.AlfaFunSuite

import java.nio.file.Files

class RefactorExporterTest extends AlfaFunSuite {
  test("Simple test") {
    val script =
      """
        |namespace Imported
        |
        |record BondTrade {
        |    TradeId : string
        |    MaturityDate : date
        |    Instrument : string
        |    FaceValue : double
        |    Quantity : long
        |    TradeCcy : string
        |    TradeDate : date
        |    Type : enum<Buy,Sell>
        |}
        |
        |record EquityTrade {
        |    TradeId : string
        |    Price : double
        |    Quantity : long
        |    Instrument : string
        |    TradeCcy : string
        |    TradeDate : date
        |    Type : enum<Buy,Sell>
        |}
        |
        |record FXTrade {
        |    TradeId : string
        |    QuoteCcy : string
        |    TradeDate : date
        |    TradeCcy : string
        |    Type : enum<Buy,Sell>
        |    Notional : double
        |}
        |
      """.stripMargin

    val tgtDir = testGeneralize("trademodel", script)


    assert( Files.exists( tgtDir.resolve("default.Base1.alfa")) )
    assert( Files.exists( tgtDir.resolve("default.Base2.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.BondTrade.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.EquityTrade.alfa")) )
    assert( Files.exists( tgtDir.resolve("Imported.FXTrade.alfa")) )
  }

  test("Common use test") {
    val script =
      """
        |namespace Common
        |
        |record A {
        |  x: int
        |  y: int
        |  id :int
        |}
        |
        |record B {
        |  x: int
        |  y: int
        |  z: int
        |  id :int
        |}
        |
        |record C {
        |  z: int
        |  id :int
        |}
        |
      """.stripMargin

    val tgtDir = testGeneralize("commonuse", script)
    assert( Files.exists( tgtDir.resolve("default.Base1.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.A.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.B.alfa")) )
    assert( Files.exists( tgtDir.resolve("Common.C.alfa")) )

    assert( equalsIgnoringWhitespace(VFS.read( tgtDir.resolve("default.Base1.alfa") ),
      """// Generated by ALFA Refactor
        |
        |trait default.Base1 {
        |  y : int
        |  x : int
        |}
        |""".stripMargin) )

    assert( equalsIgnoringWhitespace(VFS.read( tgtDir.resolve("Common.B.alfa") ),
      """record Common.B includes default.Base1 {
        |  z : int
        |}
        |""".stripMargin) )

  }


  test("Common specialize test") {
    val script =
      """
        |namespace Common
        |
        |record R1 {
        |  x: int
        |  y :int
        |}
        |
        |record R2 {
        |  x: int
        |}
        |
        |record R3 {
        |  x: int
        |  y:int
        |}
        |
        |record R4 {
        |  x: int
        |}
        |
      """.stripMargin

    testGeneralize("generalize2", script)
  }

  private def testGeneralize(rootDir : String, script: String) = {
    val cua = TestCompiler.compileValidScript(script)
    if ( cua.hasErrors )
      throw new RuntimeException(cua.getErrors.mkString("\n"))


    val tgtDir = targetGeneratedTestSourcesPath("refactor/" + rootDir)
    val m = new java.util.HashMap[String, Object]()
    m.put(RefactorExporter.Namespace, "default")
    m.put(RefactorExporter.IgnoreFields, "id")
    m.put(RefactorExporter.AttribSizeThreshold, "2")

    val rst = new RefactorExporter(AlfaExporterParams(new StdoutLogger(), tgtDir, cua, m))
    rst.exportSchema()
    tgtDir
  }
}
